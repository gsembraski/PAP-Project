{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///ui-router-react.min.js","webpack:///webpack/bootstrap 2f467fd00663b8ca481f?e4c8","webpack:///./_src/index.ts?9949","webpack:///../~/ui-router-core/core.js?c777","webpack:///../~/ui-router-core/common/module.js?f698","webpack:///../~/ui-router-core/common/common.js?15f9","webpack:///../~/ui-router-core/common/predicates.js?1d92","webpack:///../~/ui-router-core/common/hof.js?a6f7","webpack:///../~/ui-router-core/common/coreservices.js?cb83","webpack:///../~/ui-router-core/common/glob.js?787b","webpack:///../~/ui-router-core/common/queue.js?b623","webpack:///../~/ui-router-core/common/strings.js?8223","webpack:///../~/ui-router-core/transition/rejectFactory.js?89f9","webpack:///../~/ui-router-core/transition/transition.js?43d2","webpack:///../~/ui-router-core/common/trace.js?5a6a","webpack:///../~/ui-router-core/transition/transitionHook.js?2042","webpack:///../~/ui-router-core/state/targetState.js?1c8e","webpack:///../~/ui-router-core/transition/hookRegistry.js?0373","webpack:///../~/ui-router-core/transition/hookBuilder.js?a9d6","webpack:///../~/ui-router-core/resolve/resolveContext.js?8e83","webpack:///../~/ui-router-core/resolve/interface.js?f37c","webpack:///../~/ui-router-core/resolve/resolvable.js?ad58","webpack:///../~/ui-router-core/path/pathFactory.js?e446","webpack:///../~/ui-router-core/path/node.js?9006","webpack:///../~/ui-router-core/params/param.js?4b89","webpack:///../~/ui-router-core/url/urlMatcherConfig.js?d2ba","webpack:///../~/ui-router-core/params/type.js?9e12","webpack:///../~/ui-router-core/router.js?b1b5","webpack:///../~/ui-router-core/url/urlMatcherFactory.js?d04b","webpack:///../~/ui-router-core/url/urlMatcher.js?5124","webpack:///../~/ui-router-core/params/paramTypes.js?07a9","webpack:///../~/ui-router-core/url/urlRouter.js?8f68","webpack:///../~/ui-router-core/state/state.js?d06f","webpack:///../~/ui-router-core/transition/transitionService.js?a9c1","webpack:///../~/ui-router-core/hooks/resolve.js?fdf7","webpack:///../~/ui-router-core/hooks/views.js?d892","webpack:///../~/ui-router-core/hooks/url.js?966a","webpack:///../~/ui-router-core/hooks/redirectTo.js?0bf7","webpack:///../~/ui-router-core/hooks/onEnterExitRetain.js?460a","webpack:///../~/ui-router-core/hooks/lazyLoadStates.js?ff80","webpack:///../~/ui-router-core/view/view.js?b0d5","webpack:///../~/ui-router-core/state/stateRegistry.js?31c1","webpack:///../~/ui-router-core/state/stateMatcher.js?5665","webpack:///../~/ui-router-core/state/stateBuilder.js?1049","webpack:///../~/ui-router-core/state/stateQueueManager.js?2030","webpack:///../~/ui-router-core/state/stateObject.js?f0a5","webpack:///../~/ui-router-core/state/stateService.js?c4ec","webpack:///../~/ui-router-core/globals.js?50a4","webpack:///../~/ui-router-core/params/stateParams.js?e4f9","webpack:///../~/ui-router-core/params/module.js?9805","webpack:///../~/ui-router-core/path/module.js?5d42","webpack:///../~/ui-router-core/resolve/module.js?f879","webpack:///../~/ui-router-core/state/module.js?5b1f","webpack:///../~/ui-router-core/transition/module.js?5c6c","webpack:///../~/ui-router-core/url/module.js?f374","webpack:///../~/ui-router-core/view/module.js?9c96","webpack:///./_src/justjs.ts?656d","webpack:///./_src/ui-router-react.tsx?4b50","webpack:///./_src/components/UIView.tsx?5f93","webpack:///external {\"root\":\"React\",\"amd\":\"react\",\"commonjs2\":\"react\",\"commonjs\":\"react\"}?719a","webpack:///./_src/components/UISref.tsx?72e6","webpack:///../~/classnames/index.js?df19","webpack:///./_src/components/UISrefActive.tsx?61bc"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_58__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__extends","d","b","__","constructor","hasOwnProperty","prototype","Object","create","ui_router_core_1","trace","justjs_1","ui_router_react_1","UIView_1","UIView","UISref_1","UISref","UISrefActive_1","UISrefActive","viewConfigFactory","node","config","ReactViewConfig","UIRouterReact","_super","viewService","stateRegistry","decorator","reactViewsBuilder","instance","start","stateQueue","autoFlush","stateService","urlRouter","listen","sync","html5Mode","mode","loc","services","location","locCfg","locationConfig","assign","pushStateLocation","UIRouter","defineProperty","value","__export","router_1","bindFunctions","from","to","bindTo","fnNames","keys","filter","name","forEach","bind","defaults","opts","defaultsList","_i","arguments","length","merge","apply","concat","extend","pick","dst","objs","obj","key","ancestors","first","second","path","n","push","equalForKeys","a","i","k","pickOmitImpl","predicate","objCopy","inArray","restArgs","omit","notInArray","array","item","pluck","collection","propName","map","hof_1","prop","callback","arr","predicates_1","isArray","result","accept","x","find","pushR","assertPredicate","errMsg","Error","isFunction","arrayTuples","arrayArgs","reduce","min","Math","Array","ignored","idx","applyPairs","memo","keyValTuple","isString","tail","undefined","_copy","src","dest","_forEach","cb","_this","_copyProps","_extend","toObj","identity","_equals","o1","o2","t1","t2","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","predicates","any","fn","a1","a2","t","coreservices_1","w","window","angular","fromJson","JSON","parse","toJson","stringify","copy","equals","noop","inherit","parent","extra","args","slice","indexOf","removeFrom","curry","splice","mergeR","mapObj","values","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","acc","token","unnest","flatten","pairs","silenceUncaughtInPromise","promise","e","silentRejection","error","$q","reject","isInjectable","val","head","not","toStr","tis","isUndefined","isDefined","isNull","o","isNumber","isObject","isPromise","and","pipe","curried","func_args_length","initial_args","compose","funcs","reverse","fn1","fn2","or","invoke","fnName","pattern","struct","propEq","split","is","ctor","eq","other","v","notImplemented","fnname","$injector","template","Glob","text","glob","regexpString","seg","join","regexp","RegExp","matches","test","fromString","Queue","_items","_limit","enqueue","items","shift","dequeue","size","clear","current","remove","peekTail","peekHead","maxLength","max","str","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fnStr","fnToString","namedFunctionMatch","match","_fn","format","seen","stringifyPattern","rejectFactory_1","common_1","transition_1","resolvable_1","stringifyPatternFn","isTransitionRejectionPromise","Rejection","_transitionRejection","Transition","Resolvable","beforeAfterSubstr","char","strings_1","RejectType","type","message","detail","detailString","toPromise","then","superseded","options","rejection","SUPERSEDED","redirected","invalid","INVALID","IGNORED","aborted","ABORTED","errored","ERROR","trace_1","transitionHook_1","hookRegistry_1","hookBuilder_1","node_1","pathFactory_1","targetState_1","param_1","resolveContext_1","transitionCount","stateSelf","fromPath","targetState","router","_deferred","defer","treeChanges","_treeChanges","isActive","_options","_targetState","valid","HookRegistry","mixin","$id","toPath","PathFactory","buildToPath","reloadState","enteringStates","entering","state","applyViewConfigs","transitionService","$view","rootResolvables","params","rootNode","context","ResolveContext","addResolvables","onBefore","matchCriteria","onStart","onExit","onRetain","onEnter","onFinish","onSuccess","onError","$from","$to","self","compare","matchState","pathname","injector","subPath","getResolveTokens","getTokens","getResolveValue","resolveContext","getData","resolvable","getResolvable","data","addResolvable","stateName","topath","targetNode","redirectedFrom","exiting","retained","views","redirect","newOptions","source","TargetState","identifier","$state","newTransition","originalEnteringNodes","redirectEnteringNodes","nodeIsReloading","includes","matchingEnteringNodes","PathNode","matching","resolvables","_changedParams","_a","reload","nodeSchemas","paramSchema","_b","paramValues","toValues","fromValues","tuples","schema","toVals","fromVals","Param","changed","dynamic","changes","hookBuilder","HookBuilder","transition","run","runSynchronousHooks","TransitionHook","globals","transitionHistory","syncResult","getOnBeforeHooks","rejectReason","traceTransitionIgnored","transitionSuccess","traceSuccess","success","resolve","getOnSuccessHooks","transitionError","reason","traceError","_error","getOnErrorHooks","traceTransitionStart","appendHookToChain","prev","nextHook","invokeHook","asyncHooks","redirects","trans","validates","parameters","fromStateOrName","toStateOrName","avoidEmptyHash","fromParams","toValid","toParams","diToken","uiViewString","viewData","creationContext","fqn","normalizedCat","input","Category","viewConfigString","viewConfig","viewDecl","$context","$uiViewName","$uiViewContextAnchor","Trace","_enabled","approximateDigests","_set","enabled","categories","parseInt","isNaN","category","enable","disable","TRANSITION","tid","digest","transitionStr","console","log","traceHookInvocation","step","HOOK","event","hookFn","traceHookResult","hookResult","transitionResult","transitionOptions","hookResultStr","transitionResultStr","traceResolvePath","when","RESOLVE","pathStr","traceResolvableResolved","resolvableStr","finalState","traceUIViewEvent","UIVIEW","traceUIViewConfigUpdated","traceUIViewFill","html","traceViewServiceEvent","VIEWCONFIG","traceViewServiceUIViewEvent","defaultOptions","async","rejectIfSuperseded","traceData","stateContext","eventHook","isSuperseded","_deregistered","handleHookResult","mapHookResult","target","hooks","swallowExceptions","results","hook","exception","errorHandler","defaultErrorHandler","rejections","chain","_identifier","_definition","_params","exists","base","relative","criterion","matchGlobs","_state","globStrings","toMatch","glob_1","matchFn","makeHookRegistrationFn","matchObject","EventHook","priority","_matchingNodes","nodes","mc","allMatched","_transitionEvents","getHooks","tupleSort","reverseDepthSort","l","r","factor","depthDelta","$transitions","baseHookOptions","_buildNodeHooks","getOnStartHooks","getOnExitHooks","stateHook","getOnRetainHooks","getOnEnterHooks","getOnFinishHooks","toState","fromState","onStartHooks","onExitHooks","onRetainHooks","onEnterHooks","onFinishHooks","hookType","matchingNodesProp","sortHooksFn","matchingHooks","_matchingHooks","makeTransitionHooks","matchingNodes","resolvePath","transitionHook","sort","tuple","hookName","reg","interface_1","resolvePolicies","ALL_WHENS","EAGER","LAZY","EAGER_WHENS","_path","subContext","newResolvables","whenOption","matchedWhens","promises","matchesRequestedPolicy","getPolicy","nodeResolvables","getResult","get","UIInjectorImpl","findNode","getDependencies","availableResolvables","res","getDependency","fromInjector","deps","resolved","getAsync","WAIT","NOWAIT","RXWAIT","defaultResolvePolicy","arg1","resolveFn","policy","literal","thisPolicy","statePolicy","resolvePolicy","getResolvableDependencies","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","take","maybeWaitForRx","applyResolvedValue","resolvedValue","clone","fromData","makeTargetState","buildPath","applyRawParams","inheritParams","states","viewDecls","viewConfigs","view","createViewConfig","toKeys","nodeParamVals","makeInheritedParamsNode","toNode","toParamVals","incomingParamVals","fromParamVals","ownParamVals","applyToParams","retainedNode","cloned","keep","staticParams","nodesMatch","node1","node2","retainedWithToParams","elementIdx","stateOrPath","getParamVal","paramDef","pDef","parameter","paramValsEq","pathA","pathB","unwrapShorthand","cfg","isShorthand","$$fn","getType","urlType","paramTypes","type_1","ParamType","DefType","CONFIG","getSquashPolicy","isOptional","squash","urlMatcherConfig_1","matcherConfig","defaultSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","hasOwn","getArrayMode","arrayDefaults","SEARCH","arrayParamNomenclature","$asArray","isDefaultValue","$$getDefaultValue","defaultValue","$replace","replacement","$normalize","isSearch","normalized","encoded","encode","exec","fromConfig","PATH","fromSearch","param","values1","values2","MatcherConfig","_isCaseInsensitive","_isStrictMode","_defaultSquashPolicy","caseInsensitive","strictMode","ArrayType","arrayWrap","arrayUnwrap","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","left","right","paramTypeFn","wrapperFn","$arrayMode","def","decode","$subPattern","sub","urlMatcherFactory_1","urlRouter_1","state_1","urlRouter_2","transitionService_1","view_1","stateRegistry_1","stateService_1","globals_1","ViewService","TransitionService","Globals","urlMatcherFactory","UrlMatcherFactory","urlRouterProvider","UrlRouterProvider","UrlRouter","StateRegistry","stateProvider","StateProvider","StateService","rootContext","$current","getDefaultConfig","strict","urlMatcher_1","paramTypes_1","ParamTypes","UrlMatcher","compile","isMatcher","object","definition","definitionFn","$get","_flushTypeQueue","quoteRegExp","string","surroundPattern","predicates_2","param_2","common_2","common_3","memoizeTo","_cache","_children","_segments","_compiled","paramMap","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","nameValidator","matchDetails","substring","index","lastIndex","search","prefix","freeze","append","url","isRoot","hash","decodePathArray","reverseString","unquoteDashes","allReversed","allParams","pathParams","searchParams","nPathSegments","urlm","j","validParamVal","getDetails","urlMatchers","pathSegmentsAndParams","queryParams","pathString","encodeDashes","raw","encodeURIComponent","queryString","charCodeAt","toUpperCase","matcher","staticSegments","valToString","valFromString","typeQueue","defaultTypes","String","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","makeType","types","regExpPrefix","re","interpolate","what","Number","handleIfMatch","$stateParams","handler","$match","appendBasePath","isHtml5","absolute","baseHref","update","rules","otherwiseFn","evt","check","rule","handled","$location","setUrl","defaultPrevented","$urlMatcherFactory","interceptDeferred","removeRule","otherwise","ruleCallback","handlerIsString","strategies","_what","_handler","regex","global","sticky","deferIntercept","listener","onChange","read","urlMatcher","href","hashPrefix","slash","port","protocol","host","invalidCallbacks","func","register","onInvalid","resolve_1","views_1","url_1","redirectTo_1","onEnterExitRetain_1","lazyLoadStates_1","defaultTransOpts","notify","custom","_router","_deregisterHookFns","registerTransitionHooks","fns","redirectTo","registerRedirectToHook","registerOnExitHook","registerOnRetainHook","registerOnEnterHook","eagerResolve","registerEagerResolvePath","lazyResolve","registerLazyResolveState","loadViews","registerLoadEnteringViews","activateViews","registerActivateViews","updateUrl","registerUpdateUrl","lazyLoad","registerLazyLoadHook","eagerResolvePath","lazyResolveState","loadEnteringViews","enteringViews","load","exitingViews","vc","deactivateViewConfig","activateViewConfig","$urlRouter","navigable","urlOptions","redirectToHook","handleResult","makeEnterExitRetainHook","onExitHook","onRetainHook","onEnterHook","lazyLoadHook","retryOriginalTransition","path_1","search_1","hash_1","registry","s","$$state","orig","updateStateRegistry","deregister","cleanup","uiViews","_viewConfigFactories","uiViewDepth","uiView","viewConfigDepth","count","uiViewsByFqn","uiv","$type","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","configureUIView","configUpdated","_rootContext","viewType","decl","cfgFactory","cfgs","registerUIView","fqnMatches","available","active","normalizeUIViewTarget","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","charAt","relativeMatch","anchor","stateMatcher_1","stateBuilder_1","stateQueueManager_1","listeners","StateMatcher","builder","StateBuilder","StateQueueManager","rootStateDef","#","abstract","_root","onStatesChanged","stateDefinition","_deregisterTree","getChildren","children","deregistered","_urlRule","stateOrName","deregisteredStates","found","_states","isRelative","isStr","baseState","splitName","pathLength","relName","nameBuilder","selfBuilder","dataBuilder","pathBuilder","includesBuilder","resolvablesBuilder","objects2Tuples","resolveObj","annotate","strictDi","isResolveLiteral","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","literal2Resolvable","dependencies","tuple2Resolvable","item2Resolvable","parseUrl","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","paramConfig","reloadOnSearch","getNavigableBuilder","getParamsBuilder","makeConfigParam","urlParams","nonUrlParams","parentBuilder","parentName","builders","build","parentFn","lastIndexOf","stateObject_1","$urlRouterProvider","queue","State","flush","registered","orphans","previousQueueLength","orphanIdx","attachRoute","transitionTo","ref","inherited","queue_1","_defaultErrorHandler","$error$","stack","getters","boundFns","enumerable","configurable","_handleInvalidTargetState","$to$","invokeNextCallback","nextCallback","callbackQueue","invokeCallback","checkForRedirect","latestThing","latest","$from$","go","defautGoOpts","transOpts","transHistory","latestSuccess","successfulTransitions","rootPath","currentPath","rejectedTransitionHandler","transitionToPromise","include","defaultHrefOpts","lossy","$inherit","nav","stateParams_1","StateParams","beforeNewTransition","$transition$","updateGlobalState","clearCurrentTransition","newParams","parentParams","parents","inheritList","ui_router_core_2","ui_router_core_3","Promise","deferred","wait4","STRIP_COMMENTS","ARGUMENT_NAMES","has","locals","ensureExist","$inject","newBaseHref","newprefix","splitHash","splitQuery","splitEqual","trimHashVal","keyValsToObjectR","accum","getParams","hashLocation","addEventListener","history","replaceState","pushState","viewsDefinitionObject","component","$default","$name","react_1","index_1","props","render","uiViewAddress","componentInstance","registerUiCanExitHook","child","isValidElement","cloneElement","createElement","getChildContext","parentUIViewAddress","componentWillMount","uiViewData","viewConfigUpdated","setState","componentWillUnmount","newConfig","newComponent","resolves","ctx","stringTokens","styleProps","className","style","removeHook","criteria","uiCanExit","transitions","propTypes","PropTypes","childContextTypes","contextTypes","Component","classNames","getOptions","parentContext","defOpts","handleClick","button","metaKey","ctrlKey","preventDefault","addStateInfo","childrenProps","onClick","element","isRequired","parentUiSrefActiveAddStateInfo","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","classes","arg","argType","activeClasses","stateParams","activeClass","addState","forceUpdate","stateHash","createStateHash","stateInfo","getActiveClasses","exact","class"],"mappings":"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","file":"ui-router-react.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"UIRouterReact\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"UIRouterReact\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"UIRouterReact\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_58__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"UIRouterReact\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"UIRouterReact\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"UIRouterReact\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_58__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar ui_router_core_1 = __webpack_require__(2);\n\texports.trace = ui_router_core_1.trace;\n\t__webpack_require__(55);\n\tvar justjs_1 = __webpack_require__(55);\n\tvar ui_router_react_1 = __webpack_require__(56);\n\tvar UIView_1 = __webpack_require__(57);\n\texports.UIView = UIView_1.UIView;\n\tvar UISref_1 = __webpack_require__(59);\n\texports.UISref = UISref_1.UISref;\n\tvar UISrefActive_1 = __webpack_require__(61);\n\texports.UISrefActive = UISrefActive_1.UISrefActive;\n\t// Set up view config factory\n\tvar viewConfigFactory = function (node, config) {\n\t    return new ui_router_react_1.ReactViewConfig(node, config);\n\t};\n\tvar UIRouterReact = (function (_super) {\n\t    __extends(UIRouterReact, _super);\n\t    function UIRouterReact() {\n\t        _super.call(this);\n\t        this.viewService.viewConfigFactory('react', viewConfigFactory);\n\t        this.stateRegistry.decorator(\"views\", ui_router_react_1.reactViewsBuilder);\n\t        UIRouterReact.instance = this;\n\t    }\n\t    UIRouterReact.prototype.start = function () {\n\t        this.stateRegistry.stateQueue.autoFlush(this.stateService);\n\t        this.urlRouter.listen();\n\t        this.urlRouter.sync();\n\t    };\n\t    UIRouterReact.prototype.html5Mode = function (mode) {\n\t        if (mode === true) {\n\t            var loc = ui_router_core_1.services.location;\n\t            var locCfg = ui_router_core_1.services.locationConfig;\n\t            locCfg.html5Mode = function () { return true; };\n\t            Object.assign(loc, justjs_1.pushStateLocation);\n\t        }\n\t    };\n\t    return UIRouterReact;\n\t}(ui_router_core_1.UIRouter));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = UIRouterReact;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common */ /** */\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t__export(__webpack_require__(3));\n\t__export(__webpack_require__(48));\n\t__export(__webpack_require__(49));\n\t__export(__webpack_require__(50));\n\t__export(__webpack_require__(51));\n\t__export(__webpack_require__(52));\n\t__export(__webpack_require__(53));\n\t__export(__webpack_require__(54));\n\t__export(__webpack_require__(46));\n\tvar router_1 = __webpack_require__(26);\n\texports.UIRouter = router_1.UIRouter;\n\t//# sourceMappingURL=core.js.map\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module common */ /** for typedoc */\n\t__export(__webpack_require__(4));\n\t__export(__webpack_require__(7));\n\t__export(__webpack_require__(8));\n\t__export(__webpack_require__(6));\n\t__export(__webpack_require__(5));\n\t__export(__webpack_require__(9));\n\t__export(__webpack_require__(10));\n\t__export(__webpack_require__(13));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Random utility functions used in the UI-Router code\n\t *\n\t * @preferred @module common\n\t */ /** for typedoc */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(5);\n\tvar hof_1 = __webpack_require__(6);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar w = typeof window === 'undefined' ? {} : window;\n\tvar angular = w.angular || {};\n\texports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\n\texports.toJson = angular.toJson || JSON.stringify.bind(JSON);\n\texports.copy = angular.copy || _copy;\n\texports.forEach = angular.forEach || _forEach;\n\texports.extend = angular.extend || _extend;\n\texports.equals = angular.equals || _equals;\n\texports.identity = function (x) { return x; };\n\texports.noop = function () { return undefined; };\n\t/**\n\t * Binds and copies functions onto an object\n\t *\n\t * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n\t * on the 'to' object.\n\t *\n\t * This example creates an new class instance whose functions are prebound to the new'd object.\n\t * @example\n\t * ```\n\t *\n\t * class Foo {\n\t *   constructor(data) {\n\t *     // Binds all functions from Foo.prototype to 'this',\n\t *     // then copies them to 'this'\n\t *     bindFunctions(Foo.prototype, this, this);\n\t *     this.data = data;\n\t *   }\n\t *\n\t *   log() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * let myFoo = new Foo([1,2,3]);\n\t * var logit = myFoo.log;\n\t * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n\t * ```\n\t *\n\t * This example creates a bound version of a service function, and copies it to another object\n\t * @example\n\t * ```\n\t *\n\t * var SomeService = {\n\t *   this.data = [3, 4, 5];\n\t *   this.log = function() {\n\t *     console.log(this.data);\n\t *   }\n\t * }\n\t *\n\t * // Constructor fn\n\t * function OtherThing() {\n\t *   // Binds all functions from SomeService to SomeService,\n\t *   // then copies them to 'this'\n\t *   bindFunctions(SomeService, this, SomeService);\n\t * }\n\t *\n\t * let myOtherThing = new OtherThing();\n\t * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n\t * ```\n\t *\n\t * @param from The object which contains the functions to be bound\n\t * @param to The object which will receive the bound functions\n\t * @param bindTo The object which the functions will be bound to\n\t * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n\t */\n\tfunction bindFunctions(from, to, bindTo, fnNames) {\n\t    if (fnNames === void 0) { fnNames = Object.keys(from); }\n\t    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\n\t        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\n\t}\n\texports.bindFunctions = bindFunctions;\n\t/**\n\t * prototypal inheritance helper.\n\t * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n\t */\n\texports.inherit = function (parent, extra) {\n\t    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\n\t};\n\t/**\n\t * Given an arguments object, converts the arguments at index idx and above to an array.\n\t * This is similar to es6 rest parameters.\n\t *\n\t * Optionally, the argument at index idx may itself already be an array.\n\t *\n\t * For example,\n\t * given either:\n\t *        arguments = [ obj, \"foo\", \"bar\" ]\n\t * or:\n\t *        arguments = [ obj, [\"foo\", \"bar\"] ]\n\t * then:\n\t *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n\t *\n\t * This allows functions like pick() to be implemented such that it allows either a bunch\n\t * of string arguments (like es6 rest parameters), or a single array of strings:\n\t *\n\t * given:\n\t *        var obj = { foo: 1, bar: 2, baz: 3 };\n\t * then:\n\t *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n\t *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n\t */\n\tvar restArgs = function (args, idx) {\n\t    if (idx === void 0) { idx = 0; }\n\t    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\t};\n\t/** Given an array, returns true if the object is found in the array, (using indexOf) */\n\texports.inArray = function (array, obj) {\n\t    return array.indexOf(obj) !== -1;\n\t};\n\t/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\n\texports.removeFrom = hof_1.curry(function (array, obj) {\n\t    var idx = array.indexOf(obj);\n\t    if (idx >= 0)\n\t        array.splice(idx, 1);\n\t    return array;\n\t});\n\t/**\n\t * Applies a set of defaults to an options object.  The options object is filtered\n\t * to only those properties of the objects in the defaultsList.\n\t * Earlier objects in the defaultsList take precedence when applying defaults.\n\t */\n\tfunction defaults(opts) {\n\t    if (opts === void 0) { opts = {}; }\n\t    var defaultsList = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        defaultsList[_i - 1] = arguments[_i];\n\t    }\n\t    var defaults = merge.apply(null, [{}].concat(defaultsList));\n\t    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n\t}\n\texports.defaults = defaults;\n\t/**\n\t * Merges properties from the list of objects to the destination object.\n\t * If a property already exists in the destination object, then it is not overwritten.\n\t */\n\tfunction merge(dst) {\n\t    var objs = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        objs[_i - 1] = arguments[_i];\n\t    }\n\t    exports.forEach(objs, function (obj) {\n\t        exports.forEach(obj, function (value, key) {\n\t            if (!dst.hasOwnProperty(key))\n\t                dst[key] = value;\n\t        });\n\t    });\n\t    return dst;\n\t}\n\texports.merge = merge;\n\t/** Reduce function that merges each element of the list into a single object, using extend */\n\texports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n\t/**\n\t * Finds the common ancestor path between two states.\n\t *\n\t * @param {Object} first The first state.\n\t * @param {Object} second The second state.\n\t * @return {Array} Returns an array of state names in descending order, not including the root.\n\t */\n\tfunction ancestors(first, second) {\n\t    var path = [];\n\t    for (var n in first.path) {\n\t        if (first.path[n] !== second.path[n])\n\t            break;\n\t        path.push(first.path[n]);\n\t    }\n\t    return path;\n\t}\n\texports.ancestors = ancestors;\n\t/**\n\t * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n\t *\n\t * @param {Object} a The first object.\n\t * @param {Object} b The second object.\n\t * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n\t *                     it defaults to the list of keys in `a`.\n\t * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n\t */\n\tfunction equalForKeys(a, b, keys) {\n\t    if (keys === void 0) { keys = Object.keys(a); }\n\t    for (var i = 0; i < keys.length; i++) {\n\t        var k = keys[i];\n\t        if (a[k] != b[k])\n\t            return false; // Not '===', values aren't necessarily normalized\n\t    }\n\t    return true;\n\t}\n\texports.equalForKeys = equalForKeys;\n\tfunction pickOmitImpl(predicate, obj) {\n\t    var keys = [];\n\t    for (var _i = 2; _i < arguments.length; _i++) {\n\t        keys[_i - 2] = arguments[_i];\n\t    }\n\t    var objCopy = {};\n\t    for (var key in obj) {\n\t        if (predicate(keys, key))\n\t            objCopy[key] = obj[key];\n\t    }\n\t    return objCopy;\n\t}\n\t/** Return a copy of the object only containing the whitelisted properties. */\n\tfunction pick(obj) {\n\t    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));\n\t}\n\texports.pick = pick;\n\t/** Return a copy of the object omitting the blacklisted properties. */\n\tfunction omit(obj) {\n\t    var notInArray = function (array, item) { return !exports.inArray(array, item); };\n\t    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\n\t}\n\texports.omit = omit;\n\t/**\n\t * Maps an array, or object to a property (by name)\n\t */\n\tfunction pluck(collection, propName) {\n\t    return map(collection, hof_1.prop(propName));\n\t}\n\texports.pluck = pluck;\n\t/** Filters an Array or an Object's properties based on a predicate */\n\tfunction filter(collection, callback) {\n\t    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n\t    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n\t    exports.forEach(collection, function (item, i) {\n\t        if (callback(item, i))\n\t            accept(item, i);\n\t    });\n\t    return result;\n\t}\n\texports.filter = filter;\n\t/** Finds an object from an array, or a property of an object, that matches a predicate */\n\tfunction find(collection, callback) {\n\t    var result;\n\t    exports.forEach(collection, function (item, i) {\n\t        if (result)\n\t            return;\n\t        if (callback(item, i))\n\t            result = item;\n\t    });\n\t    return result;\n\t}\n\texports.find = find;\n\t/** Given an object, returns a new object, where each property is transformed by the callback function */\n\texports.mapObj = map;\n\t/** Maps an array or object properties using a callback function */\n\tfunction map(collection, callback) {\n\t    var result = predicates_1.isArray(collection) ? [] : {};\n\t    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n\t    return result;\n\t}\n\texports.map = map;\n\t/**\n\t * Given an object, return its enumerable property values\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = { a: 1, b: 2, c: 3 }\n\t * let vals = values(foo); // [ 1, 2, 3 ]\n\t * ```\n\t */\n\texports.values = function (obj) {\n\t    return Object.keys(obj).map(function (key) { return obj[key]; });\n\t};\n\t/**\n\t * Reduce function that returns true if all of the values are truthy.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let vals = [ 1, true, {}, \"hello world\"];\n\t * vals.reduce(allTrueR, true); // true\n\t *\n\t * vals.push(0);\n\t * vals.reduce(allTrueR, true); // false\n\t * ```\n\t */\n\texports.allTrueR = function (memo, elem) { return memo && elem; };\n\t/**\n\t * Reduce function that returns true if any of the values are truthy.\n\t *\n\t *  * @example\n\t * ```\n\t *\n\t * let vals = [ 0, null, undefined ];\n\t * vals.reduce(anyTrueR, true); // false\n\t *\n\t * vals.push(\"hello world\");\n\t * vals.reduce(anyTrueR, true); // true\n\t * ```\n\t */\n\texports.anyTrueR = function (memo, elem) { return memo || elem; };\n\t/**\n\t * Reduce function which un-nests a single level of arrays\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnestR = function (memo, elem) { return memo.concat(elem); };\n\t/**\n\t * Reduce function which recursively un-nests all arrays\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flattenR = function (memo, elem) {\n\t    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\n\t};\n\t/**\n\t * Reduce function that pushes an object to an array, then returns the array.\n\t * Mostly just for [[flattenR]] and [[uniqR]]\n\t */\n\tfunction pushR(arr, obj) {\n\t    arr.push(obj);\n\t    return arr;\n\t}\n\texports.pushR = pushR;\n\t/** Reduce function that filters out duplicates */\n\texports.uniqR = function (acc, token) {\n\t    return exports.inArray(acc, token) ? acc : pushR(acc, token);\n\t};\n\t/**\n\t * Return a new array with a single level of arrays unnested.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n\t * ```\n\t */\n\texports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n\t/**\n\t * Return a completely flattened version of an array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n\t * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n\t * ```\n\t */\n\texports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n\t/**\n\t * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n\t * @example\n\t * ```\n\t *\n\t * let isNumber = (obj) => typeof(obj) === 'number';\n\t * let allNumbers = [ 1, 2, 3, 4, 5 ];\n\t * allNumbers.filter(assertPredicate(isNumber)); //OK\n\t *\n\t * let oneString = [ 1, 2, 3, 4, \"5\" ];\n\t * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n\t * ```\n\t */\n\tfunction assertPredicate(predicate, errMsg) {\n\t    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n\t    return function (obj) {\n\t        if (!predicate(obj)) {\n\t            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n\t        }\n\t        return true;\n\t    };\n\t}\n\texports.assertPredicate = assertPredicate;\n\t/**\n\t * Like _.pairs: Given an object, returns an array of key/value pairs\n\t *\n\t * @example\n\t * ```\n\t *\n\t * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n\t * ```\n\t */\n\texports.pairs = function (obj) {\n\t    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });\n\t};\n\t/**\n\t * Given two or more parallel arrays, returns an array of tuples where\n\t * each tuple is composed of [ a[i], b[i], ... z[i] ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * let foo = [ 0, 2, 4, 6 ];\n\t * let bar = [ 1, 3, 5, 7 ];\n\t * let baz = [ 10, 30, 50, 70 ];\n\t * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n\t * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n\t * ```\n\t */\n\tfunction arrayTuples() {\n\t    var arrayArgs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        arrayArgs[_i - 0] = arguments[_i];\n\t    }\n\t    if (arrayArgs.length === 0)\n\t        return [];\n\t    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\t    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\n\t}\n\texports.arrayTuples = arrayTuples;\n\t/**\n\t * Reduce function which builds an object from an array of [key, value] pairs.\n\t *\n\t * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n\t *\n\t * Each keyValueTuple should be an array with values [ key: string, value: any ]\n\t *\n\t * @example\n\t * ```\n\t *\n\t * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n\t *\n\t * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t *\n\t * // Or, more simply:\n\t * var pairsToObj = pairs.reduce(applyPairs, {})\n\t * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n\t * ```\n\t */\n\tfunction applyPairs(memo, keyValTuple) {\n\t    var key, value;\n\t    if (predicates_1.isArray(keyValTuple))\n\t        key = keyValTuple[0], value = keyValTuple[1];\n\t    if (!predicates_1.isString(key))\n\t        throw new Error(\"invalid parameters to applyPairs\");\n\t    memo[key] = value;\n\t    return memo;\n\t}\n\texports.applyPairs = applyPairs;\n\t/** Get the last element of an array */\n\tfunction tail(arr) {\n\t    return arr.length && arr[arr.length - 1] || undefined;\n\t}\n\texports.tail = tail;\n\t/**\n\t * shallow copy from src to dest\n\t *\n\t * note: This is a shallow copy, while angular.copy is a deep copy.\n\t * ui-router uses `copy` only to make copies of state parameters.\n\t */\n\tfunction _copy(src, dest) {\n\t    if (dest)\n\t        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n\t    if (!dest)\n\t        dest = {};\n\t    return exports.extend(dest, src);\n\t}\n\t/** Naive forEach implementation works with Objects or Arrays */\n\tfunction _forEach(obj, cb, _this) {\n\t    if (predicates_1.isArray(obj))\n\t        return obj.forEach(cb, _this);\n\t    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n\t}\n\tfunction _copyProps(to, from) {\n\t    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });\n\t    return to;\n\t}\n\tfunction _extend(toObj) {\n\t    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\n\t}\n\tfunction _equals(o1, o2) {\n\t    if (o1 === o2)\n\t        return true;\n\t    if (o1 === null || o2 === null)\n\t        return false;\n\t    if (o1 !== o1 && o2 !== o2)\n\t        return true; // NaN === NaN\n\t    var t1 = typeof o1, t2 = typeof o2;\n\t    if (t1 !== t2 || t1 !== 'object')\n\t        return false;\n\t    var tup = [o1, o2];\n\t    if (hof_1.all(predicates_1.isArray)(tup))\n\t        return _arraysEq(o1, o2);\n\t    if (hof_1.all(predicates_1.isDate)(tup))\n\t        return o1.getTime() === o2.getTime();\n\t    if (hof_1.all(predicates_1.isRegExp)(tup))\n\t        return o1.toString() === o2.toString();\n\t    if (hof_1.all(predicates_1.isFunction)(tup))\n\t        return true; // meh\n\t    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n\t    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n\t        return false;\n\t    var key, keys = {};\n\t    for (key in o1) {\n\t        if (!_equals(o1[key], o2[key]))\n\t            return false;\n\t        keys[key] = true;\n\t    }\n\t    for (key in o2) {\n\t        if (!keys[key])\n\t            return false;\n\t    }\n\t    return true;\n\t}\n\tfunction _arraysEq(a1, a2) {\n\t    if (a1.length !== a2.length)\n\t        return false;\n\t    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n\t}\n\t// issue #2676\n\texports.silenceUncaughtInPromise = function (promise) {\n\t    return promise.catch(function (e) { return 0; }) && promise;\n\t};\n\texports.silentRejection = function (error) {\n\t    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n\t};\n\t//# sourceMappingURL=common.js.map\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** Predicates @module common_predicates */ /** */\n\tvar hof_1 = __webpack_require__(6);\n\tvar toStr = Object.prototype.toString;\n\tvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\n\texports.isUndefined = tis('undefined');\n\texports.isDefined = hof_1.not(exports.isUndefined);\n\texports.isNull = function (o) { return o === null; };\n\texports.isFunction = tis('function');\n\texports.isNumber = tis('number');\n\texports.isString = tis('string');\n\texports.isObject = function (x) { return x !== null && typeof x === 'object'; };\n\texports.isArray = Array.isArray;\n\texports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\n\texports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\n\t/**\n\t * Predicate which checks if a value is injectable\n\t *\n\t * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n\t * where all the elements in the array are Strings, except the last one, which is a Function\n\t */\n\tfunction isInjectable(val) {\n\t    if (exports.isArray(val) && val.length) {\n\t        var head = val.slice(0, -1), tail = val.slice(-1);\n\t        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n\t    }\n\t    return exports.isFunction(val);\n\t}\n\texports.isInjectable = isInjectable;\n\t/**\n\t * Predicate which checks if a value looks like a Promise\n\t *\n\t * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n\t */\n\texports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n\t//# sourceMappingURL=predicates.js.map\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Higher order functions\n\t *\n\t * @module common_hof\n\t */ /** */\n\t\"use strict\";\n\t/**\n\t * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n\t *\n\t * Given a function with N parameters, returns a new function that supports partial application.\n\t * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n\t * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n\t * accept more parameters until all N parameters have been supplied.\n\t *\n\t *\n\t * This contrived example uses a partially applied function as an predicate, which returns true\n\t * if an object is found in both arrays.\n\t * @example\n\t * ```\n\t * // returns true if an object is in both of the two arrays\n\t * function inBoth(array1, array2, object) {\n\t *   return array1.indexOf(object) !== -1 &&\n\t *          array2.indexOf(object) !== 1;\n\t * }\n\t * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n\t * let foos = [obj1, obj3]\n\t * let bars = [obj3, obj4, obj5]\n\t *\n\t * // A curried \"copy\" of inBoth\n\t * let curriedInBoth = curry(inBoth);\n\t * // Partially apply both the array1 and array2\n\t * let inFoosAndBars = curriedInBoth(foos, bars);\n\t *\n\t * // Supply the final argument; since all arguments are\n\t * // supplied, the original inBoth function is then called.\n\t * let obj1InBoth = inFoosAndBars(obj1); // false\n\t *\n\t * // Use the inFoosAndBars as a predicate.\n\t * // Filter, on each iteration, supplies the final argument\n\t * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n\t * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n\t *\n\t * ```\n\t *\n\t * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n\t *\n\t * @param fn\n\t * @returns {*|function(): (*|any)}\n\t */\n\tfunction curry(fn) {\n\t    var initial_args = [].slice.apply(arguments, [1]);\n\t    var func_args_length = fn.length;\n\t    function curried(args) {\n\t        if (args.length >= func_args_length)\n\t            return fn.apply(null, args);\n\t        return function () {\n\t            return curried(args.concat([].slice.apply(arguments)));\n\t        };\n\t    }\n\t    return curried(initial_args);\n\t}\n\texports.curry = curry;\n\t/**\n\t * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n\t * given: f(x), g(x), h(x)\n\t * let composed = compose(f,g,h)\n\t * then, composed is: f(g(h(x)))\n\t */\n\tfunction compose() {\n\t    var args = arguments;\n\t    var start = args.length - 1;\n\t    return function () {\n\t        var i = start, result = args[start].apply(this, arguments);\n\t        while (i--)\n\t            result = args[i].call(this, result);\n\t        return result;\n\t    };\n\t}\n\texports.compose = compose;\n\t/**\n\t * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n\t * given: f(x), g(x), h(x)\n\t * let piped = pipe(f,g,h);\n\t * then, piped is: h(g(f(x)))\n\t */\n\tfunction pipe() {\n\t    var funcs = [];\n\t    for (var _i = 0; _i < arguments.length; _i++) {\n\t        funcs[_i - 0] = arguments[_i];\n\t    }\n\t    return compose.apply(null, [].slice.call(arguments).reverse());\n\t}\n\texports.pipe = pipe;\n\t/**\n\t * Given a property name, returns a function that returns that property from an object\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = prop(\"name\");\n\t * getName(obj) === \"blarg\"\n\t */\n\texports.prop = function (name) {\n\t    return function (obj) { return obj && obj[name]; };\n\t};\n\t/**\n\t * Given a property name and a value, returns a function that returns a boolean based on whether\n\t * the passed object has a property that matches the value\n\t * let obj = { foo: 1, name: \"blarg\" };\n\t * let getName = propEq(\"name\", \"blarg\");\n\t * getName(obj) === true\n\t */\n\texports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n\t/**\n\t * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n\t * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n\t * let getName = prop(\"nestedObj.name\");\n\t * getName(obj) === \"blarg\"\n\t * let propNotFound = prop(\"this.property.doesnt.exist\");\n\t * propNotFound(obj) === undefined\n\t */\n\texports.parse = function (name) {\n\t    return pipe.apply(null, name.split(\".\").map(exports.prop));\n\t};\n\t/**\n\t * Given a function that returns a truthy or falsey value, returns a\n\t * function that returns the opposite (falsey or truthy) value given the same inputs\n\t */\n\texports.not = function (fn) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return !fn.apply(null, args);\n\t    };\n\t};\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if both functions return truthy for the given arguments\n\t */\n\tfunction and(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) && fn2.apply(null, args);\n\t    };\n\t}\n\texports.and = and;\n\t/**\n\t * Given two functions that return truthy or falsey values, returns a function that returns truthy\n\t * if at least one of the functions returns truthy for the given arguments\n\t */\n\tfunction or(fn1, fn2) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        return fn1.apply(null, args) || fn2.apply(null, args);\n\t    };\n\t}\n\texports.or = or;\n\t/**\n\t * Check if all the elements of an array match a predicate function\n\t *\n\t * @param fn1 a predicate function `fn1`\n\t * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n\t */\n\texports.all = function (fn1) {\n\t    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };\n\t};\n\texports.any = function (fn1) {\n\t    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };\n\t};\n\t/** Given a class, returns a Predicate function that returns true if the object is of that class */\n\texports.is = function (ctor) { return function (obj) {\n\t    return (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\t}; };\n\t/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\n\texports.eq = function (val) { return function (other) {\n\t    return val === other;\n\t}; };\n\t/** Given a value, returns a function which returns the value */\n\texports.val = function (v) { return function () { return v; }; };\n\tfunction invoke(fnName, args) {\n\t    return function (obj) {\n\t        return obj[fnName].apply(obj, args);\n\t    };\n\t}\n\texports.invoke = invoke;\n\t/**\n\t * Sorta like Pattern Matching (a functional programming conditional construct)\n\t *\n\t * See http://c2.com/cgi/wiki?PatternMatching\n\t *\n\t * This is a conditional construct which allows a series of predicates and output functions\n\t * to be checked and then applied.  Each predicate receives the input.  If the predicate\n\t * returns truthy, then its matching output function (mapping function) is provided with\n\t * the input and, then the result is returned.\n\t *\n\t * Each combination (2-tuple) of predicate + output function should be placed in an array\n\t * of size 2: [ predicate, mapFn ]\n\t *\n\t * These 2-tuples should be put in an outer array.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * // Here's a 2-tuple where the first element is the isString predicate\n\t * // and the second element is a function that returns a description of the input\n\t * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n\t *\n\t * // Second tuple: predicate \"isNumber\", mapfn returns a description\n\t * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n\t *\n\t * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n\t *\n\t * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n\t *\n\t * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n\t *\n\t * console.log(descriptionOf(undefined)); // 'notdefined'\n\t * console.log(descriptionOf(55)); // '(55) That's a number!'\n\t * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n\t * ```\n\t *\n\t * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n\t * with a Predicate and a mapping/output function\n\t * @returns {function(any): *}\n\t */\n\tfunction pattern(struct) {\n\t    return function (x) {\n\t        for (var i = 0; i < struct.length; i++) {\n\t            if (struct[i][0](x))\n\t                return struct[i][1](x);\n\t        }\n\t    };\n\t}\n\texports.pattern = pattern;\n\t//# sourceMappingURL=hof.js.map\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar notImplemented = function (fnname) { return function () {\n\t    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\n\t}; };\n\tvar services = {\n\t    $q: undefined,\n\t    $injector: undefined,\n\t    location: {},\n\t    locationConfig: {},\n\t    template: {}\n\t};\n\texports.services = services;\n\t[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\n\t    .forEach(function (key) { return services.location[key] = notImplemented(key); });\n\t[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\n\t    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\n\t//# sourceMappingURL=coreservices.js.map\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/** @module common */\n\t/**\n\t * Matches state names using glob-like pattern strings.\n\t *\n\t * Globs can be used in specific APIs including:\n\t *\n\t * - [[StateService.is]]\n\t * - [[StateService.includes]]\n\t * - [[HookMatchCriteria.to]]\n\t * - [[HookMatchCriteria.from]]\n\t * - [[HookMatchCriteria.exiting]]\n\t * - [[HookMatchCriteria.retained]]\n\t * - [[HookMatchCriteria.entering]]\n\t *\n\t * A `Glob` string is a pattern which matches state names.\n\t * Nested state names are split into segments (separated by a dot) when processing.\n\t * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n\t *\n\t * Globs work according to the following rules:\n\t *\n\t * ### Exact match:\n\t *\n\t * The glob `'A.B'` matches the state named exactly `'A.B'`.\n\t *\n\t * | Glob        |Matches states named|Does not match state named|\n\t * |:------------|:--------------------|:---------------------|\n\t * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n\t * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n\t * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n\t *\n\t * ### Single star (`*`)\n\t *\n\t * A single star (`*`) is a wildcard that matches exactly one segment.\n\t *\n\t * | Glob        |Matches states named  |Does not match state named |\n\t * |:------------|:---------------------|:--------------------------|\n\t * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n\t * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n\t * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n\t *\n\t * ### Double star (`**`)\n\t *\n\t * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n\t *\n\t * | Glob        |Matches states named                           |Does not match state named         |\n\t * |:------------|:----------------------------------------------|:----------------------------------|\n\t * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n\t * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n\t * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n\t * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n\t *\n\t */\n\tvar Glob = (function () {\n\t    function Glob(text) {\n\t        this.text = text;\n\t        this.glob = text.split('.');\n\t        var regexpString = this.text.split('.')\n\t            .map(function (seg) {\n\t            if (seg === '**')\n\t                return '(?:|(?:\\\\.[^.]*)*)';\n\t            if (seg === '*')\n\t                return '\\\\.[^.]*';\n\t            return '\\\\.' + seg;\n\t        }).join('');\n\t        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n\t    }\n\t    Glob.prototype.matches = function (name) {\n\t        return this.regexp.test('.' + name);\n\t    };\n\t    /** @deprecated whats the point? */\n\t    Glob.is = function (text) {\n\t        return text.indexOf('*') > -1;\n\t    };\n\t    /** @deprecated whats the point? */\n\t    Glob.fromString = function (text) {\n\t        if (!this.is(text))\n\t            return null;\n\t        return new Glob(text);\n\t    };\n\t    return Glob;\n\t}());\n\texports.Glob = Glob;\n\t//# sourceMappingURL=glob.js.map\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/** @module common */ /** for typedoc */\n\t\"use strict\";\n\tvar Queue = (function () {\n\t    function Queue(_items, _limit) {\n\t        if (_items === void 0) { _items = []; }\n\t        if (_limit === void 0) { _limit = null; }\n\t        this._items = _items;\n\t        this._limit = _limit;\n\t    }\n\t    Queue.prototype.enqueue = function (item) {\n\t        var items = this._items;\n\t        items.push(item);\n\t        if (this._limit && items.length > this._limit)\n\t            items.shift();\n\t        return item;\n\t    };\n\t    Queue.prototype.dequeue = function () {\n\t        if (this.size())\n\t            return this._items.splice(0, 1)[0];\n\t    };\n\t    Queue.prototype.clear = function () {\n\t        var current = this._items;\n\t        this._items = [];\n\t        return current;\n\t    };\n\t    Queue.prototype.size = function () {\n\t        return this._items.length;\n\t    };\n\t    Queue.prototype.remove = function (item) {\n\t        var idx = this._items.indexOf(item);\n\t        return idx > -1 && this._items.splice(idx, 1)[0];\n\t    };\n\t    Queue.prototype.peekTail = function () {\n\t        return this._items[this._items.length - 1];\n\t    };\n\t    Queue.prototype.peekHead = function () {\n\t        if (this.size())\n\t            return this._items[0];\n\t    };\n\t    return Queue;\n\t}());\n\texports.Queue = Queue;\n\t//# sourceMappingURL=queue.js.map\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module common_strings */ /** */\n\t\"use strict\";\n\tvar predicates_1 = __webpack_require__(5);\n\tvar rejectFactory_1 = __webpack_require__(11);\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar transition_1 = __webpack_require__(12);\n\tvar resolvable_1 = __webpack_require__(20);\n\t/**\n\t * Returns a string shortened to a maximum length\n\t *\n\t * If the string is already less than the `max` length, return the string.\n\t * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n\t *\n\t * @param max the maximum length of the string to return\n\t * @param str the input string\n\t */\n\tfunction maxLength(max, str) {\n\t    if (str.length <= max)\n\t        return str;\n\t    return str.substr(0, max - 3) + \"...\";\n\t}\n\texports.maxLength = maxLength;\n\t/**\n\t * Returns a string, with spaces added to the end, up to a desired str length\n\t *\n\t * If the string is already longer than the desired length, return the string.\n\t * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n\t *\n\t * @param length the desired length of the string to return\n\t * @param str the input string\n\t */\n\tfunction padString(length, str) {\n\t    while (str.length < length)\n\t        str += \" \";\n\t    return str;\n\t}\n\texports.padString = padString;\n\tfunction kebobString(camelCase) {\n\t    return camelCase\n\t        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n\t        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\n\t}\n\texports.kebobString = kebobString;\n\tfunction _toJson(obj) {\n\t    return JSON.stringify(obj);\n\t}\n\tfunction _fromJson(json) {\n\t    return predicates_1.isString(json) ? JSON.parse(json) : json;\n\t}\n\tfunction promiseToString(p) {\n\t    return \"Promise(\" + JSON.stringify(p) + \")\";\n\t}\n\tfunction functionToString(fn) {\n\t    var fnStr = fnToString(fn);\n\t    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n\t    return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\t}\n\texports.functionToString = functionToString;\n\tfunction fnToString(fn) {\n\t    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n\t    return _fn && _fn.toString() || \"undefined\";\n\t}\n\texports.fnToString = fnToString;\n\tvar stringifyPatternFn = null;\n\tvar stringifyPattern = function (value) {\n\t    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\n\t    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\n\t        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n\t        [predicates_1.isNull, hof_1.val(\"null\")],\n\t        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\n\t        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\n\t        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n\t        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n\t        [predicates_1.isInjectable, functionToString],\n\t        [hof_1.val(true), common_1.identity]\n\t    ]);\n\t    return stringifyPatternFn(value);\n\t};\n\tfunction stringify(o) {\n\t    var seen = [];\n\t    function format(val) {\n\t        if (predicates_1.isObject(val)) {\n\t            if (seen.indexOf(val) !== -1)\n\t                return '[circular ref]';\n\t            seen.push(val);\n\t        }\n\t        return stringifyPattern(val);\n\t    }\n\t    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n\t}\n\texports.stringify = stringify;\n\t/** Returns a function that splits a string on a character or substring */\n\texports.beforeAfterSubstr = function (char) { return function (str) {\n\t    if (!str)\n\t        return [\"\", \"\"];\n\t    var idx = str.indexOf(char);\n\t    if (idx === -1)\n\t        return [str, \"\"];\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\n\t}; };\n\t//# sourceMappingURL=strings.js.map\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(10);\n\t(function (RejectType) {\n\t    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n\t    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n\t    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n\t    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n\t    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n\t})(exports.RejectType || (exports.RejectType = {}));\n\tvar RejectType = exports.RejectType;\n\tvar Rejection = (function () {\n\t    function Rejection(type, message, detail) {\n\t        this.type = type;\n\t        this.message = message;\n\t        this.detail = detail;\n\t    }\n\t    Rejection.prototype.toString = function () {\n\t        var detailString = function (d) {\n\t            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\n\t        };\n\t        var type = this.type, message = this.message, detail = detailString(this.detail);\n\t        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n\t    };\n\t    Rejection.prototype.toPromise = function () {\n\t        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n\t    };\n\t    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n\t    Rejection.isTransitionRejectionPromise = function (obj) {\n\t        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to transition superseded */\n\t    Rejection.superseded = function (detail, options) {\n\t        var message = \"The transition has been superseded by a different transition\";\n\t        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n\t        if (options && options.redirected) {\n\t            rejection.redirected = true;\n\t        }\n\t        return rejection;\n\t    };\n\t    /** Returns a TransitionRejection due to redirected transition */\n\t    Rejection.redirected = function (detail) {\n\t        return Rejection.superseded(detail, { redirected: true });\n\t    };\n\t    /** Returns a TransitionRejection due to invalid transition */\n\t    Rejection.invalid = function (detail) {\n\t        var message = \"This transition is invalid\";\n\t        return new Rejection(RejectType.INVALID, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to ignored transition */\n\t    Rejection.ignored = function (detail) {\n\t        var message = \"The transition was ignored\";\n\t        return new Rejection(RejectType.IGNORED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.aborted = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition has been aborted\";\n\t        return new Rejection(RejectType.ABORTED, message, detail);\n\t    };\n\t    /** Returns a TransitionRejection due to aborted transition */\n\t    Rejection.errored = function (detail) {\n\t        // TODO think about how to encapsulate an Error() object\n\t        var message = \"The transition errored\";\n\t        return new Rejection(RejectType.ERROR, message, detail);\n\t    };\n\t    return Rejection;\n\t}());\n\texports.Rejection = Rejection;\n\t//# sourceMappingURL=rejectFactory.js.map\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar strings_1 = __webpack_require__(10);\n\tvar trace_1 = __webpack_require__(13);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar hof_1 = __webpack_require__(6);\n\tvar transitionHook_1 = __webpack_require__(14);\n\tvar hookRegistry_1 = __webpack_require__(16);\n\tvar hookBuilder_1 = __webpack_require__(17);\n\tvar node_1 = __webpack_require__(22);\n\tvar pathFactory_1 = __webpack_require__(21);\n\tvar targetState_1 = __webpack_require__(15);\n\tvar param_1 = __webpack_require__(23);\n\tvar resolvable_1 = __webpack_require__(20);\n\tvar rejectFactory_1 = __webpack_require__(11);\n\tvar resolveContext_1 = __webpack_require__(18);\n\tvar router_1 = __webpack_require__(26);\n\tvar transitionCount = 0;\n\tvar stateSelf = hof_1.prop(\"self\");\n\t/**\n\t * Represents a transition between two states.\n\t *\n\t * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n\t *\n\t * This object contains all contextual information about the to/from states, parameters, resolves.\n\t * It has information about all states being entered and exited as a result of the transition.\n\t */\n\tvar Transition = (function () {\n\t    /**\n\t     * Creates a new Transition object.\n\t     *\n\t     * If the target state is not valid, an error is thrown.\n\t     *\n\t     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n\t     *        encapsulates the \"from state\".\n\t     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n\t     * @param router The [[UIRouter]] instance\n\t     */\n\t    function Transition(fromPath, targetState, router) {\n\t        var _this = this;\n\t        /** @hidden */\n\t        this._deferred = coreservices_1.services.$q.defer();\n\t        /**\n\t         * This promise is resolved or rejected based on the outcome of the Transition.\n\t         *\n\t         * When the transition is successful, the promise is resolved\n\t         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n\t         */\n\t        this.promise = this._deferred.promise;\n\t        this.treeChanges = function () { return _this._treeChanges; };\n\t        this.isActive = function () { return _this === _this._options.current(); };\n\t        this.router = router;\n\t        this._targetState = targetState;\n\t        if (!targetState.valid()) {\n\t            throw new Error(targetState.error());\n\t        }\n\t        // Makes the Transition instance a hook registry (onStart, etc)\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n\t        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n\t        this.$id = transitionCount++;\n\t        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\n\t        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n\t        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n\t        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n\t        var rootResolvables = [\n\t            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\n\t            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\n\t            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\n\t        ];\n\t        var rootNode = this._treeChanges.to[0];\n\t        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        context.addResolvables(rootResolvables, rootNode.state);\n\t    }\n\t    /** @inheritdoc */\n\t    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    Transition.prototype.$from = function () {\n\t        return common_1.tail(this._treeChanges.from).state;\n\t    };\n\t    Transition.prototype.$to = function () {\n\t        return common_1.tail(this._treeChanges.to).state;\n\t    };\n\t    /**\n\t     * Returns the \"from state\"\n\t     *\n\t     * @returns The state object for the Transition's \"from state\".\n\t     */\n\t    Transition.prototype.from = function () {\n\t        return this.$from().self;\n\t    };\n\t    /**\n\t     * Returns the \"to state\"\n\t     *\n\t     * @returns The state object for the Transition's target state (\"to state\").\n\t     */\n\t    Transition.prototype.to = function () {\n\t        return this.$to().self;\n\t    };\n\t    /**\n\t     * Gets the Target State\n\t     *\n\t     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\n\t     *\n\t     * @returns the [[TargetState]] of this Transition\n\t     */\n\t    Transition.prototype.targetState = function () {\n\t        return this._targetState;\n\t    };\n\t    /**\n\t     * Determines whether two transitions are equivalent.\n\t     */\n\t    Transition.prototype.is = function (compare) {\n\t        if (compare instanceof Transition) {\n\t            // TODO: Also compare parameters\n\t            return this.is({ to: compare.$to().name, from: compare.$from().name });\n\t        }\n\t        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\n\t            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\n\t    };\n\t    /**\n\t     * Gets transition parameter values\n\t     *\n\t     * @param pathname Pick which treeChanges path to get parameters for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @returns transition parameter values for the desired path.\n\t     */\n\t    Transition.prototype.params = function (pathname) {\n\t        if (pathname === void 0) { pathname = \"to\"; }\n\t        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\n\t    };\n\t    /**\n\t     * Creates a [[UIInjector]] Dependency Injector\n\t     *\n\t     * Returns a Dependency Injector for the Transition's target state (to state).\n\t     * The injector provides resolve values which the target state has access to.\n\t     *\n\t     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n\t     *\n\t     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n\t     *\n\t     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n\t     * @returns a [[UIInjector]]\n\t     */\n\t    Transition.prototype.injector = function (state) {\n\t        var path = this.treeChanges().to;\n\t        if (state)\n\t            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n\t        return new resolveContext_1.ResolveContext(path).injector();\n\t    };\n\t    /**\n\t     * Gets all available resolve tokens (keys)\n\t     *\n\t     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n\t     * available to the Transition.\n\t     *\n\t     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n\t     * in the Transition's [[TreeChanges.to]] path.\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveTokens = function () {\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\n\t    };\n\t    /**\n\t     * Gets resolved values\n\t     *\n\t     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n\t     * are available to the Transition.\n\t     *\n\t     * Given a token, returns the resolved data for that token.\n\t     * Given an array of tokens, returns an array of resolved data for those tokens.\n\t     *\n\t     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n\t     * If a resolvable doesn't exist for the token, throws an error.\n\t     *\n\t     * @param token the token (or array of tokens)\n\t     *\n\t     * @returns an array of resolve tokens (keys)\n\t     */\n\t    Transition.prototype.getResolveValue = function (token) {\n\t        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\n\t        var getData = function (token) {\n\t            var resolvable = resolveContext.getResolvable(token);\n\t            if (resolvable === undefined) {\n\t                throw new Error(\"Dependency Injection token not found: \" + strings_1.stringify(token));\n\t            }\n\t            return resolvable.data;\n\t        };\n\t        if (predicates_1.isArray(token)) {\n\t            return token.map(getData);\n\t        }\n\t        return getData(token);\n\t    };\n\t    /**\n\t     * Gets a [[Resolvable]] primitive\n\t     *\n\t     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\n\t     *\n\t     * @param token the DI token\n\t     *\n\t     * @returns the [[Resolvable]] in the transition's to path, or undefined\n\t     */\n\t    Transition.prototype.getResolvable = function (token) {\n\t        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);\n\t    };\n\t    /**\n\t     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n\t     *\n\t     * @param resolvable an [[Resolvable]] object\n\t     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n\t     */\n\t    Transition.prototype.addResolvable = function (resolvable, state) {\n\t        if (state === void 0) { state = \"\"; }\n\t        var stateName = (typeof state === \"string\") ? state : state.name;\n\t        var topath = this._treeChanges.to;\n\t        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n\t        var resolveContext = new resolveContext_1.ResolveContext(topath);\n\t        resolveContext.addResolvables([resolvable], targetNode.state);\n\t    };\n\t    /**\n\t     * If the current transition is a redirect, returns the transition that was redirected.\n\t     *\n\t     * Gets the transition from which this transition was redirected.\n\t     *\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * let transitionA = $state.go('A').transitionA\n\t     * transitionA.onStart({}, () => $state.target('B'));\n\t     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n\t     *   trans.to().name === 'B'; // true\n\t     *   trans.redirectedFrom() === transitionA; // true\n\t     * });\n\t     * ```\n\t     *\n\t     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n\t     */\n\t    Transition.prototype.redirectedFrom = function () {\n\t        return this._options.redirectedFrom || null;\n\t    };\n\t    /**\n\t     * Get the transition options\n\t     *\n\t     * @returns the options for this Transition.\n\t     */\n\t    Transition.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    /**\n\t     * Gets the states being entered.\n\t     *\n\t     * @returns an array of states that will be entered during this transition.\n\t     */\n\t    Transition.prototype.entering = function () {\n\t        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Gets the states being exited.\n\t     *\n\t     * @returns an array of states that will be exited during this transition.\n\t     */\n\t    Transition.prototype.exiting = function () {\n\t        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n\t    };\n\t    /**\n\t     * Gets the states being retained.\n\t     *\n\t     * @returns an array of states that are already entered from a previous Transition, that will not be\n\t     *    exited during this Transition\n\t     */\n\t    Transition.prototype.retained = function () {\n\t        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n\t    };\n\t    /**\n\t     * Get the [[ViewConfig]]s associated with this Transition\n\t     *\n\t     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n\t     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n\t     *\n\t     * @param pathname the name of the path to fetch views for:\n\t     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n\t     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n\t     *\n\t     * @returns a list of ViewConfig objects for the given path.\n\t     */\n\t    Transition.prototype.views = function (pathname, state) {\n\t        if (pathname === void 0) { pathname = \"entering\"; }\n\t        var path = this._treeChanges[pathname];\n\t        path = !state ? path : path.filter(hof_1.propEq('state', state));\n\t        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Creates a new transition that is a redirection of the current one.\n\t     *\n\t     * This transition can be returned from a [[TransitionService]] hook to\n\t     * redirect a transition to a new state and/or set of parameters.\n\t     *\n\t     * @returns Returns a new [[Transition]] instance.\n\t     */\n\t    Transition.prototype.redirect = function (targetState) {\n\t        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\n\t        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\t        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n\t        var originalEnteringNodes = this.treeChanges().entering;\n\t        var redirectEnteringNodes = newTransition.treeChanges().entering;\n\t        // --- Re-use resolve data from original transition ---\n\t        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n\t        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n\t        // redirected transition.\n\t        //\n\t        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n\t        // You can wait for the resolve, then redirect to a child state based on the result.\n\t        // The redirected transition does not have to re-fetch the resolve.\n\t        // ---------------------------------------------------------\n\t        var nodeIsReloading = function (reloadState) { return function (node) {\n\t            return reloadState && node.state.includes[reloadState.name];\n\t        }; };\n\t        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n\t        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n\t            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n\t        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n\t        matchingEnteringNodes.forEach(function (node, idx) {\n\t            node.resolvables = originalEnteringNodes[idx].resolvables;\n\t        });\n\t        return newTransition;\n\t    };\n\t    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n\t    Transition.prototype._changedParams = function () {\n\t        var _a = this._treeChanges, to = _a.to, from = _a.from;\n\t        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\n\t            return undefined;\n\t        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\n\t        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\n\t        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n\t        return tuples.map(function (_a) {\n\t            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n\t            return param_1.Param.changed(schema, toVals, fromVals);\n\t        }).reduce(common_1.unnestR, []);\n\t    };\n\t    /**\n\t     * Returns true if the transition is dynamic.\n\t     *\n\t     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n\t     *\n\t     * @returns true if the Transition is dynamic\n\t     */\n\t    Transition.prototype.dynamic = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n\t    };\n\t    /**\n\t     * Returns true if the transition is ignored.\n\t     *\n\t     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n\t     *\n\t     * @returns true if the Transition is ignored.\n\t     */\n\t    Transition.prototype.ignored = function () {\n\t        var changes = this._changedParams();\n\t        return !changes ? false : changes.length === 0;\n\t    };\n\t    /**\n\t     * @hidden\n\t     */\n\t    Transition.prototype.hookBuilder = function () {\n\t        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\n\t            transition: this,\n\t            current: this._options.current\n\t        });\n\t    };\n\t    /**\n\t     * Runs the transition\n\t     *\n\t     * This method is generally called from the [[StateService.transitionTo]]\n\t     *\n\t     * @returns a promise for a successful transition.\n\t     */\n\t    Transition.prototype.run = function () {\n\t        var _this = this;\n\t        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\n\t        var hookBuilder = this.hookBuilder();\n\t        var globals = this.router.globals;\n\t        globals.transitionHistory.enqueue(this);\n\t        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n\t        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\n\t            syncResult.catch(function () { return 0; }); // issue #2676\n\t            var rejectReason = syncResult._transitionRejection;\n\t            this._deferred.reject(rejectReason);\n\t            return this.promise;\n\t        }\n\t        if (!this.valid()) {\n\t            var error = new Error(this.error());\n\t            this._deferred.reject(error);\n\t            return this.promise;\n\t        }\n\t        if (this.ignored()) {\n\t            trace_1.trace.traceTransitionIgnored(this);\n\t            this._deferred.reject(rejectFactory_1.Rejection.ignored());\n\t            return this.promise;\n\t        }\n\t        // When the chain is complete, then resolve or reject the deferred\n\t        var transitionSuccess = function () {\n\t            trace_1.trace.traceSuccess(_this.$to(), _this);\n\t            _this.success = true;\n\t            _this._deferred.resolve(_this.to());\n\t            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n\t        };\n\t        var transitionError = function (reason) {\n\t            trace_1.trace.traceError(reason, _this);\n\t            _this.success = false;\n\t            _this._deferred.reject(reason);\n\t            _this._error = reason;\n\t            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n\t        };\n\t        trace_1.trace.traceTransitionStart(this);\n\t        // Chain the next hook off the previous\n\t        var appendHookToChain = function (prev, nextHook) {\n\t            return prev.then(function () { return nextHook.invokeHook(); });\n\t        };\n\t        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n\t        hookBuilder.asyncHooks()\n\t            .reduce(appendHookToChain, syncResult)\n\t            .then(transitionSuccess, transitionError);\n\t        return this.promise;\n\t    };\n\t    /**\n\t     * Checks if the Transition is valid\n\t     *\n\t     * @returns true if the Transition is valid\n\t     */\n\t    Transition.prototype.valid = function () {\n\t        return !this.error() || this.success !== undefined;\n\t    };\n\t    /**\n\t     * The Transition error reason.\n\t     *\n\t     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n\t     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n\t     *\n\t     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n\t     */\n\t    Transition.prototype.error = function () {\n\t        var state = this.$to();\n\t        var redirects = 0, trans = this;\n\t        while ((trans = trans.redirectedFrom()) != null) {\n\t            if (++redirects > 20)\n\t                return \"Too many Transition redirects (20+)\";\n\t        }\n\t        if (state.self.abstract)\n\t            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n\t        if (!param_1.Param.validates(state.parameters(), this.params()))\n\t            return \"Param values not valid for state '\" + state.name + \"'\";\n\t        if (this.success === false)\n\t            return this._error;\n\t    };\n\t    /**\n\t     * A string representation of the Transition\n\t     *\n\t     * @returns A string representation of the Transition\n\t     */\n\t    Transition.prototype.toString = function () {\n\t        var fromStateOrName = this.from();\n\t        var toStateOrName = this.to();\n\t        var avoidEmptyHash = function (params) {\n\t            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\n\t        };\n\t        // (X) means the to state is invalid.\n\t        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n\t        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n\t    };\n\t    Transition.diToken = Transition;\n\t    return Transition;\n\t}());\n\texports.Transition = Transition;\n\t//# sourceMappingURL=transition.js.map\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * UI-Router Transition Tracing\n\t *\n\t * Enable transition tracing to print transition information to the console, in order to help debug your application.\n\t * Tracing logs detailed information about each Transition to your console.\n\t *\n\t * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n\t *\n\t * ES6\n\t * ```\n\t *\n\t * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n\t * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n\t * ```\n\t *\n\t * CJS\n\t * ```\n\t *\n\t * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n\t * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n\t * ```\n\t *\n\t * Globals\n\t * ```\n\t *\n\t * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n\t * trace.enable(); // Trace everything (very verbose)\n\t * ```\n\t *\n\t * @module trace\n\t */ /** for typedoc */\n\tvar hof_1 = __webpack_require__(6);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar strings_1 = __webpack_require__(10);\n\t/** @hidden */\n\tfunction uiViewString(viewData) {\n\t    if (!viewData)\n\t        return 'ui-view (defunct)';\n\t    return (\"[ui-view#\" + viewData.id + \" tag \") +\n\t        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\n\t        (\"fqn: '\" + viewData.fqn + \"', \") +\n\t        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\n\t}\n\t/** @hidden */\n\tvar viewConfigString = function (viewConfig) {\n\t    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\n\t};\n\t/** @hidden */\n\tfunction normalizedCat(input) {\n\t    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n\t}\n\t/**\n\t * Trace categories\n\t *\n\t * [[Trace.enable]] or [[Trace.disable]] a category\n\t *\n\t * `trace.enable(Category.TRANSITION)`\n\t *\n\t * These can also be provided using a matching string, or position ordinal\n\t *\n\t * `trace.enable(\"TRANSITION\")`\n\t *\n\t * `trace.enable(1)`\n\t */\n\t(function (Category) {\n\t    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n\t    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n\t    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n\t    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\n\t    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\n\t})(exports.Category || (exports.Category = {}));\n\tvar Category = exports.Category;\n\t/**\n\t * Prints UI-Router Transition trace information to the console.\n\t */\n\tvar Trace = (function () {\n\t    function Trace() {\n\t        /** @hidden */\n\t        this._enabled = {};\n\t        this.approximateDigests = 0;\n\t    }\n\t    /** @hidden */\n\t    Trace.prototype._set = function (enabled, categories) {\n\t        var _this = this;\n\t        if (!categories.length) {\n\t            categories = Object.keys(Category)\n\t                .map(function (k) { return parseInt(k, 10); })\n\t                .filter(function (k) { return !isNaN(k); })\n\t                .map(function (key) { return Category[key]; });\n\t        }\n\t        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n\t    };\n\t    /**\n\t     * Enables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enable(\"TRANSITION\");\n\t     * ```\n\t     *\n\t     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.enable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(true, categories);\n\t    };\n\t    /**\n\t     * Disables a trace [[Category]]\n\t     *\n\t     * ```\n\t     * trace.disable(\"VIEWCONFIG\");\n\t     * ```\n\t     *\n\t     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n\t     *        Also takes strings (category name) or ordinal (category position)\n\t     */\n\t    Trace.prototype.disable = function () {\n\t        var categories = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            categories[_i - 0] = arguments[_i];\n\t        }\n\t        this._set(false, categories);\n\t    };\n\t    /**\n\t     * Retrieves the enabled stateus of a [[Category]]\n\t     *\n\t     * ```\n\t     * trace.enabled(\"VIEWCONFIG\"); // true or false\n\t     * ```\n\t     *\n\t     * @returns boolean true if the category is enabled\n\t     */\n\t    Trace.prototype.enabled = function (category) {\n\t        return !!this._enabled[normalizedCat(category)];\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionStart = function (transition) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceTransitionIgnored = function (trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookInvocation = function (step, options) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.hookFn);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceHookResult = function (hookResult, transitionResult, transitionOptions) {\n\t        if (!this.enabled(Category.HOOK))\n\t            return;\n\t        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult), transitionResultStr = strings_1.stringify(transitionResult);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr) + \", transition result: \" + strings_1.maxLength(200, transitionResultStr));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvePath = function (path, when, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n\t        if (!this.enabled(Category.RESOLVE))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceError = function (reason, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + reason);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceSuccess = function (finalState, trans) {\n\t        if (!this.enabled(Category.TRANSITION))\n\t            return;\n\t        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\n\t        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n\t        if (extra === void 0) { extra = \"\"; }\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceUIViewFill = function (viewData, html) {\n\t        if (!this.enabled(Category.UIVIEW))\n\t            return;\n\t        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n\t    };\n\t    /** called by ui-router code */\n\t    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n\t        if (!this.enabled(Category.VIEWCONFIG))\n\t            return;\n\t        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n\t    };\n\t    return Trace;\n\t}());\n\texports.Trace = Trace;\n\t/**\n\t * The [[Trace]] singleton\n\t *\n\t * @example\n\t * ```js\n\t *\n\t * import {trace} from \"angular-ui-router\";\n\t * trace.enable(1, 5);\n\t * ```\n\t */\n\tvar trace = new Trace();\n\texports.trace = trace;\n\t//# sourceMappingURL=trace.js.map\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\tvar strings_1 = __webpack_require__(10);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar hof_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(13);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar rejectFactory_1 = __webpack_require__(11);\n\tvar targetState_1 = __webpack_require__(15);\n\tvar defaultOptions = {\n\t    async: true,\n\t    rejectIfSuperseded: true,\n\t    current: common_1.noop,\n\t    transition: null,\n\t    traceData: {},\n\t    bind: null\n\t};\n\t/** @hidden */\n\tvar TransitionHook = (function () {\n\t    function TransitionHook(transition, stateContext, eventHook, options) {\n\t        var _this = this;\n\t        this.transition = transition;\n\t        this.stateContext = stateContext;\n\t        this.eventHook = eventHook;\n\t        this.options = options;\n\t        this.isSuperseded = function () { return _this.options.current() !== _this.options.transition; };\n\t        this.options = common_1.defaults(options, defaultOptions);\n\t    }\n\t    TransitionHook.prototype.invokeHook = function () {\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\n\t        trace_1.trace.traceHookInvocation(this, options);\n\t        if (options.rejectIfSuperseded && this.isSuperseded()) {\n\t            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\n\t        }\n\t        var hookResult = !eventHook._deregistered\n\t            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\n\t            : undefined;\n\t        return this.handleHookResult(hookResult);\n\t    };\n\t    /**\n\t     * This method handles the return value of a Transition Hook.\n\t     *\n\t     * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n\t     */\n\t    TransitionHook.prototype.handleHookResult = function (hookResult) {\n\t        var _this = this;\n\t        if (!predicates_1.isDefined(hookResult))\n\t            return undefined;\n\t        /**\n\t         * Handles transition superseded, transition aborted and transition redirect.\n\t         */\n\t        var mapHookResult = hof_1.pattern([\n\t            // Transition is no longer current\n\t            [this.isSuperseded, function () { return rejectFactory_1.Rejection.superseded(_this.options.current()).toPromise(); }],\n\t            // If the hook returns false, abort the current Transition\n\t            [hof_1.eq(false), function () { return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise(); }],\n\t            // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n\t            [hof_1.is(targetState_1.TargetState), function (target) { return rejectFactory_1.Rejection.redirected(target).toPromise(); }],\n\t            // A promise was returned, wait for the promise and then chain another hookHandler\n\t            [predicates_1.isPromise, function (promise) { return promise.then(_this.handleHookResult.bind(_this)); }]\n\t        ]);\n\t        var transitionResult = mapHookResult(hookResult);\n\t        if (transitionResult)\n\t            trace_1.trace.traceHookResult(hookResult, transitionResult, this.options);\n\t        return transitionResult;\n\t    };\n\t    TransitionHook.prototype.toString = function () {\n\t        var _a = this, options = _a.options, eventHook = _a.eventHook;\n\t        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(eventHook.callback);\n\t        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n\t    };\n\t    /**\n\t     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n\t     *\n\t     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n\t     */\n\t    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\n\t        if (swallowExceptions === void 0) { swallowExceptions = false; }\n\t        var results = [];\n\t        for (var i = 0; i < hooks.length; i++) {\n\t            var hook = hooks[i];\n\t            try {\n\t                results.push(hook.invokeHook());\n\t            }\n\t            catch (exception) {\n\t                if (!swallowExceptions) {\n\t                    return rejectFactory_1.Rejection.errored(exception).toPromise();\n\t                }\n\t                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();\n\t                errorHandler(exception);\n\t            }\n\t        }\n\t        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\n\t        if (rejections.length)\n\t            return rejections[0];\n\t        return results\n\t            .filter(predicates_1.isPromise)\n\t            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\n\t    };\n\t    return TransitionHook;\n\t}());\n\texports.TransitionHook = TransitionHook;\n\t//# sourceMappingURL=transitionHook.js.map\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:TargetState\n\t *\n\t * @description\n\t * Encapsulate the desired target of a transition.\n\t * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n\t *\n\t * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n\t *            used to define the state.\n\t * @param {IState} _definition The `State` object definition.\n\t * @param {ParamsOrArray} _params Parameters for the target state\n\t * @param {TransitionOptions} _options Transition options.\n\t */\n\tvar TargetState = (function () {\n\t    function TargetState(_identifier, _definition, _params, _options) {\n\t        if (_params === void 0) { _params = {}; }\n\t        if (_options === void 0) { _options = {}; }\n\t        this._identifier = _identifier;\n\t        this._definition = _definition;\n\t        this._options = _options;\n\t        this._params = _params || {};\n\t    }\n\t    TargetState.prototype.name = function () {\n\t        return this._definition && this._definition.name || this._identifier;\n\t    };\n\t    TargetState.prototype.identifier = function () {\n\t        return this._identifier;\n\t    };\n\t    TargetState.prototype.params = function () {\n\t        return this._params;\n\t    };\n\t    TargetState.prototype.$state = function () {\n\t        return this._definition;\n\t    };\n\t    TargetState.prototype.state = function () {\n\t        return this._definition && this._definition.self;\n\t    };\n\t    TargetState.prototype.options = function () {\n\t        return this._options;\n\t    };\n\t    TargetState.prototype.exists = function () {\n\t        return !!(this._definition && this._definition.self);\n\t    };\n\t    TargetState.prototype.valid = function () {\n\t        return !this.error();\n\t    };\n\t    TargetState.prototype.error = function () {\n\t        var base = this.options().relative;\n\t        if (!this._definition && !!base) {\n\t            var stateName = base.name ? base.name : base;\n\t            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n\t        }\n\t        if (!this._definition)\n\t            return \"No such state '\" + this.name() + \"'\";\n\t        if (!this._definition.self)\n\t            return \"State '\" + this.name() + \"' has an invalid definition\";\n\t    };\n\t    TargetState.prototype.toString = function () {\n\t        return \"'\" + this.name() + \"'\" + common_1.toJson(this.params());\n\t    };\n\t    return TargetState;\n\t}());\n\texports.TargetState = TargetState;\n\t//# sourceMappingURL=targetState.js.map\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module transition */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar glob_1 = __webpack_require__(8);\n\t/**\n\t * Determines if the given state matches the matchCriteria\n\t *\n\t * @hidden\n\t *\n\t * @param state a State Object to test against\n\t * @param criterion\n\t * - If a string, matchState uses the string as a glob-matcher against the state name\n\t * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n\t *   and returns a positive match if any of the globs match.\n\t * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n\t * @returns {boolean}\n\t */\n\tfunction matchState(state, criterion) {\n\t    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n\t    function matchGlobs(_state) {\n\t        var globStrings = toMatch;\n\t        for (var i = 0; i < globStrings.length; i++) {\n\t            var glob = glob_1.Glob.fromString(globStrings[i]);\n\t            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n\t    return !!matchFn(state);\n\t}\n\texports.matchState = matchState;\n\t/** @hidden */\n\tvar EventHook = (function () {\n\t    function EventHook(matchCriteria, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.callback = callback;\n\t        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n\t        this.priority = options.priority || 0;\n\t        this.bind = options.bind || null;\n\t        this._deregistered = false;\n\t    }\n\t    EventHook._matchingNodes = function (nodes, criterion) {\n\t        if (criterion === true)\n\t            return nodes;\n\t        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n\t        return matching.length ? matching : null;\n\t    };\n\t    /**\n\t     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n\t     *\n\t     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n\t     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n\t     */\n\t    EventHook.prototype.matches = function (treeChanges) {\n\t        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n\t        var matches = {\n\t            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\n\t            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\n\t            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n\t            retained: _matchingNodes(treeChanges.retained, mc.retained),\n\t            entering: _matchingNodes(treeChanges.entering, mc.entering),\n\t        };\n\t        // Check if all the criteria matched the TreeChanges object\n\t        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n\t            .map(function (prop) { return matches[prop]; })\n\t            .reduce(common_1.allTrueR, true);\n\t        return allMatched ? matches : null;\n\t    };\n\t    return EventHook;\n\t}());\n\texports.EventHook = EventHook;\n\t/** @hidden Return a registration function of the requested type. */\n\tfunction makeHookRegistrationFn(hooks, name) {\n\t    return function (matchObject, callback, options) {\n\t        if (options === void 0) { options = {}; }\n\t        var eventHook = new EventHook(matchObject, callback, options);\n\t        hooks[name].push(eventHook);\n\t        return function deregisterEventHook() {\n\t            eventHook._deregistered = true;\n\t            common_1.removeFrom(hooks[name])(eventHook);\n\t        };\n\t    };\n\t}\n\t/**\n\t * Mixin class acts as a Transition Hook registry.\n\t *\n\t * Holds the registered [[HookFn]] objects.\n\t * Exposes functions to register new hooks.\n\t *\n\t * This is a Mixin class which can be applied to other objects.\n\t *\n\t * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n\t *\n\t * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n\t * Global hooks are added to the [[TransitionService]].\n\t * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n\t * (note: the hook criteria still must match the Transition).\n\t */\n\tvar HookRegistry = (function () {\n\t    function HookRegistry() {\n\t        var _this = this;\n\t        this._transitionEvents = {\n\t            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n\t        };\n\t        this.getHooks = function (name) { return _this._transitionEvents[name]; };\n\t        /** @inheritdoc */\n\t        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n\t        /** @inheritdoc */\n\t        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n\t        /** @inheritdoc */\n\t        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n\t        /** @inheritdoc */\n\t        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n\t        /** @inheritdoc */\n\t        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n\t        /** @inheritdoc */\n\t        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n\t        /** @inheritdoc */\n\t        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n\t        /** @inheritdoc */\n\t        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n\t    }\n\t    HookRegistry.mixin = function (source, target) {\n\t        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\n\t    };\n\t    return HookRegistry;\n\t}());\n\texports.HookRegistry = HookRegistry;\n\t//# sourceMappingURL=hookRegistry.js.map\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module transition */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar transitionHook_1 = __webpack_require__(14);\n\tvar resolveContext_1 = __webpack_require__(18);\n\t/**\n\t * This class returns applicable TransitionHooks for a specific Transition instance.\n\t *\n\t * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n\t * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n\t * determined by the type of hook)\n\t *\n\t * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n\t *\n\t * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n\t * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n\t * in the Transition class, so we must also provide the Transition's _treeChanges)\n\t *\n\t */\n\tvar HookBuilder = (function () {\n\t    function HookBuilder($transitions, transition, baseHookOptions) {\n\t        var _this = this;\n\t        this.$transitions = $transitions;\n\t        this.transition = transition;\n\t        this.baseHookOptions = baseHookOptions;\n\t        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\n\t        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\n\t        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\n\t        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\n\t        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\n\t        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n\t        this.treeChanges = transition.treeChanges();\n\t        this.toState = common_1.tail(this.treeChanges.to).state;\n\t        this.fromState = common_1.tail(this.treeChanges.from).state;\n\t        this.transitionOptions = transition.options();\n\t    }\n\t    HookBuilder.prototype.asyncHooks = function () {\n\t        var onStartHooks = this.getOnStartHooks();\n\t        var onExitHooks = this.getOnExitHooks();\n\t        var onRetainHooks = this.getOnRetainHooks();\n\t        var onEnterHooks = this.getOnEnterHooks();\n\t        var onFinishHooks = this.getOnFinishHooks();\n\t        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n\t        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\n\t    };\n\t    /**\n\t     * Returns an array of newly built TransitionHook objects.\n\t     *\n\t     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n\t     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n\t     * - For each of the [[PathNode]]s, creates a TransitionHook\n\t     *\n\t     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n\t     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n\t     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n\t     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n\t     * @param options any specific Transition Hook Options\n\t     */\n\t    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\n\t        var _this = this;\n\t        // Find all the matching registered hooks for a given hook type\n\t        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n\t        if (!matchingHooks)\n\t            return [];\n\t        var makeTransitionHooks = function (hook) {\n\t            // Fetch the Nodes that caused this hook to match.\n\t            var matches = hook.matches(_this.treeChanges);\n\t            // Select the PathNode[] that will be used as TransitionHook context objects\n\t            var matchingNodes = matches[matchingNodesProp];\n\t            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n\t            // Everything else gets the \"to path\"\n\t            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\n\t            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\n\t            // Return an array of HookTuples\n\t            return matchingNodes.map(function (node) {\n\t                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\n\t                var state = _options.stateHook ? node.state : null;\n\t                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);\n\t                return { hook: hook, node: node, transitionHook: transitionHook };\n\t            });\n\t        };\n\t        return matchingHooks.map(makeTransitionHooks)\n\t            .reduce(common_1.unnestR, [])\n\t            .sort(sortHooksFn)\n\t            .map(function (tuple) { return tuple.transitionHook; });\n\t    };\n\t    /**\n\t     * Finds all IEventHooks from:\n\t     * - The Transition object instance hook registry\n\t     * - The TransitionService ($transitions) global hook registry\n\t     *\n\t     * which matched:\n\t     * - the eventType\n\t     * - the matchCriteria (to, from, exiting, retained, entering)\n\t     *\n\t     * @returns an array of matched [[IEventHook]]s\n\t     */\n\t    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\n\t        return [this.transition, this.$transitions] // Instance and Global hook registries\n\t            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\n\t            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\n\t            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\n\t            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n\t    };\n\t    return HookBuilder;\n\t}());\n\texports.HookBuilder = HookBuilder;\n\t/**\n\t * A factory for a sort function for HookTuples.\n\t *\n\t * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n\t * the EventHook priority.\n\t *\n\t * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n\t * @returns a tuple sort function\n\t */\n\tfunction tupleSort(reverseDepthSort) {\n\t    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n\t    return function nodeDepthThenPriority(l, r) {\n\t        var factor = reverseDepthSort ? -1 : 1;\n\t        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n\t        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n\t    };\n\t}\n\t//# sourceMappingURL=hookBuilder.js.map\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar trace_1 = __webpack_require__(13);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar interface_1 = __webpack_require__(19);\n\tvar resolvable_1 = __webpack_require__(20);\n\tvar pathFactory_1 = __webpack_require__(21);\n\tvar strings_1 = __webpack_require__(10);\n\tvar when = interface_1.resolvePolicies.when;\n\tvar ALL_WHENS = [when.EAGER, when.LAZY];\n\tvar EAGER_WHENS = [when.EAGER];\n\t/**\n\t * Encapsulates Depenency Injection for a path of nodes\n\t *\n\t * UI-Router states are organized as a tree.\n\t * A nested state has a path of ancestors to the root of the tree.\n\t * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n\t * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n\t *\n\t * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n\t */\n\tvar ResolveContext = (function () {\n\t    function ResolveContext(_path) {\n\t        this._path = _path;\n\t    }\n\t    /** Gets all the tokens found in the resolve context, de-duplicated */\n\t    ResolveContext.prototype.getTokens = function () {\n\t        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\n\t    };\n\t    /**\n\t     * Gets the Resolvable that matches the token\n\t     *\n\t     * Gets the last Resolvable that matches the token in this context, or undefined.\n\t     * Throws an error if it doesn't exist in the ResolveContext\n\t     */\n\t    ResolveContext.prototype.getResolvable = function (token) {\n\t        var matching = this._path.map(function (node) { return node.resolvables; })\n\t            .reduce(common_1.unnestR, [])\n\t            .filter(function (r) { return r.token === token; });\n\t        return common_1.tail(matching);\n\t    };\n\t    /**\n\t     * Returns a ResolveContext that includes a portion of this one\n\t     *\n\t     * Given a state, this method creates a new ResolveContext from this one.\n\t     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n\t     *\n\t     * #### Why\n\t     *\n\t     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n\t     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n\t     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n\t     * This method is used to create a narrower context when injecting ancestor nodes.\n\t     *\n\t     * @example\n\t     * `let ABCD = new ResolveContext([A, B, C, D]);`\n\t     *\n\t     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n\t     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n\t     * However, `B` should only be able to access resolvables from `A`, `B`.\n\t     *\n\t     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n\t     * `let AB = ABCD.subcontext(a)`\n\t     */\n\t    ResolveContext.prototype.subContext = function (state) {\n\t        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\n\t    };\n\t    /**\n\t     * Adds Resolvables to the node that matches the state\n\t     *\n\t     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n\t     * The resolvable is added to the node matching the `state` parameter.\n\t     *\n\t     * These new resolvables are not automatically fetched.\n\t     * The calling code should either fetch them, fetch something that depends on them,\n\t     * or rely on [[resolvePath]] being called when some state is being entered.\n\t     *\n\t     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n\t     *\n\t     * @param newResolvables the new Resolvables\n\t     * @param state Used to find the node to put the resolvable on\n\t     */\n\t    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n\t        var node = common_1.find(this._path, hof_1.propEq('state', state));\n\t        var keys = newResolvables.map(function (r) { return r.token; });\n\t        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n\t    };\n\t    /**\n\t     * Returns a promise for an array of resolved path Element promises\n\t     *\n\t     * @param when\n\t     * @param trans\n\t     * @returns {Promise<any>|any}\n\t     */\n\t    ResolveContext.prototype.resolvePath = function (when, trans) {\n\t        var _this = this;\n\t        if (when === void 0) { when = \"LAZY\"; }\n\t        // This option determines which 'when' policy Resolvables we are about to fetch.\n\t        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n\t        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n\t        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n\t        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n\t        // get the subpath to the state argument, if provided\n\t        trace_1.trace.traceResolvePath(this._path, when, trans);\n\t        var promises = this._path.reduce(function (acc, node) {\n\t            var matchesRequestedPolicy = function (resolvable) {\n\t                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n\t            };\n\t            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n\t            var subContext = _this.subContext(node.state);\n\t            // For the matching Resolvables, start their async fetch process.\n\t            var getResult = function (r) { return r.get(subContext, trans)\n\t                .then(function (value) { return ({ token: r.token, value: value }); }); };\n\t            return acc.concat(nodeResolvables.map(getResult));\n\t        }, []);\n\t        return coreservices_1.services.$q.all(promises);\n\t    };\n\t    ResolveContext.prototype.injector = function () {\n\t        return new UIInjectorImpl(this);\n\t    };\n\t    ResolveContext.prototype.findNode = function (resolvable) {\n\t        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\n\t    };\n\t    /**\n\t     * Gets the async dependencies of a Resolvable\n\t     *\n\t     * Given a Resolvable, returns its dependencies as a Resolvable[]\n\t     */\n\t    ResolveContext.prototype.getDependencies = function (resolvable) {\n\t        var node = this.findNode(resolvable);\n\t        // Find which other resolvables are \"visible\" to the `resolvable` argument\n\t        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n\t        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\n\t        var availableResolvables = subPath\n\t            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\n\t            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n\t        var getDependency = function (token) {\n\t            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n\t            if (matching.length)\n\t                return common_1.tail(matching);\n\t            var fromInjector = coreservices_1.services.$injector.get(token);\n\t            if (!fromInjector) {\n\t                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n\t            }\n\t            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n\t        };\n\t        return resolvable.deps.map(getDependency);\n\t    };\n\t    return ResolveContext;\n\t}());\n\texports.ResolveContext = ResolveContext;\n\tvar UIInjectorImpl = (function () {\n\t    function UIInjectorImpl(context) {\n\t        this.context = context;\n\t        /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n\t        this.native = coreservices_1.services.$injector;\n\t    }\n\t    UIInjectorImpl.prototype.get = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable) {\n\t            if (!resolvable.resolved) {\n\t                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n\t            }\n\t            return resolvable.data;\n\t        }\n\t        return coreservices_1.services.$injector.get(token);\n\t    };\n\t    UIInjectorImpl.prototype.getAsync = function (token) {\n\t        var resolvable = this.context.getResolvable(token);\n\t        if (resolvable)\n\t            return resolvable.get(this.context);\n\t        return coreservices_1.services.$q.when(coreservices_1.services.$injector.get(token));\n\t    };\n\t    return UIInjectorImpl;\n\t}());\n\t//# sourceMappingURL=resolveContext.js.map\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.resolvePolicies = {\n\t    when: {\n\t        LAZY: \"LAZY\",\n\t        EAGER: \"EAGER\"\n\t    },\n\t    async: {\n\t        WAIT: \"WAIT\",\n\t        NOWAIT: \"NOWAIT\",\n\t        RXWAIT: \"RXWAIT\"\n\t    }\n\t};\n\t//# sourceMappingURL=interface.js.map\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module resolve */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar trace_1 = __webpack_require__(13);\n\tvar strings_1 = __webpack_require__(10);\n\tvar predicates_1 = __webpack_require__(5);\n\t// TODO: explicitly make this user configurable\n\texports.defaultResolvePolicy = {\n\t    when: \"LAZY\",\n\t    async: \"WAIT\"\n\t};\n\t/**\n\t * The basic building block for the resolve system.\n\t *\n\t * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n\t * and the unwrapped-when-complete (.data) result of the resolveFn.\n\t *\n\t * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n\t * resolveFn) and returns the resulting promise.\n\t *\n\t * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n\t * parameter to those fns.\n\t */\n\tvar Resolvable = (function () {\n\t    function Resolvable(arg1, resolveFn, deps, policy, data) {\n\t        this.resolved = false;\n\t        this.promise = undefined;\n\t        if (arg1 instanceof Resolvable) {\n\t            common_1.extend(this, arg1);\n\t        }\n\t        else if (predicates_1.isFunction(resolveFn)) {\n\t            if (arg1 == null || arg1 == undefined)\n\t                throw new Error(\"new Resolvable(): token argument is required\");\n\t            if (!predicates_1.isFunction(resolveFn))\n\t                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\t            this.token = arg1;\n\t            this.policy = policy;\n\t            this.resolveFn = resolveFn;\n\t            this.deps = deps || [];\n\t            this.data = data;\n\t            this.resolved = data !== undefined;\n\t            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n\t        }\n\t        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n\t            var literal = arg1;\n\t            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n\t        }\n\t    }\n\t    Resolvable.prototype.getPolicy = function (state) {\n\t        var thisPolicy = this.policy || {};\n\t        var statePolicy = state && state.resolvePolicy || {};\n\t        return {\n\t            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n\t            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\n\t        };\n\t    };\n\t    /**\n\t     * Asynchronously resolve this Resolvable's data\n\t     *\n\t     * Given a ResolveContext that this Resolvable is found in:\n\t     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n\t     * and update the Resolvable's state\n\t     */\n\t    Resolvable.prototype.resolve = function (resolveContext, trans) {\n\t        var _this = this;\n\t        var $q = coreservices_1.services.$q;\n\t        // Gets all dependencies from ResolveContext and wait for them to be resolved\n\t        var getResolvableDependencies = function () {\n\t            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\n\t                return r.get(resolveContext, trans);\n\t            }));\n\t        };\n\t        // Invokes the resolve function passing the resolved dependencies as arguments\n\t        var invokeResolveFn = function (resolvedDeps) {\n\t            return _this.resolveFn.apply(null, resolvedDeps);\n\t        };\n\t        /**\n\t         * For RXWAIT policy:\n\t         *\n\t         * Given an observable returned from a resolve function:\n\t         * - enables .cache() mode (this allows multicast subscribers)\n\t         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n\t         * - Waits for the promise, then return the cached observable (not the first emitted value).\n\t         */\n\t        var waitForRx = function (observable$) {\n\t            var cached = observable$.cache(1);\n\t            return cached.take(1).toPromise().then(function () { return cached; });\n\t        };\n\t        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n\t        var node = resolveContext.findNode(this);\n\t        var state = node && node.state;\n\t        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : common_1.identity;\n\t        // After the final value has been resolved, update the state of the Resolvable\n\t        var applyResolvedValue = function (resolvedValue) {\n\t            _this.data = resolvedValue;\n\t            _this.resolved = true;\n\t            trace_1.trace.traceResolvableResolved(_this, trans);\n\t            return _this.data;\n\t        };\n\t        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n\t        return this.promise = $q.when()\n\t            .then(getResolvableDependencies)\n\t            .then(invokeResolveFn)\n\t            .then(maybeWaitForRx)\n\t            .then(applyResolvedValue);\n\t    };\n\t    /**\n\t     * Gets a promise for this Resolvable's data.\n\t     *\n\t     * Fetches the data and returns a promise.\n\t     * Returns the existing promise if it has already been fetched once.\n\t     */\n\t    Resolvable.prototype.get = function (resolveContext, trans) {\n\t        return this.promise || this.resolve(resolveContext, trans);\n\t    };\n\t    Resolvable.prototype.toString = function () {\n\t        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\n\t    };\n\t    Resolvable.prototype.clone = function () {\n\t        return new Resolvable(this);\n\t    };\n\t    Resolvable.fromData = function (token, data) {\n\t        return new Resolvable(token, function () { return data; }, null, null, data);\n\t    };\n\t    return Resolvable;\n\t}());\n\texports.Resolvable = Resolvable;\n\t//# sourceMappingURL=resolvable.js.map\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module path */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar targetState_1 = __webpack_require__(15);\n\tvar node_1 = __webpack_require__(22);\n\t/**\n\t * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n\t */\n\tvar PathFactory = (function () {\n\t    function PathFactory() {\n\t    }\n\t    /** Given a PathNode[], create an TargetState */\n\t    PathFactory.makeTargetState = function (path) {\n\t        var state = common_1.tail(path).state;\n\t        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n\t    };\n\t    PathFactory.buildPath = function (targetState) {\n\t        var toParams = targetState.params();\n\t        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\n\t    };\n\t    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n\t    PathFactory.buildToPath = function (fromPath, targetState) {\n\t        var toPath = PathFactory.buildPath(targetState);\n\t        if (targetState.options().inherit) {\n\t            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n\t        }\n\t        return toPath;\n\t    };\n\t    /**\n\t     * Creates ViewConfig objects and adds to nodes.\n\t     *\n\t     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n\t     */\n\t    PathFactory.applyViewConfigs = function ($view, path, states) {\n\t        // Only apply the viewConfigs to the nodes for the given states\n\t        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\n\t            var viewDecls = common_1.values(node.state.views || {});\n\t            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\n\t            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n\t            node.views = viewConfigs.reduce(common_1.unnestR, []);\n\t        });\n\t    };\n\t    /**\n\t     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n\t     *\n\t     * For a parameter in a node to be inherited from the from path:\n\t     * - The toPath's node must have a matching node in the fromPath (by state).\n\t     * - The parameter name must not be found in the toKeys parameter array.\n\t     *\n\t     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n\t     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n\t     * it is not inherited from the fromPath.\n\t     */\n\t    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\n\t        if (toKeys === void 0) { toKeys = []; }\n\t        function nodeParamVals(path, state) {\n\t            var node = common_1.find(path, hof_1.propEq('state', state));\n\t            return common_1.extend({}, node && node.paramValues);\n\t        }\n\t        /**\n\t         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n\t         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n\t         */\n\t        function makeInheritedParamsNode(toNode) {\n\t            // All param values for the node (may include default key/vals, when key was not found in toParams)\n\t            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n\t            // limited to only those keys found in toParams\n\t            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n\t            toParamVals = common_1.omit(toParamVals, toKeys);\n\t            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n\t            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n\t            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n\t            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n\t        }\n\t        // The param keys specified by the incoming toParams\n\t        return toPath.map(makeInheritedParamsNode);\n\t    };\n\t    /**\n\t     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n\t     */\n\t    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\n\t        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n\t        var staticParams = function (state) {\n\t            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));\n\t        };\n\t        var nodesMatch = function (node1, node2) {\n\t            return node1.equals(node2, staticParams(node1.state));\n\t        };\n\t        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n\t            keep++;\n\t        }\n\t        /** Given a retained node, return a new node which uses the to node's param values */\n\t        function applyToParams(retainedNode, idx) {\n\t            var cloned = node_1.PathNode.clone(retainedNode);\n\t            cloned.paramValues = toPath[idx].paramValues;\n\t            return cloned;\n\t        }\n\t        var from, retained, exiting, entering, to;\n\t        from = fromPath;\n\t        retained = from.slice(0, keep);\n\t        exiting = from.slice(keep);\n\t        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n\t        var retainedWithToParams = retained.map(applyToParams);\n\t        entering = toPath.slice(keep);\n\t        to = (retainedWithToParams).concat(entering);\n\t        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n\t    };\n\t    /**\n\t     * Return a subpath of a path, which stops at the first matching node\n\t     *\n\t     * Given an array of nodes, returns a subset of the array starting from the first node,\n\t     * stopping when the first node matches the predicate.\n\t     *\n\t     * @param path a path of [[PathNode]]s\n\t     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n\t     * @returns a subpath up to the matching node, or undefined if no match is found\n\t     */\n\t    PathFactory.subPath = function (path, predicate) {\n\t        var node = common_1.find(path, predicate);\n\t        var elementIdx = path.indexOf(node);\n\t        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n\t    };\n\t    /** Gets the raw parameter values from a path */\n\t    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\n\t    return PathFactory;\n\t}());\n\texports.PathFactory = PathFactory;\n\t//# sourceMappingURL=pathFactory.js.map\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module path */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar param_1 = __webpack_require__(23);\n\t/**\n\t * A node in a [[TreeChanges]] path\n\t *\n\t * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n\t * Each PathNode corresponds to a state being entered, exited, or retained.\n\t * The stateful information includes parameter values and resolve data.\n\t */\n\tvar PathNode = (function () {\n\t    function PathNode(stateOrPath) {\n\t        if (stateOrPath instanceof PathNode) {\n\t            var node = stateOrPath;\n\t            this.state = node.state;\n\t            this.paramSchema = node.paramSchema.slice();\n\t            this.paramValues = common_1.extend({}, node.paramValues);\n\t            this.resolvables = node.resolvables.slice();\n\t            this.views = node.views && node.views.slice();\n\t        }\n\t        else {\n\t            var state = stateOrPath;\n\t            this.state = state;\n\t            this.paramSchema = state.parameters({ inherit: false });\n\t            this.paramValues = {};\n\t            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n\t        }\n\t    }\n\t    /** Sets [[paramValues]] for the node, from the values of an object hash */\n\t    PathNode.prototype.applyRawParams = function (params) {\n\t        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n\t        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n\t        return this;\n\t    };\n\t    /** Gets a specific [[Param]] metadata that belongs to the node */\n\t    PathNode.prototype.parameter = function (name) {\n\t        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n\t    };\n\t    /**\n\t     * @returns true if the state and parameter values for another PathNode are\n\t     * equal to the state and param values for this PathNode\n\t     */\n\t    PathNode.prototype.equals = function (node, keys) {\n\t        var _this = this;\n\t        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }\n\t        var paramValsEq = function (key) {\n\t            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);\n\t        };\n\t        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\n\t    };\n\t    /** Returns a clone of the PathNode */\n\t    PathNode.clone = function (node) {\n\t        return new PathNode(node);\n\t    };\n\t    /**\n\t     * Returns a new path which is a subpath of the first path which matched the second path.\n\t     *\n\t     * The new path starts from root and contains any nodes that match the nodes in the second path.\n\t     * Nodes are compared using their state property and parameter values.\n\t     */\n\t    PathNode.matching = function (pathA, pathB) {\n\t        var matching = [];\n\t        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\n\t            var a = pathA[i], b = pathB[i];\n\t            if (a.state !== b.state)\n\t                break;\n\t            if (!param_1.Param.equals(a.paramSchema, a.paramValues, b.paramValues))\n\t                break;\n\t            matching.push(a);\n\t        }\n\t        return matching;\n\t    };\n\t    return PathNode;\n\t}());\n\texports.PathNode = PathNode;\n\t//# sourceMappingURL=node.js.map\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar urlMatcherConfig_1 = __webpack_require__(24);\n\tvar type_1 = __webpack_require__(25);\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar isShorthand = function (cfg) {\n\t    return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\t};\n\t(function (DefType) {\n\t    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n\t    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n\t    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n\t})(exports.DefType || (exports.DefType = {}));\n\tvar DefType = exports.DefType;\n\tfunction unwrapShorthand(cfg) {\n\t    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n\t    return common_1.extend(cfg, {\n\t        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\n\t    });\n\t}\n\tfunction getType(cfg, urlType, location, id, paramTypes) {\n\t    if (cfg.type && urlType && urlType.name !== 'string')\n\t        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n\t    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\n\t        return paramTypes.type(cfg.type);\n\t    if (urlType)\n\t        return urlType;\n\t    if (!cfg.type)\n\t        return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n\t    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\n\t}\n\t/**\n\t * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n\t */\n\tfunction getSquashPolicy(config, isOptional) {\n\t    var squash = config.squash;\n\t    if (!isOptional || squash === false)\n\t        return false;\n\t    if (!predicates_1.isDefined(squash) || squash == null)\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\n\t    if (squash === true || predicates_1.isString(squash))\n\t        return squash;\n\t    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n\t}\n\tfunction getReplace(config, arrayMode, isOptional, squash) {\n\t    var replace, configuredKeys, defaultPolicy = [\n\t        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n\t        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n\t    ];\n\t    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n\t    if (predicates_1.isString(squash))\n\t        replace.push({ from: squash, to: undefined });\n\t    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n\t    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n\t}\n\tvar Param = (function () {\n\t    function Param(id, type, config, location, paramTypes) {\n\t        config = unwrapShorthand(config);\n\t        type = getType(config, type, location, id, paramTypes);\n\t        var arrayMode = getArrayMode();\n\t        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n\t        var isOptional = config.value !== undefined;\n\t        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n\t        var squash = getSquashPolicy(config, isOptional);\n\t        var replace = getReplace(config, arrayMode, isOptional, squash);\n\t        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n\t        function getArrayMode() {\n\t            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n\t            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n\t            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n\t        }\n\t        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\n\t    }\n\t    Param.prototype.isDefaultValue = function (value) {\n\t        return this.isOptional && this.type.equals(this.value(), value);\n\t    };\n\t    /**\n\t     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n\t     * default value, which may be the result of an injectable function.\n\t     */\n\t    Param.prototype.value = function (value) {\n\t        var _this = this;\n\t        /**\n\t         * [Internal] Get the default value of a parameter, which may be an injectable function.\n\t         */\n\t        var $$getDefaultValue = function () {\n\t            if (!coreservices_1.services.$injector)\n\t                throw new Error(\"Injectable functions cannot be called at configuration time\");\n\t            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n\t            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n\t                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n\t            return defaultValue;\n\t        };\n\t        var $replace = function (val) {\n\t            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\n\t            return replacement.length ? replacement[0] : val;\n\t        };\n\t        value = $replace(value);\n\t        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n\t    };\n\t    Param.prototype.isSearch = function () {\n\t        return this.location === DefType.SEARCH;\n\t    };\n\t    Param.prototype.validates = function (value) {\n\t        // There was no parameter value, but the param is optional\n\t        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\n\t            return true;\n\t        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n\t        var normalized = this.type.$normalize(value);\n\t        if (!this.type.is(normalized))\n\t            return false;\n\t        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n\t        var encoded = this.type.encode(normalized);\n\t        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n\t    };\n\t    Param.prototype.toString = function () {\n\t        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n\t    };\n\t    /** Creates a new [[Param]] from a CONFIG block */\n\t    Param.fromConfig = function (id, type, config, paramTypes) {\n\t        return new Param(id, type, config, DefType.CONFIG, paramTypes);\n\t    };\n\t    /** Creates a new [[Param]] from a url PATH */\n\t    Param.fromPath = function (id, type, config, paramTypes) {\n\t        return new Param(id, type, config, DefType.PATH, paramTypes);\n\t    };\n\t    /** Creates a new [[Param]] from a url SEARCH */\n\t    Param.fromSearch = function (id, type, config, paramTypes) {\n\t        return new Param(id, type, config, DefType.SEARCH, paramTypes);\n\t    };\n\t    Param.values = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\n\t    };\n\t    /**\n\t     * Finds [[Param]] objects which have different param values\n\t     *\n\t     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n\t     *\n\t     * @param params: The list of Param objects to filter\n\t     * @param values1: The first set of parameter values\n\t     * @param values2: the second set of parameter values\n\t     *\n\t     * @returns any Param objects whose values were different between values1 and values2\n\t     */\n\t    Param.changed = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n\t    };\n\t    /**\n\t     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n\t     *\n\t     * @param params The list of [[Param]] objects to check\n\t     * @param values1 The first set of param values\n\t     * @param values2 The second set of param values\n\t     *\n\t     * @returns true if the param values in values1 and values2 are equal\n\t     */\n\t    Param.equals = function (params, values1, values2) {\n\t        if (values1 === void 0) { values1 = {}; }\n\t        if (values2 === void 0) { values2 = {}; }\n\t        return Param.changed(params, values1, values2).length === 0;\n\t    };\n\t    /** Returns true if a the parameter values are valid, according to the Param definitions */\n\t    Param.validates = function (params, values) {\n\t        if (values === void 0) { values = {}; }\n\t        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n\t    };\n\t    return Param;\n\t}());\n\texports.Param = Param;\n\t//# sourceMappingURL=param.js.map\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(5);\n\tvar MatcherConfig = (function () {\n\t    function MatcherConfig() {\n\t        this._isCaseInsensitive = false;\n\t        this._isStrictMode = true;\n\t        this._defaultSquashPolicy = false;\n\t    }\n\t    MatcherConfig.prototype.caseInsensitive = function (value) {\n\t        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n\t    };\n\t    MatcherConfig.prototype.strictMode = function (value) {\n\t        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n\t    };\n\t    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\n\t        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n\t            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n\t        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n\t    };\n\t    return MatcherConfig;\n\t}());\n\texports.MatcherConfig = MatcherConfig;\n\t// TODO: Do not export global instance; create one in UIRouter() constructor\n\texports.matcherConfig = new MatcherConfig();\n\t//# sourceMappingURL=urlMatcherConfig.js.map\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\t/**\n\t * Wraps up a `ParamType` object to handle array values.\n\t */\n\tfunction ArrayType(type, mode) {\n\t    var _this = this;\n\t    // Wrap non-array value as array\n\t    function arrayWrap(val) {\n\t        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);\n\t    }\n\t    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n\t    function arrayUnwrap(val) {\n\t        switch (val.length) {\n\t            case 0: return undefined;\n\t            case 1: return mode === \"auto\" ? val[0] : val;\n\t            default: return val;\n\t        }\n\t    }\n\t    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n\t    function arrayHandler(callback, allTruthyMode) {\n\t        return function handleArray(val) {\n\t            if (predicates_1.isArray(val) && val.length === 0)\n\t                return val;\n\t            var arr = arrayWrap(val);\n\t            var result = common_1.map(arr, callback);\n\t            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n\t        };\n\t    }\n\t    // Wraps type (.equals) functions to operate on each value of an array\n\t    function arrayEqualsHandler(callback) {\n\t        return function handleArray(val1, val2) {\n\t            var left = arrayWrap(val1), right = arrayWrap(val2);\n\t            if (left.length !== right.length)\n\t                return false;\n\t            for (var i = 0; i < left.length; i++) {\n\t                if (!callback(left[i], right[i]))\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t    }\n\t    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\n\t        var paramTypeFn = type[name].bind(type);\n\t        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n\t        _this[name] = wrapperFn(paramTypeFn);\n\t    });\n\t    common_1.extend(this, {\n\t        dynamic: type.dynamic,\n\t        name: type.name,\n\t        pattern: type.pattern,\n\t        is: arrayHandler(type.is.bind(type), true),\n\t        $arrayMode: mode\n\t    });\n\t}\n\t/**\n\t * A class that implements Custom Parameter Type functionality.\n\t *\n\t * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n\t *\n\t * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n\t *\n\t * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n\t *\n\t * @example\n\t * ```\n\t *\n\t * {\n\t *   decode: function(val) { return parseInt(val, 10); },\n\t *   encode: function(val) { return val && val.toString(); },\n\t *   equals: function(a, b) { return this.is(a) && a === b; },\n\t *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n\t *   pattern: /\\d+/\n\t * }\n\t * ```\n\t */\n\tvar ParamType = (function () {\n\t    /**\n\t     * @param def  A configuration object which contains the custom type definition.  The object's\n\t     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n\t     * @returns a new ParamType object\n\t     */\n\t    function ParamType(def) {\n\t        this.pattern = /.*/;\n\t        common_1.extend(this, def);\n\t    }\n\t    // consider these four methods to be \"abstract methods\" that should be overridden\n\t    /** @inheritdoc */\n\t    ParamType.prototype.is = function (val, key) { return true; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.encode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.decode = function (val, key) { return val; };\n\t    /** @inheritdoc */\n\t    ParamType.prototype.equals = function (a, b) { return a == b; };\n\t    ParamType.prototype.$subPattern = function () {\n\t        var sub = this.pattern.toString();\n\t        return sub.substr(1, sub.length - 2);\n\t    };\n\t    ParamType.prototype.toString = function () {\n\t        return \"{ParamType:\" + this.name + \"}\";\n\t    };\n\t    /** Given an encoded string, or a decoded object, returns a decoded object */\n\t    ParamType.prototype.$normalize = function (val) {\n\t        return this.is(val) ? val : this.decode(val);\n\t    };\n\t    /**\n\t     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n\t     * e.g.:\n\t     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n\t     * - url: \"/path?queryParam=1&queryParam=2\n\t     * - $stateParams.queryParam will be [1, 2]\n\t     * if `mode` is \"auto\", then\n\t     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n\t     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n\t     */\n\t    ParamType.prototype.$asArray = function (mode, isSearch) {\n\t        if (!mode)\n\t            return this;\n\t        if (mode === \"auto\" && !isSearch)\n\t            throw new Error(\"'auto' array mode is for query parameters only\");\n\t        return new ArrayType(this, mode);\n\t    };\n\t    return ParamType;\n\t}());\n\texports.ParamType = ParamType;\n\t//# sourceMappingURL=type.js.map\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar urlMatcherFactory_1 = __webpack_require__(27);\n\tvar urlRouter_1 = __webpack_require__(30);\n\tvar state_1 = __webpack_require__(31);\n\tvar urlRouter_2 = __webpack_require__(30);\n\tvar transitionService_1 = __webpack_require__(32);\n\tvar view_1 = __webpack_require__(39);\n\tvar stateRegistry_1 = __webpack_require__(40);\n\tvar stateService_1 = __webpack_require__(45);\n\tvar globals_1 = __webpack_require__(46);\n\t/**\n\t * The master class used to instantiate an instance of UI-Router.\n\t *\n\t * This class instantiates and wires the global UI-Router services.\n\t *\n\t * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n\t * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n\t * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n\t */\n\tvar UIRouter = (function () {\n\t    function UIRouter() {\n\t        this.viewService = new view_1.ViewService();\n\t        this.transitionService = new transitionService_1.TransitionService(this);\n\t        this.globals = new globals_1.Globals(this.transitionService);\n\t        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n\t        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n\t        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\n\t        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n\t        /** @hidden TODO: move this to ng1.ts */\n\t        this.stateProvider = new state_1.StateProvider(this.stateRegistry);\n\t        this.stateService = new stateService_1.StateService(this);\n\t        this.viewService.rootContext(this.stateRegistry.root());\n\t        this.globals.$current = this.stateRegistry.root();\n\t        this.globals.current = this.globals.$current.self;\n\t    }\n\t    return UIRouter;\n\t}());\n\texports.UIRouter = UIRouter;\n\t//# sourceMappingURL=router.js.map\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar urlMatcher_1 = __webpack_require__(28);\n\tvar urlMatcherConfig_1 = __webpack_require__(24);\n\tvar param_1 = __webpack_require__(23);\n\tvar paramTypes_1 = __webpack_require__(29);\n\t/** @hidden */\n\tfunction getDefaultConfig() {\n\t    return {\n\t        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\n\t        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\n\t    };\n\t}\n\t/**\n\t * Factory for [[UrlMatcher]] instances.\n\t *\n\t * The factory is available to ng1 services as\n\t * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n\t */\n\tvar UrlMatcherFactory = (function () {\n\t    function UrlMatcherFactory() {\n\t        this.paramTypes = new paramTypes_1.ParamTypes();\n\t        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n\t    }\n\t    /**\n\t     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n\t     *\n\t     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n\t     * @returns the current value of caseInsensitive\n\t     */\n\t    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\n\t    };\n\t    /**\n\t     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n\t     *\n\t     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n\t     * @returns the current value of strictMode\n\t     */\n\t    UrlMatcherFactory.prototype.strictMode = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.strictMode(value);\n\t    };\n\t    /**\n\t     * Sets the default behavior when generating or matching URLs with default parameter values.\n\t     *\n\t     * @param value A string that defines the default parameter URL squashing behavior.\n\t     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n\t     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n\t     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n\t     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n\t     *             the parameter value from the URL and replace it with this string.\n\t     * @returns the current value of defaultSquashPolicy\n\t     */\n\t    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n\t        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\n\t    };\n\t    /**\n\t     * Creates a [[UrlMatcher]] for the specified pattern.\n\t     *\n\t     * @param pattern  The URL pattern.\n\t     * @param config  The config object hash.\n\t     * @returns The UrlMatcher.\n\t     */\n\t    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n\t        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));\n\t    };\n\t    /**\n\t     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n\t     *\n\t     * @param object  The object to perform the type check against.\n\t     * @returns `true` if the object matches the `UrlMatcher` interface, by\n\t     *          implementing all the same methods.\n\t     */\n\t    UrlMatcherFactory.prototype.isMatcher = function (object) {\n\t        // TODO: typeof?\n\t        if (!predicates_1.isObject(object))\n\t            return false;\n\t        var result = true;\n\t        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n\t            if (predicates_1.isFunction(val))\n\t                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n\t        });\n\t        return result;\n\t    };\n\t    ;\n\t    /**\n\t     * Creates and registers a custom [[ParamType]] object\n\t     *\n\t     * A [[ParamType]] can be used to generate URLs with typed parameters.\n\t     *\n\t     * @param name  The type name.\n\t     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n\t     * @param definitionFn A function that is injected before the app runtime starts.\n\t     *        The result of this function should be a [[ParamTypeDefinition]].\n\t     *        The result is merged into the existing `definition`.\n\t     *        See [[ParamType]] for information on the values accepted.\n\t     *\n\t     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n\t     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n\t     *\n\t     * Note: Register custom types *before using them* in a state definition.\n\t     *\n\t     * See [[ParamTypeDefinition]] for examples\n\t     */\n\t    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n\t        var type = this.paramTypes.type(name, definition, definitionFn);\n\t        return !predicates_1.isDefined(definition) ? type : this;\n\t    };\n\t    ;\n\t    /** @hidden */\n\t    UrlMatcherFactory.prototype.$get = function () {\n\t        this.paramTypes.enqueue = false;\n\t        this.paramTypes._flushTypeQueue();\n\t        return this;\n\t    };\n\t    ;\n\t    return UrlMatcherFactory;\n\t}());\n\texports.UrlMatcherFactory = UrlMatcherFactory;\n\t//# sourceMappingURL=urlMatcherFactory.js.map\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar param_1 = __webpack_require__(23);\n\tvar predicates_2 = __webpack_require__(5);\n\tvar param_2 = __webpack_require__(23);\n\tvar common_2 = __webpack_require__(4);\n\tvar common_3 = __webpack_require__(4);\n\t/** @hidden */\n\tfunction quoteRegExp(string, param) {\n\t    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n\t    if (!param)\n\t        return result;\n\t    switch (param.squash) {\n\t        case false:\n\t            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n\t            break;\n\t        case true:\n\t            result = result.replace(/\\/$/, '');\n\t            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n\t            break;\n\t        default:\n\t            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\n\t            break;\n\t    }\n\t    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n\t}\n\t/** @hidden */\n\tvar memoizeTo = function (obj, prop, fn) {\n\t    return obj[prop] = obj[prop] || fn();\n\t};\n\t/**\n\t * Matches URLs against patterns.\n\t *\n\t * Matches URLs against patterns and extracts named parameters from the path or the search\n\t * part of the URL.\n\t *\n\t * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n\t * parameters. Multiple search parameter names are separated by '&'. Search parameters\n\t * do not influence whether or not a URL is matched, but their values are passed through into\n\t * the matched parameters returned by [[UrlMatcher.exec]].\n\t *\n\t * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n\t * or colon placeholders (`/somePath/:param`).\n\t *\n\t * - *A parameter RegExp* may be defined for a param after a colon\n\t * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n\t * The regexp must match for the url to be matched.\n\t * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n\t *\n\t * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n\t * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n\t *\n\t * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n\t * parameter value will contain the remainder of the URL.\n\t *\n\t * ---\n\t *\n\t * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n\t * must be unique within the pattern (across both path and search parameters).\n\t * A path parameter matches any number of characters other than '/'. For catch-all\n\t * placeholders the path parameter matches any number of characters.\n\t *\n\t * Examples:\n\t *\n\t * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n\t *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n\t * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n\t *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n\t * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n\t * * `'/user/{id:[^/]*}'` - Same as the previous example.\n\t * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n\t *   parameter consists of 1 to 8 hex digits.\n\t * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n\t *   path into the parameter 'path'.\n\t * * `'/files/*path'` - ditto.\n\t * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n\t *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n\t *\n\t */\n\tvar UrlMatcher = (function () {\n\t    /**\n\t     * @param pattern The pattern to compile into a matcher.\n\t     * @param paramTypes The [[ParamTypes]] registry\n\t     * @param config  A configuration object\n\t     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n\t     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n\t     */\n\t    function UrlMatcher(pattern, paramTypes, config) {\n\t        var _this = this;\n\t        this.config = config;\n\t        /** @hidden */\n\t        this._cache = { path: [], pattern: null };\n\t        /** @hidden */\n\t        this._children = [];\n\t        /** @hidden */\n\t        this._params = [];\n\t        /** @hidden */\n\t        this._segments = [];\n\t        /** @hidden */\n\t        this._compiled = [];\n\t        this.pattern = pattern;\n\t        this.config = common_1.defaults(this.config, {\n\t            params: {},\n\t            strict: true,\n\t            caseInsensitive: false,\n\t            paramMap: common_1.identity\n\t        });\n\t        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n\t        //   '*' name\n\t        //   ':' name\n\t        //   '{' name '}'\n\t        //   '{' name ':' regexp '}'\n\t        // The regular expression is somewhat complicated due to the need to allow curly braces\n\t        // inside the regular expression. The placeholder regexp breaks down as follows:\n\t        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n\t        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n\t        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n\t        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n\t        //    \\\\.                            - a backslash escape\n\t        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n\t        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n\t        var checkParamErrors = function (id) {\n\t            if (!UrlMatcher.nameValidator.test(id))\n\t                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n\t                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n\t        };\n\t        // Split into static segments separated by path parameter placeholders.\n\t        // The number of segments is always 1 more than the number of parameters.\n\t        var matchDetails = function (m, isSearch) {\n\t            // IE[78] returns '' for unmatched groups instead of null\n\t            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n\t            return {\n\t                id: id,\n\t                regexp: regexp,\n\t                cfg: _this.config.params[id],\n\t                segment: pattern.substring(last, m.index),\n\t                type: !regexp ? null : paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes.type(\"string\"), {\n\t                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n\t                })\n\t            };\n\t        };\n\t        var p, segment;\n\t        while ((m = placeholder.exec(pattern))) {\n\t            p = matchDetails(m, false);\n\t            if (p.segment.indexOf('?') >= 0)\n\t                break; // we're into the search part\n\t            checkParamErrors(p.id);\n\t            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\n\t            this._segments.push(p.segment);\n\t            patterns.push([p.segment, common_1.tail(this._params)]);\n\t            last = placeholder.lastIndex;\n\t        }\n\t        segment = pattern.substring(last);\n\t        // Find any search parameter names and remove them from the last segment\n\t        var i = segment.indexOf('?');\n\t        if (i >= 0) {\n\t            var search = segment.substring(i);\n\t            segment = segment.substring(0, i);\n\t            if (search.length > 0) {\n\t                last = 0;\n\t                while ((m = searchPlaceholder.exec(search))) {\n\t                    p = matchDetails(m, true);\n\t                    checkParamErrors(p.id);\n\t                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\n\t                    last = placeholder.lastIndex;\n\t                }\n\t            }\n\t        }\n\t        this._segments.push(segment);\n\t        common_1.extend(this, {\n\t            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\n\t            prefix: this._segments[0]\n\t        });\n\t        Object.freeze(this);\n\t    }\n\t    /**\n\t     * Creates a new concatenated UrlMatcher\n\t     *\n\t     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n\t     *\n\t     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n\t     */\n\t    UrlMatcher.prototype.append = function (url) {\n\t        this._children.push(url);\n\t        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\n\t        url._cache.path = this._cache.path.concat(this);\n\t        return url;\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.prototype.isRoot = function () {\n\t        return this._cache.path.length === 0;\n\t    };\n\t    /** Returns the input pattern string */\n\t    UrlMatcher.prototype.toString = function () {\n\t        return this.pattern;\n\t    };\n\t    /**\n\t     * Tests the specified url/path against this matcher.\n\t     *\n\t     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n\t     * parameter values.  Returns null if the path does not match.\n\t     *\n\t     * The returned object contains the values\n\t     * of any search parameters that are mentioned in the pattern, but their value may be null if\n\t     * they are not present in `search`. This means that search parameters are always treated\n\t     * as optional.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n\t     *   x: '1', q: 'hello'\n\t     * });\n\t     * // returns { id: 'bob', q: 'hello', r: null }\n\t     * ```\n\t     *\n\t     * @param path    The URL path to match, e.g. `$location.path()`.\n\t     * @param search  URL search parameters, e.g. `$location.search()`.\n\t     * @param hash    URL hash e.g. `$location.hash()`.\n\t     * @param options\n\t     *\n\t     * @returns The captured parameter values.\n\t     */\n\t    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n\t        var _this = this;\n\t        if (search === void 0) { search = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var match = memoizeTo(this._cache, 'pattern', function () {\n\t            return new RegExp([\n\t                '^',\n\t                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\n\t                _this.config.strict === false ? '\\/?' : '',\n\t                '$'\n\t            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n\t        }).exec(path);\n\t        if (!match)\n\t            return null;\n\t        //options = defaults(options, { isolate: false });\n\t        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n\t        if (nPathSegments !== match.length - 1)\n\t            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n\t        function decodePathArray(string) {\n\t            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n\t            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n\t            var split = reverseString(string).split(/-(?!\\\\)/);\n\t            var allReversed = common_1.map(split, reverseString);\n\t            return common_1.map(allReversed, unquoteDashes).reverse();\n\t        }\n\t        for (var i = 0; i < nPathSegments; i++) {\n\t            var param = pathParams[i];\n\t            var value = match[i + 1];\n\t            // if the param value matches a pre-replace pair, replace the value before decoding.\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (value && param.array === true)\n\t                value = decodePathArray(value);\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        }\n\t        searchParams.forEach(function (param) {\n\t            var value = search[param.id];\n\t            for (var j = 0; j < param.replace.length; j++) {\n\t                if (param.replace[j].from === value)\n\t                    value = param.replace[j].to;\n\t            }\n\t            if (predicates_2.isDefined(value))\n\t                value = param.type.decode(value);\n\t            values[param.id] = param.value(value);\n\t        });\n\t        if (hash)\n\t            values[\"#\"] = hash;\n\t        return values;\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n\t     *\n\t     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n\t     *    pattern has no parameters, an empty array is returned.\n\t     */\n\t    UrlMatcher.prototype.parameters = function (opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        if (opts.inherit === false)\n\t            return this._params;\n\t        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\n\t    };\n\t    /**\n\t     * @hidden\n\t     * Returns a single parameter from this UrlMatcher by id\n\t     *\n\t     * @param id\n\t     * @param opts\n\t     * @returns {T|Param|any|boolean|UrlMatcher|null}\n\t     */\n\t    UrlMatcher.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        var parent = common_1.tail(this._cache.path);\n\t        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\n\t            (opts.inherit !== false && parent && parent.parameter(id)) ||\n\t            null);\n\t    };\n\t    /**\n\t     * Validates the input parameter values against this UrlMatcher\n\t     *\n\t     * Checks an object hash of parameters to validate their correctness according to the parameter\n\t     * types of this `UrlMatcher`.\n\t     *\n\t     * @param params The object hash of parameters to validate.\n\t     * @returns Returns `true` if `params` validates, otherwise `false`.\n\t     */\n\t    UrlMatcher.prototype.validates = function (params) {\n\t        var _this = this;\n\t        var validParamVal = function (param, val) {\n\t            return !param || param.validates(val);\n\t        };\n\t        return common_1.pairs(params || {}).map(function (_a) {\n\t            var key = _a[0], val = _a[1];\n\t            return validParamVal(_this.parameter(key), val);\n\t        }).reduce(common_1.allTrueR, true);\n\t    };\n\t    /**\n\t     * Given a set of parameter values, creates a URL from this UrlMatcher.\n\t     *\n\t     * Creates a URL that matches this pattern by substituting the specified values\n\t     * for the path and search parameters.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n\t     * // returns '/user/bob?q=yes'\n\t     * ```\n\t     *\n\t     * @param values  the values to substitute for the parameters in this pattern.\n\t     * @returns the formatted URL (path and optionally search part).\n\t     */\n\t    UrlMatcher.prototype.format = function (values) {\n\t        if (values === void 0) { values = {}; }\n\t        if (!this.validates(values))\n\t            return null;\n\t        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n\t        var urlMatchers = this._cache.path.slice().concat(this);\n\t        // Extract all the static segments and Params into an ordered array\n\t        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\n\t        // Extract the query params into a separate array\n\t        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\n\t        /**\n\t         * Given a Param,\n\t         * Applies the parameter value, then returns details about it\n\t         */\n\t        function getDetails(param) {\n\t            // Normalize to typed value\n\t            var value = param.value(values[param.id]);\n\t            var isDefaultValue = param.isDefaultValue(value);\n\t            // Check if we're in squash mode for the parameter\n\t            var squash = isDefaultValue ? param.squash : false;\n\t            // Allow the Parameter's Type to encode the value\n\t            var encoded = param.type.encode(value);\n\t            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n\t        }\n\t        // Build up the path-portion from the list of static segments and parameters\n\t        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n\t            // The element is a static segment (a raw string); just append it\n\t            if (predicates_1.isString(x))\n\t                return acc + x;\n\t            // Otherwise, it's a Param.  Fetch details about the parameter value\n\t            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\n\t            // If squash is === true, try to remove a slash from the path\n\t            if (squash === true)\n\t                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n\t            // If squash is a string, use the string for the param value\n\t            if (predicates_1.isString(squash))\n\t                return acc + squash;\n\t            if (squash !== false)\n\t                return acc; // ?\n\t            if (encoded == null)\n\t                return acc;\n\t            // If this parameter value is an array, encode the value using encodeDashes\n\t            if (predicates_1.isArray(encoded))\n\t                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n\t            // If the parameter type is \"raw\", then do not encodeURIComponent\n\t            if (param.type.raw)\n\t                return acc + encoded;\n\t            // Encode the value\n\t            return acc + encodeURIComponent(encoded);\n\t        }, \"\");\n\t        // Build the query string by applying parameter values (array or regular)\n\t        // then mapping to key=value, then flattening and joining using \"&\"\n\t        var queryString = queryParams.map(function (param) {\n\t            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\n\t            if (encoded == null || (isDefaultValue && squash !== false))\n\t                return;\n\t            if (!predicates_1.isArray(encoded))\n\t                encoded = [encoded];\n\t            if (encoded.length === 0)\n\t                return;\n\t            if (!param.type.raw)\n\t                encoded = common_1.map(encoded, encodeURIComponent);\n\t            return encoded.map(function (val) { return (param.id + \"=\" + val); });\n\t        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\n\t        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n\t        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.encodeDashes = function (str) {\n\t        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n\t    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n\t        var staticSegments = matcher._segments;\n\t        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\n\t        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\n\t    };\n\t    /** @hidden Given a matcher, return an array with the matcher's query params */\n\t    UrlMatcher.queryParams = function (matcher) {\n\t        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\n\t    };\n\t    /** @hidden */\n\t    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\t    return UrlMatcher;\n\t}());\n\texports.UrlMatcher = UrlMatcher;\n\t//# sourceMappingURL=urlMatcher.js.map\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar hof_1 = __webpack_require__(6);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar type_1 = __webpack_require__(25);\n\t// Use tildes to pre-encode slashes.\n\t// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n\t// and bidirectional encoding/decoding fails.\n\t// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n\tfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n\tfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\tvar ParamTypes = (function () {\n\t    function ParamTypes() {\n\t        this.enqueue = true;\n\t        this.typeQueue = [];\n\t        this.defaultTypes = {\n\t            \"hash\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /.*/,\n\t                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\n\t            },\n\t            \"string\": {\n\t                encode: valToString,\n\t                decode: valFromString,\n\t                is: hof_1.is(String),\n\t                pattern: /[^/]*/\n\t            },\n\t            \"int\": {\n\t                encode: valToString,\n\t                decode: function (val) { return parseInt(val, 10); },\n\t                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\n\t                pattern: /-?\\d+/\n\t            },\n\t            \"bool\": {\n\t                encode: function (val) { return val && 1 || 0; },\n\t                decode: function (val) { return parseInt(val, 10) !== 0; },\n\t                is: hof_1.is(Boolean),\n\t                pattern: /0|1/\n\t            },\n\t            \"date\": {\n\t                encode: function (val) {\n\t                    return !this.is(val) ? undefined : [\n\t                        val.getFullYear(),\n\t                        ('0' + (val.getMonth() + 1)).slice(-2),\n\t                        ('0' + val.getDate()).slice(-2)\n\t                    ].join(\"-\");\n\t                },\n\t                decode: function (val) {\n\t                    if (this.is(val))\n\t                        return val;\n\t                    var match = this.capture.exec(val);\n\t                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n\t                },\n\t                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n\t                equals: function (l, r) {\n\t                    return ['getFullYear', 'getMonth', 'getDate']\n\t                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n\t                },\n\t                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n\t                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n\t            },\n\t            \"json\": {\n\t                encode: common_1.toJson,\n\t                decode: common_1.fromJson,\n\t                is: hof_1.is(Object),\n\t                equals: common_1.equals,\n\t                pattern: /[^/]*/\n\t            },\n\t            \"any\": {\n\t                encode: common_1.identity,\n\t                decode: common_1.identity,\n\t                equals: common_1.equals,\n\t                pattern: /.*/\n\t            }\n\t        };\n\t        // Register default types. Store them in the prototype of this.types.\n\t        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\n\t        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n\t    }\n\t    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n\t        if (!predicates_1.isDefined(definition))\n\t            return this.types[name];\n\t        if (this.types.hasOwnProperty(name))\n\t            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\t        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\n\t        if (definitionFn) {\n\t            this.typeQueue.push({ name: name, def: definitionFn });\n\t            if (!this.enqueue)\n\t                this._flushTypeQueue();\n\t        }\n\t        return this;\n\t    };\n\t    ParamTypes.prototype._flushTypeQueue = function () {\n\t        while (this.typeQueue.length) {\n\t            var type = this.typeQueue.shift();\n\t            if (type.pattern)\n\t                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n\t            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n\t        }\n\t    };\n\t    return ParamTypes;\n\t}());\n\texports.ParamTypes = ParamTypes;\n\t//# sourceMappingURL=paramTypes.js.map\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module url */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(7);\n\t/** @hidden */\n\tvar $location = coreservices_1.services.location;\n\t/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\n\tfunction regExpPrefix(re) {\n\t    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n\t    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n\t}\n\t/** @hidden Interpolates matched values into a String.replace()-style pattern */\n\tfunction interpolate(pattern, match) {\n\t    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n\t        return match[what === '$' ? 0 : Number(what)];\n\t    });\n\t}\n\t/** @hidden */\n\tfunction handleIfMatch($injector, $stateParams, handler, match) {\n\t    if (!match)\n\t        return false;\n\t    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n\t    return predicates_1.isDefined(result) ? result : true;\n\t}\n\t/** @hidden */\n\tfunction appendBasePath(url, isHtml5, absolute) {\n\t    var baseHref = coreservices_1.services.locationConfig.baseHref();\n\t    if (baseHref === '/')\n\t        return url;\n\t    if (isHtml5)\n\t        return baseHref.slice(0, -1) + url;\n\t    if (absolute)\n\t        return baseHref.slice(1) + url;\n\t    return url;\n\t}\n\t// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n\t/** @hidden */\n\tfunction update(rules, otherwiseFn, evt) {\n\t    if (evt && evt.defaultPrevented)\n\t        return;\n\t    function check(rule) {\n\t        var handled = rule(coreservices_1.services.$injector, $location);\n\t        if (!handled)\n\t            return false;\n\t        if (predicates_1.isString(handled)) {\n\t            $location.setUrl(handled, true);\n\t        }\n\t        return true;\n\t    }\n\t    var n = rules.length;\n\t    for (var i = 0; i < n; i++) {\n\t        if (check(rules[i]))\n\t            return;\n\t    }\n\t    // always check otherwise last to allow dynamic updates to the set of rules\n\t    if (otherwiseFn)\n\t        check(otherwiseFn);\n\t}\n\t/**\n\t * Manages rules for client-side URL\n\t *\n\t * This class manages the router rules for what to do when the URL changes.\n\t */\n\tvar UrlRouterProvider = (function () {\n\t    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\n\t        /** @hidden */\n\t        this.rules = [];\n\t        /** @hidden */\n\t        this.interceptDeferred = false;\n\t        this.$urlMatcherFactory = $urlMatcherFactory;\n\t        this.$stateParams = $stateParams;\n\t    }\n\t    /**\n\t     * Registers a url handler function.\n\t     *\n\t     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n\t     * a redirect, or performs some action.\n\t     *\n\t     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Here's an example of how you might allow case insensitive urls\n\t     *   $urlRouterProvider.rule(function ($injector, $location) {\n\t     *     var path = $location.path(),\n\t     *         normalized = path.toLowerCase();\n\t     *\n\t     *     if (path !== normalized) {\n\t     *       return normalized;\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * Handler function that takes `$injector` and `$location` services as arguments.\n\t     * You can use them to detect a url and return a different url as a string.\n\t     *\n\t     * @return [[$urlRouterProvider]] (`this`)\n\t     */\n\t    UrlRouterProvider.prototype.rule = function (rule) {\n\t        if (!predicates_1.isFunction(rule))\n\t            throw new Error(\"'rule' must be a function\");\n\t        this.rules.push(rule);\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Remove a rule previously registered\n\t     *\n\t     * @param rule the matcher rule that was previously registered using [[rule]]\n\t     * @return true if the rule was found (and removed)\n\t     */\n\t    UrlRouterProvider.prototype.removeRule = function (rule) {\n\t        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;\n\t    };\n\t    /**\n\t     * Defines the path or behavior to use when no url can be matched.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // if the path doesn't match any of the urls you configured\n\t     *   // otherwise will take care of routing the user to the\n\t     *   // specified url\n\t     *   $urlRouterProvider.otherwise('/index');\n\t     *\n\t     *   // Example of using function rule as param\n\t     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n\t     *     return '/a/valid/url';\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param rule\n\t     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n\t     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n\t     *\n\t     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n\t     */\n\t    UrlRouterProvider.prototype.otherwise = function (rule) {\n\t        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\n\t            throw new Error(\"'rule' must be a string or function\");\n\t        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\n\t        return this;\n\t    };\n\t    ;\n\t    /**\n\t     * Registers a handler for a given url matching.\n\t     *\n\t     * If the handler is a string, it is\n\t     * treated as a redirect, and is interpolated according to the syntax of match\n\t     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n\t     *\n\t     * If the handler is a function, it is injectable.\n\t     * It gets invoked if `$location` matches.\n\t     * You have the option of inject the match object as `$match`.\n\t     *\n\t     * The handler can return\n\t     *\n\t     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n\t     *   will continue trying to find another one that matches.\n\t     * - **string** which is treated as a redirect and passed to `$location.url()`\n\t     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n\t     *     if ($state.$current.navigable !== state ||\n\t     *         !equalForKeys($match, $stateParams) {\n\t     *      $state.transitionTo(state, $match, false);\n\t     *     }\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n\t     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n\t     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n\t     *\n\t     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n\t     */\n\t    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {\n\t        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }\n\t        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\n\t        var redirect, handlerIsString = predicates_1.isString(handler);\n\t        // @todo Queue this\n\t        if (predicates_1.isString(what))\n\t            what = $urlMatcherFactory.compile(what);\n\t        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\n\t            throw new Error(\"invalid 'handler' in when()\");\n\t        var strategies = {\n\t            matcher: function (_what, _handler) {\n\t                if (handlerIsString) {\n\t                    redirect = $urlMatcherFactory.compile(_handler);\n\t                    _handler = ['$match', redirect.format.bind(redirect)];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n\t                }, {\n\t                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\n\t                });\n\t            },\n\t            regex: function (_what, _handler) {\n\t                if (_what.global || _what.sticky)\n\t                    throw new Error(\"when() RegExp must not be global or sticky\");\n\t                if (handlerIsString) {\n\t                    redirect = _handler;\n\t                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n\t                }\n\t                return common_1.extend(function () {\n\t                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\n\t                }, {\n\t                    prefix: regExpPrefix(_what)\n\t                });\n\t            }\n\t        };\n\t        var check = {\n\t            matcher: $urlMatcherFactory.isMatcher(what),\n\t            regex: what instanceof RegExp\n\t        };\n\t        for (var n in check) {\n\t            if (check[n]) {\n\t                var rule = strategies[n](what, handler);\n\t                ruleCallback(rule);\n\t                return this.rule(rule);\n\t            }\n\t        }\n\t        throw new Error(\"invalid 'what' in when()\");\n\t    };\n\t    ;\n\t    /**\n\t     * Disables monitoring of the URL.\n\t     *\n\t     * Call this method before UI-Router has bootstrapped.\n\t     * It will stop UI-Router from performing the initial url sync.\n\t     *\n\t     * This can be useful to perform some asynchronous initialization before the router starts.\n\t     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * var app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.config(function ($urlRouterProvider) {\n\t     *   // Prevent $urlRouter from automatically intercepting URL changes;\n\t     *   $urlRouterProvider.deferIntercept();\n\t     * })\n\t     *\n\t     * app.run(function (MyService, $urlRouter, $http) {\n\t     *   $http.get(\"/stuff\").then(function(resp) {\n\t     *     MyService.doStuff(resp.data);\n\t     *     $urlRouter.listen();\n\t     *     $urlRouter.sync();\n\t     *   });\n\t     * });\n\t     * ```\n\t     *\n\t     * @param defer Indicates whether to defer location change interception. Passing\n\t     *        no parameter is equivalent to `true`.\n\t     */\n\t    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n\t        if (defer === undefined)\n\t            defer = true;\n\t        this.interceptDeferred = defer;\n\t    };\n\t    ;\n\t    return UrlRouterProvider;\n\t}());\n\texports.UrlRouterProvider = UrlRouterProvider;\n\tvar UrlRouter = (function () {\n\t    /** @hidden */\n\t    function UrlRouter(urlRouterProvider) {\n\t        this.urlRouterProvider = urlRouterProvider;\n\t        common_1.bindFunctions(UrlRouter.prototype, this, this);\n\t    }\n\t    /**\n\t     * Checks the current URL for a matching rule\n\t     *\n\t     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n\t     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n\t     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n\t     * with the transition by calling `$urlRouter.sync()`.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * angular.module('app', ['ui.router'])\n\t     *   .run(function($rootScope, $urlRouter) {\n\t     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n\t     *       // Halt state change from even starting\n\t     *       evt.preventDefault();\n\t     *       // Perform custom logic\n\t     *       var meetsRequirement = ...\n\t     *       // Continue with the update and state transition if logic allows\n\t     *       if (meetsRequirement) $urlRouter.sync();\n\t     *     });\n\t     * });\n\t     * ```\n\t     */\n\t    UrlRouter.prototype.sync = function () {\n\t        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n\t    };\n\t    /**\n\t     * Starts listening for URL changes\n\t     *\n\t     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n\t     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n\t     */\n\t    UrlRouter.prototype.listen = function () {\n\t        var _this = this;\n\t        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\n\t    };\n\t    /**\n\t     * Internal API.\n\t     */\n\t    UrlRouter.prototype.update = function (read) {\n\t        if (read) {\n\t            this.location = $location.path();\n\t            return;\n\t        }\n\t        if ($location.path() === this.location)\n\t            return;\n\t        $location.setUrl(this.location, true);\n\t    };\n\t    /**\n\t     * Internal API.\n\t     *\n\t     * Pushes a new location to the browser history.\n\t     *\n\t     * @param urlMatcher\n\t     * @param params\n\t     * @param options\n\t     */\n\t    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n\t        var replace = options && !!options.replace;\n\t        $location.setUrl(urlMatcher.format(params || {}), replace);\n\t    };\n\t    /**\n\t     * Builds and returns a URL with interpolated parameters\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n\t     *   person: \"bob\"\n\t     * });\n\t     * // $bob == \"/about/bob\";\n\t     * ```\n\t     *\n\t     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n\t     * @param params An object of parameter values to fill the matcher's required parameters.\n\t     * @param options Options object. The options are:\n\t     *\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n\t     */\n\t    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n\t        if (!urlMatcher.validates(params))\n\t            return null;\n\t        var url = urlMatcher.format(params);\n\t        options = options || { absolute: false };\n\t        var cfg = coreservices_1.services.locationConfig;\n\t        var isHtml5 = cfg.html5Mode();\n\t        if (!isHtml5 && url !== null) {\n\t            url = \"#\" + cfg.hashPrefix() + url;\n\t        }\n\t        url = appendBasePath(url, isHtml5, options.absolute);\n\t        if (!options.absolute || !url) {\n\t            return url;\n\t        }\n\t        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n\t        port = (port === 80 || port === 443 ? '' : ':' + port);\n\t        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n\t    };\n\t    return UrlRouter;\n\t}());\n\texports.UrlRouter = UrlRouter;\n\t//# sourceMappingURL=urlRouter.js.map\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(5);\n\tvar common_1 = __webpack_require__(4);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.$stateProvider\n\t *\n\t * @requires ui.router.router.$urlRouterProvider\n\t * @requires ui.router.util.$urlMatcherFactoryProvider\n\t *\n\t * @description\n\t * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n\t * on state.\n\t *\n\t * A state corresponds to a \"place\" in the application in terms of the overall UI and\n\t * navigation. A state describes (via the controller / template / view properties) what\n\t * the UI looks like and does at that place.\n\t *\n\t * States often have things in common, and the primary way of factoring out these\n\t * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n\t * nested states.\n\t *\n\t * The `$stateProvider` provides interfaces to declare these states for your app.\n\t */\n\tvar StateProvider = (function () {\n\t    function StateProvider(stateRegistry) {\n\t        this.stateRegistry = stateRegistry;\n\t        this.invalidCallbacks = [];\n\t        common_1.bindFunctions(StateProvider.prototype, this, this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$stateProvider#decorator\n\t     * @methodOf ui.router.state.$stateProvider\n\t     *\n\t     * @description\n\t     * Allows you to extend (carefully) or override (at your own peril) the\n\t     * `stateBuilder` object used internally by `$stateProvider`. This can be used\n\t     * to add custom functionality to ui-router, for example inferring templateUrl\n\t     * based on the state name.\n\t     *\n\t     * When passing only a name, it returns the current (original or decorated) builder\n\t     * function that matches `name`.\n\t     *\n\t     * The builder functions that can be decorated are listed below. Though not all\n\t     * necessarily have a good use case for decoration, that is up to you to decide.\n\t     *\n\t     * In addition, users can attach custom decorators, which will generate new\n\t     * properties within the state's internal definition. There is currently no clear\n\t     * use-case for this beyond accessing internal states (i.e. $state.$current),\n\t     * however, expect this to become increasingly relevant as we introduce additional\n\t     * meta-programming features.\n\t     *\n\t     * **Warning**: Decorators should not be interdependent because the order of\n\t     * execution of the builder functions in non-deterministic. Builder functions\n\t     * should only be dependent on the state definition object and super function.\n\t     *\n\t     *\n\t     * Existing builder functions and current return values:\n\t     *\n\t     * - **parent** `{object}` - returns the parent state object.\n\t     * - **data** `{object}` - returns state data, including any inherited data that is not\n\t     *   overridden by own values (if any).\n\t     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n\t     *   or `null`.\n\t     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n\t     *   navigable).\n\t     * - **params** `{object}` - returns an array of state params that are ensured to\n\t     *   be a super-set of parent's params.\n\t     * - **views** `{object}` - returns a views object where each key is an absolute view\n\t     *   name (i.e. \"viewName@stateName\") and each value is the config object\n\t     *   (template, controller) for the view. Even when you don't use the views object\n\t     *   explicitly on a state config, one is still created for you internally.\n\t     *   So by decorating this builder function you have access to decorating template\n\t     *   and controller properties.\n\t     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n\t     *   not including any params defined by ancestor states.\n\t     * - **path** `{string}` - returns the full path from the root down to this state.\n\t     *   Needed for state activation.\n\t     * - **includes** `{object}` - returns an object that includes every state that\n\t     *   would pass a `$state.includes()` test.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * // Override the internal 'views' builder with a function that takes the state\n\t     * // definition, and a reference to the internal function being overridden:\n\t     * $stateProvider.decorator('views', function (state, parent) {\n\t     *   let result = {},\n\t     *       views = parent(state);\n\t     *\n\t     *   angular.forEach(views, function (config, name) {\n\t     *     let autoName = (state.name + '.' + name).replace('.', '/');\n\t     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n\t     *     result[name] = config;\n\t     *   });\n\t     *   return result;\n\t     * });\n\t     *\n\t     * $stateProvider.state('home', {\n\t     *   views: {\n\t     *     'contact.list': { controller: 'ListController' },\n\t     *     'contact.item': { controller: 'ItemController' }\n\t     *   }\n\t     * });\n\t     *\n\t     * // ...\n\t     *\n\t     * $state.go('home');\n\t     * // Auto-populates list and item views with /partials/home/contact/list.html,\n\t     * // and /partials/home/contact/item.html, respectively.\n\t     * </pre>\n\t     *\n\t     * @param {string} name The name of the builder function to decorate.\n\t     * @param {object} func A function that is responsible for decorating the original\n\t     * builder function. The function receives two parameters:\n\t     *\n\t     *   - `{object}` - state - The state config object.\n\t     *   - `{object}` - super - The original builder function.\n\t     *\n\t     * @return {object} $stateProvider - $stateProvider instance\n\t     */\n\t    StateProvider.prototype.decorator = function (name, func) {\n\t        return this.stateRegistry.decorator(name, func) || this;\n\t    };\n\t    StateProvider.prototype.state = function (name, definition) {\n\t        if (predicates_1.isObject(name)) {\n\t            definition = name;\n\t        }\n\t        else {\n\t            definition.name = name;\n\t        }\n\t        this.stateRegistry.register(definition);\n\t        return this;\n\t    };\n\t    /**\n\t     * Registers an invalid state handler\n\t     *\n\t     * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n\t     * state reference parameter\n\t     *\n\t     * This function can be injected with one some special values:\n\t     * - **`$to$`**: TargetState\n\t     * - **`$from$`**: TargetState\n\t     *\n\t     * Note: This API is subject to change.\n\t     * Replacement of dependency injection support with some alternative is likely.\n\t     *\n\t     * @param {function} callback\n\t     *   The function which will be injected and invoked, when a matching transition is started.\n\t     *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n\t     *   is returned, it is treated as a redirect.\n\t     */\n\t    StateProvider.prototype.onInvalid = function (callback) {\n\t        this.invalidCallbacks.push(callback);\n\t    };\n\t    return StateProvider;\n\t}());\n\texports.StateProvider = StateProvider;\n\t//# sourceMappingURL=state.js.map\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transition_1 = __webpack_require__(12);\n\tvar hookRegistry_1 = __webpack_require__(16);\n\tvar resolve_1 = __webpack_require__(33);\n\tvar views_1 = __webpack_require__(34);\n\tvar url_1 = __webpack_require__(35);\n\tvar redirectTo_1 = __webpack_require__(36);\n\tvar onEnterExitRetain_1 = __webpack_require__(37);\n\tvar lazyLoadStates_1 = __webpack_require__(38);\n\t/**\n\t * The default [[Transition]] options.\n\t *\n\t * Include this object when applying custom defaults:\n\t * let reloadOpts = { reload: true, notify: true }\n\t * let options = defaults(theirOpts, customDefaults, defaultOptions);\n\t */\n\texports.defaultTransOpts = {\n\t    location: true,\n\t    relative: null,\n\t    inherit: false,\n\t    notify: true,\n\t    reload: false,\n\t    custom: {},\n\t    current: function () { return null; },\n\t    source: \"unknown\"\n\t};\n\t/**\n\t * This class provides services related to Transitions.\n\t *\n\t * - Most importantly, it allows global Transition Hooks to be registered.\n\t * - It allows the default transition error handler to be set.\n\t * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n\t *\n\t * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n\t */\n\tvar TransitionService = (function () {\n\t    function TransitionService(_router) {\n\t        this._router = _router;\n\t        this.$view = _router.viewService;\n\t        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n\t        this._deregisterHookFns = {};\n\t        this.registerTransitionHooks();\n\t    }\n\t    /** @hidden */\n\t    TransitionService.prototype.registerTransitionHooks = function () {\n\t        var fns = this._deregisterHookFns;\n\t        // Wire up redirectTo hook\n\t        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\n\t        // Wire up onExit/Retain/Enter state hooks\n\t        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\n\t        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\n\t        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\n\t        // Wire up Resolve hooks\n\t        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\n\t        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\n\t        // Wire up the View management hooks\n\t        fns.loadViews = views_1.registerLoadEnteringViews(this);\n\t        fns.activateViews = views_1.registerActivateViews(this);\n\t        // After globals.current is updated at priority: 10000\n\t        fns.updateUrl = url_1.registerUpdateUrl(this);\n\t        // Lazy load state trees\n\t        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);\n\t    };\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /** @inheritdoc */\n\t    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n\t    ;\n\t    /**\n\t     * Creates a new [[Transition]] object\n\t     *\n\t     * This is a factory function for creating new Transition objects.\n\t     * It is used internally by the [[StateService]] and should generally not be called by application code.\n\t     *\n\t     * @param fromPath the path to the current state (the from state)\n\t     * @param targetState the target state (destination)\n\t     * @returns a Transition\n\t     */\n\t    TransitionService.prototype.create = function (fromPath, targetState) {\n\t        return new transition_1.Transition(fromPath, targetState, this._router);\n\t    };\n\t    return TransitionService;\n\t}());\n\texports.TransitionService = TransitionService;\n\t//# sourceMappingURL=transitionService.js.map\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar resolveContext_1 = __webpack_require__(18);\n\tvar hof_1 = __webpack_require__(6);\n\t/**\n\t * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n\t *\n\t * Registered using `transitionService.onStart({}, eagerResolvePath);`\n\t *\n\t * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\tvar eagerResolvePath = function (trans) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .resolvePath(\"EAGER\", trans)\n\t        .then(common_1.noop);\n\t};\n\texports.registerEagerResolvePath = function (transitionService) {\n\t    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\n\t};\n\t/**\n\t * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n\t *\n\t * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n\t *\n\t * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n\t *\n\t * See [[StateDeclaration.resolve]]\n\t */\n\tvar lazyResolveState = function (trans, state) {\n\t    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n\t        .subContext(state)\n\t        .resolvePath(\"LAZY\", trans)\n\t        .then(common_1.noop);\n\t};\n\texports.registerLazyResolveState = function (transitionService) {\n\t    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\n\t};\n\t//# sourceMappingURL=resolve.js.map\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar coreservices_1 = __webpack_require__(7);\n\t/**\n\t * A [[TransitionHookFn]] which waits for the views to load\n\t *\n\t * Registered using `transitionService.onStart({}, loadEnteringViews);`\n\t *\n\t * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n\t * In angular 1, this includes loading the templates.\n\t */\n\tvar loadEnteringViews = function (transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    if (!enteringViews.length)\n\t        return;\n\t    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\n\t};\n\texports.registerLoadEnteringViews = function (transitionService) {\n\t    return transitionService.onStart({}, loadEnteringViews);\n\t};\n\t/**\n\t * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n\t *\n\t * Registered using `transitionService.onSuccess({}, activateViews);`\n\t *\n\t * After a transition is complete, this hook deactivates the old views from the previous state,\n\t * and activates the new views from the destination state.\n\t *\n\t * See [[ViewService]]\n\t */\n\tvar activateViews = function (transition) {\n\t    var enteringViews = transition.views(\"entering\");\n\t    var exitingViews = transition.views(\"exiting\");\n\t    if (!enteringViews.length && !exitingViews.length)\n\t        return;\n\t    var $view = transition.router.viewService;\n\t    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n\t    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n\t    $view.sync();\n\t};\n\texports.registerActivateViews = function (transitionService) {\n\t    return transitionService.onSuccess({}, activateViews);\n\t};\n\t//# sourceMappingURL=views.js.map\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A [[TransitionHookFn]] which updates the URL after a successful transition\n\t *\n\t * Registered using `transitionService.onSuccess({}, updateUrl);`\n\t */\n\tvar updateUrl = function (transition) {\n\t    var options = transition.options();\n\t    var $state = transition.router.stateService;\n\t    var $urlRouter = transition.router.urlRouter;\n\t    // Dont update the url in these situations:\n\t    // The transition was triggered by a URL sync (options.source === 'url')\n\t    // The user doesn't want the url to update (options.location === false)\n\t    // The destination state, and all parents have no navigable url\n\t    if (options.source !== 'url' && options.location && $state.$current.navigable) {\n\t        var urlOptions = { replace: options.location === 'replace' };\n\t        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n\t    }\n\t    $urlRouter.update(true);\n\t};\n\texports.registerUpdateUrl = function (transitionService) {\n\t    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n\t};\n\t//# sourceMappingURL=url.js.map\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module hooks */ /** */\n\tvar predicates_1 = __webpack_require__(5);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar targetState_1 = __webpack_require__(15);\n\t/**\n\t * A [[TransitionHookFn]] that redirects to a different state or params\n\t *\n\t * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n\t *\n\t * See [[StateDeclaration.redirectTo]]\n\t */\n\tvar redirectToHook = function (trans) {\n\t    var redirect = trans.to().redirectTo;\n\t    if (!redirect)\n\t        return;\n\t    function handleResult(result) {\n\t        var $state = trans.router.stateService;\n\t        if (result instanceof targetState_1.TargetState)\n\t            return result;\n\t        if (predicates_1.isString(result))\n\t            return $state.target(result, trans.params(), trans.options());\n\t        if (result['state'] || result['params'])\n\t            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n\t    }\n\t    if (predicates_1.isFunction(redirect)) {\n\t        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n\t    }\n\t    return handleResult(redirect);\n\t};\n\texports.registerRedirectToHook = function (transitionService) {\n\t    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\n\t};\n\t//# sourceMappingURL=redirectTo.js.map\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * A factory which creates an onEnter, onExit or onRetain transition hook function\n\t *\n\t * The returned function invokes the (for instance) state.onEnter hook when the\n\t * state is being entered.\n\t *\n\t * @hidden\n\t */\n\tfunction makeEnterExitRetainHook(hookName) {\n\t    return function (transition, state) {\n\t        var hookFn = state[hookName];\n\t        return hookFn(transition, state);\n\t    };\n\t}\n\t/**\n\t * The [[TransitionStateHookFn]] for onExit\n\t *\n\t * When the state is being exited, the state's .onExit function is invoked.\n\t *\n\t * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n\t *\n\t * See: [[IHookRegistry.onExit]]\n\t */\n\tvar onExitHook = makeEnterExitRetainHook('onExit');\n\texports.registerOnExitHook = function (transitionService) {\n\t    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\n\t};\n\t/**\n\t * The [[TransitionStateHookFn]] for onRetain\n\t *\n\t * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n\t *\n\t * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n\t *\n\t * See: [[IHookRegistry.onRetain]]\n\t */\n\tvar onRetainHook = makeEnterExitRetainHook('onRetain');\n\texports.registerOnRetainHook = function (transitionService) {\n\t    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\n\t};\n\t/**\n\t * The [[TransitionStateHookFn]] for onEnter\n\t *\n\t * When the state is being entered, the state's .onEnter function is invoked.\n\t *\n\t * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n\t *\n\t * See: [[IHookRegistry.onEnter]]\n\t */\n\tvar onEnterHook = makeEnterExitRetainHook('onEnter');\n\texports.registerOnEnterHook = function (transitionService) {\n\t    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\n\t};\n\t//# sourceMappingURL=onEnterExitRetain.js.map\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar coreservices_1 = __webpack_require__(7);\n\t/**\n\t * A [[TransitionHookFn]] that lazy loads a state tree.\n\t *\n\t * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\n\t * - Invoke the `lazyLoad` function\n\t *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\n\t * - Wait for the promise to resolve\n\t * - Deregister the original state \"abc\"\n\t *   - The original state definition is a placeholder for the lazy loaded states\n\t * - Register the new states\n\t * - Retry the transition\n\t *\n\t * See [[StateDeclaration.lazyLoad]]\n\t */\n\tvar lazyLoadHook = function (transition) {\n\t    var toState = transition.to();\n\t    var registry = transition.router.stateRegistry;\n\t    function retryOriginalTransition() {\n\t        if (transition.options().source === 'url') {\n\t            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();\n\t            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };\n\t            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {\n\t                var state = _a[0], params = _a[1];\n\t                return !!params;\n\t            });\n\t            if (matches.length) {\n\t                var _a = matches[0], state = _a[0], params = _a[1];\n\t                return transition.router.stateService.target(state, params, transition.options());\n\t            }\n\t            transition.router.urlRouter.sync();\n\t        }\n\t        // The original transition was not triggered via url sync\n\t        // The lazy state should be loaded now, so re-try the original transition\n\t        var orig = transition.targetState();\n\t        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\n\t    }\n\t    /**\n\t     * Replace the placeholder state with the newly loaded states from the NgModule.\n\t     */\n\t    function updateStateRegistry(result) {\n\t        // deregister placeholder state\n\t        registry.deregister(transition.$to());\n\t        if (result && Array.isArray(result.states)) {\n\t            result.states.forEach(function (state) { return registry.register(state); });\n\t        }\n\t    }\n\t    var hook = toState.lazyLoad;\n\t    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n\t    var promise = hook['_promise'];\n\t    if (!promise) {\n\t        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\n\t        var cleanup = function () { return delete hook['_promise']; };\n\t        promise.catch(cleanup, cleanup);\n\t    }\n\t    return promise.then(retryOriginalTransition);\n\t};\n\texports.registerLazyLoadHook = function (transitionService) {\n\t    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\n\t};\n\t//# sourceMappingURL=lazyLoadStates.js.map\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module view */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar trace_1 = __webpack_require__(13);\n\t/**\n\t * The View service\n\t */\n\tvar ViewService = (function () {\n\t    function ViewService() {\n\t        var _this = this;\n\t        this.uiViews = [];\n\t        this.viewConfigs = [];\n\t        this._viewConfigFactories = {};\n\t        this.sync = function () {\n\t            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n\t            /**\n\t             * Given a ui-view and a ViewConfig, determines if they \"match\".\n\t             *\n\t             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n\t             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n\t             *\n\t             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n\t             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n\t             *\n\t             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n\t             *\n\t             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n\t             * - the ui-view's name matches the ViewConfig's target name\n\t             * - the ui-view's context matches the ViewConfig's anchor\n\t             *\n\t             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n\t             * - There exists a parent ui-view where:\n\t             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n\t             *    - the parent ui-view's context matches the ViewConfig's anchor\n\t             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n\t             *\n\t             * Example:\n\t             *\n\t             * DOM:\n\t             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n\t             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n\t             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n\t             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n\t             *       </div>\n\t             *     </div>\n\t             *   </div>\n\t             * </div>\n\t             *\n\t             * uiViews: [\n\t             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n\t             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n\t             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n\t             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n\t             * ]\n\t             *\n\t             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n\t             *\n\t             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n\t             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n\t             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n\t             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n\t             *\n\t             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n\t             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n\t             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n\t             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n\t             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n\t             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n\t             *   the tail of the ui-view's fqn \"default.bar\"\n\t             */\n\t            var matches = function (uiView) { return function (viewConfig) {\n\t                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n\t                if (uiView.$type !== viewConfig.viewDecl.$type)\n\t                    return false;\n\t                // Split names apart from both viewConfig and uiView into segments\n\t                var vc = viewConfig.viewDecl;\n\t                var vcSegments = vc.$uiViewName.split(\".\");\n\t                var uivSegments = uiView.fqn.split(\".\");\n\t                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n\t                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\t                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n\t                    return false;\n\t                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n\t                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\t                var negOffset = (1 - vcSegments.length) || undefined;\n\t                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n\t                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n\t                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n\t            }; };\n\t            // Return the number of dots in the fully qualified name\n\t            function uiViewDepth(uiView) {\n\t                return uiView.fqn.split(\".\").length;\n\t            }\n\t            // Return the ViewConfig's context's depth in the context tree.\n\t            function viewConfigDepth(config) {\n\t                var context = config.viewDecl.$context, count = 0;\n\t                while (++count && context.parent)\n\t                    context = context.parent;\n\t                return count;\n\t            }\n\t            // Given a depth function, returns a compare function which can return either ascending or descending order\n\t            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n\t            var matchingConfigPair = function (uiView) {\n\t                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\n\t                if (matchingConfigs.length > 1)\n\t                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n\t                return [uiView, matchingConfigs[0]];\n\t            };\n\t            var configureUIView = function (_a) {\n\t                var uiView = _a[0], viewConfig = _a[1];\n\t                // If a parent ui-view is reconfigured, it could destroy child ui-views.\n\t                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n\t                if (_this.uiViews.indexOf(uiView) !== -1)\n\t                    uiView.configUpdated(viewConfig);\n\t            };\n\t            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n\t        };\n\t    }\n\t    ViewService.prototype.rootContext = function (context) {\n\t        return this._rootContext = context || this._rootContext;\n\t    };\n\t    ;\n\t    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\n\t        this._viewConfigFactories[viewType] = factory;\n\t    };\n\t    ViewService.prototype.createViewConfig = function (path, decl) {\n\t        var cfgFactory = this._viewConfigFactories[decl.$type];\n\t        if (!cfgFactory)\n\t            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n\t        var cfgs = cfgFactory(path, decl);\n\t        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n\t    };\n\t    /**\n\t     * De-registers a ViewConfig.\n\t     *\n\t     * @param viewConfig The ViewConfig view to deregister.\n\t     */\n\t    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n\t        common_1.removeFrom(this.viewConfigs, viewConfig);\n\t    };\n\t    ;\n\t    ViewService.prototype.activateViewConfig = function (viewConfig) {\n\t        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n\t        this.viewConfigs.push(viewConfig);\n\t    };\n\t    ;\n\t    /**\n\t     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n\t     * be updated with a template, controller, and local variables.\n\t     *\n\t     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n\t     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n\t     *                   of the view.\n\t     * @return {Function} Returns a de-registration function used when the view is destroyed.\n\t     */\n\t    ViewService.prototype.registerUIView = function (uiView) {\n\t        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n\t        var uiViews = this.uiViews;\n\t        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n\t        if (uiViews.filter(fqnMatches).length)\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\t        uiViews.push(uiView);\n\t        this.sync();\n\t        return function () {\n\t            var idx = uiViews.indexOf(uiView);\n\t            if (idx <= 0) {\n\t                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n\t                return;\n\t            }\n\t            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n\t            common_1.removeFrom(uiViews)(uiView);\n\t        };\n\t    };\n\t    ;\n\t    /**\n\t     * Returns the list of views currently available on the page, by fully-qualified name.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.available = function () {\n\t        return this.uiViews.map(hof_1.prop(\"fqn\"));\n\t    };\n\t    /**\n\t     * Returns the list of views on the page containing loaded content.\n\t     *\n\t     * @return {Array} Returns an array of fully-qualified view names.\n\t     */\n\t    ViewService.prototype.active = function () {\n\t        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n\t    };\n\t    /**\n\t     * Normalizes a view's name from a state.views configuration block.\n\t     *\n\t     * @param context the context object (state declaration) that the view belongs to\n\t     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n\t     *\n\t     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n\t     */\n\t    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n\t        if (rawViewName === void 0) { rawViewName = \"\"; }\n\t        // TODO: Validate incoming view name with a regexp to allow:\n\t        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n\t        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\t        var viewAtContext = rawViewName.split(\"@\");\n\t        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n\t        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n\t        // Handle relative view-name sugar syntax.\n\t        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\t        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\t        if (relativeViewNameSugar) {\n\t            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n\t            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\t            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n\t        }\n\t        if (uiViewName.charAt(0) === '!') {\n\t            uiViewName = uiViewName.substr(1);\n\t            uiViewContextAnchor = \"\"; // target absolutely from root\n\t        }\n\t        // handle parent relative targeting \"^.^.^\"\n\t        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\t        if (relativeMatch.exec(uiViewContextAnchor)) {\n\t            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n\t            uiViewContextAnchor = anchor.name;\n\t        }\n\t        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n\t    };\n\t    return ViewService;\n\t}());\n\texports.ViewService = ViewService;\n\t//# sourceMappingURL=view.js.map\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar stateMatcher_1 = __webpack_require__(41);\n\tvar stateBuilder_1 = __webpack_require__(42);\n\tvar stateQueueManager_1 = __webpack_require__(43);\n\tvar common_1 = __webpack_require__(4);\n\tvar StateRegistry = (function () {\n\t    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\n\t        this.urlRouterProvider = urlRouterProvider;\n\t        this.states = {};\n\t        this.listeners = [];\n\t        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n\t        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\n\t        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\n\t        var rootStateDef = {\n\t            name: '',\n\t            url: '^',\n\t            views: null,\n\t            params: {\n\t                '#': { value: null, type: 'hash', dynamic: true }\n\t            },\n\t            abstract: true\n\t        };\n\t        var _root = this._root = this.stateQueue.register(rootStateDef);\n\t        _root.navigable = null;\n\t    }\n\t    /**\n\t     * Listen for a State Registry events\n\t     *\n\t     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * let allStates = registry.get();\n\t     *\n\t     * // Later, invoke deregisterFn() to remove the listener\n\t     * let deregisterFn = registry.onStatesChanged((event, states) => {\n\t     *   switch(event) {\n\t     *     case: 'registered':\n\t     *       states.forEach(state => allStates.push(state));\n\t     *       break;\n\t     *     case: 'deregistered':\n\t     *       states.forEach(state => {\n\t     *         let idx = allStates.indexOf(state);\n\t     *         if (idx !== -1) allStates.splice(idx, 1);\n\t     *       });\n\t     *       break;\n\t     *   }\n\t     * });\n\t     * ```\n\t     *\n\t     * @param listener a callback function invoked when the registered states changes.\n\t     *        The function receives two parameters, `event` and `state`.\n\t     *        See [[StateRegistryListener]]\n\t     * @return a function that deregisters the listener\n\t     */\n\t    StateRegistry.prototype.onStatesChanged = function (listener) {\n\t        this.listeners.push(listener);\n\t        return function deregisterListener() {\n\t            common_1.removeFrom(this.listeners)(listener);\n\t        }.bind(this);\n\t    };\n\t    /**\n\t     * Gets the implicit root state\n\t     *\n\t     * Gets the root of the state tree.\n\t     * The root state is implicitly created by UI-Router.\n\t     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\n\t     *\n\t     * @return the root [[State]]\n\t     */\n\t    StateRegistry.prototype.root = function () {\n\t        return this._root;\n\t    };\n\t    /**\n\t     * Adds a state to the registry\n\t     *\n\t     * Registers a [[StateDefinition]] or queues it for registration.\n\t     *\n\t     * Note: a state will be queued if the state's parent isn't yet registered.\n\t     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\n\t     *\n\t     * @param stateDefinition the definition of the state to register.\n\t     * @returns the internal [[State]] object.\n\t     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n\t     *          If the state was only queued, then the object is not fully built.\n\t     */\n\t    StateRegistry.prototype.register = function (stateDefinition) {\n\t        return this.stateQueue.register(stateDefinition);\n\t    };\n\t    /** @hidden */\n\t    StateRegistry.prototype._deregisterTree = function (state) {\n\t        var _this = this;\n\t        var all = this.get().map(function (s) { return s.$$state(); });\n\t        var getChildren = function (states) {\n\t            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\n\t            return children.length === 0 ? children : children.concat(getChildren(children));\n\t        };\n\t        var children = getChildren([state]);\n\t        var deregistered = [state].concat(children).reverse();\n\t        deregistered.forEach(function (state) {\n\t            _this.urlRouterProvider.removeRule(state._urlRule);\n\t            delete _this.states[state.name];\n\t        });\n\t        return deregistered;\n\t    };\n\t    /**\n\t     * Removes a state from the registry\n\t     *\n\t     * This removes a state from the registry.\n\t     * If the state has children, they are are also removed from the registry.\n\t     *\n\t     * @param stateOrName the state's name or object representation\n\t     * @returns {State[]} a list of removed states\n\t     */\n\t    StateRegistry.prototype.deregister = function (stateOrName) {\n\t        var _state = this.get(stateOrName);\n\t        if (!_state)\n\t            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n\t        var deregisteredStates = this._deregisterTree(_state.$$state());\n\t        this.listeners.forEach(function (listener) { return listener(\"deregistered\", deregisteredStates.map(function (s) { return s.self; })); });\n\t        return deregisteredStates;\n\t    };\n\t    StateRegistry.prototype.get = function (stateOrName, base) {\n\t        var _this = this;\n\t        if (arguments.length === 0)\n\t            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n\t        var found = this.matcher.find(stateOrName, base);\n\t        return found && found.self || null;\n\t    };\n\t    StateRegistry.prototype.decorator = function (name, func) {\n\t        return this.builder.builder(name, func);\n\t    };\n\t    return StateRegistry;\n\t}());\n\texports.StateRegistry = StateRegistry;\n\t//# sourceMappingURL=stateRegistry.js.map\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar predicates_1 = __webpack_require__(5);\n\tvar glob_1 = __webpack_require__(8);\n\tvar common_1 = __webpack_require__(4);\n\tvar StateMatcher = (function () {\n\t    function StateMatcher(_states) {\n\t        this._states = _states;\n\t    }\n\t    StateMatcher.prototype.isRelative = function (stateName) {\n\t        stateName = stateName || \"\";\n\t        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n\t    };\n\t    StateMatcher.prototype.find = function (stateOrName, base) {\n\t        if (!stateOrName && stateOrName !== \"\")\n\t            return undefined;\n\t        var isStr = predicates_1.isString(stateOrName);\n\t        var name = isStr ? stateOrName : stateOrName.name;\n\t        if (this.isRelative(name))\n\t            name = this.resolvePath(name, base);\n\t        var state = this._states[name];\n\t        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n\t            return state;\n\t        }\n\t        else if (isStr) {\n\t            var matches = common_1.values(this._states)\n\t                .map(function (state) { return ({ state: state, glob: new glob_1.Glob(state.name) }); })\n\t                .filter(function (_a) {\n\t                var state = _a.state, glob = _a.glob;\n\t                return glob.matches(name);\n\t            })\n\t                .map(function (_a) {\n\t                var state = _a.state, glob = _a.glob;\n\t                return state;\n\t            });\n\t            if (matches.length > 1) {\n\t                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\n\t            }\n\t            return matches[0];\n\t        }\n\t        return undefined;\n\t    };\n\t    StateMatcher.prototype.resolvePath = function (name, base) {\n\t        if (!base)\n\t            throw new Error(\"No reference point given for path '\" + name + \"'\");\n\t        var baseState = this.find(base);\n\t        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\t        for (; i < pathLength; i++) {\n\t            if (splitName[i] === \"\" && i === 0) {\n\t                current = baseState;\n\t                continue;\n\t            }\n\t            if (splitName[i] === \"^\") {\n\t                if (!current.parent)\n\t                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n\t                current = current.parent;\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        var relName = splitName.slice(i).join(\".\");\n\t        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n\t    };\n\t    return StateMatcher;\n\t}());\n\texports.StateMatcher = StateMatcher;\n\t//# sourceMappingURL=stateMatcher.js.map\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar strings_1 = __webpack_require__(10);\n\tvar hof_1 = __webpack_require__(6);\n\tvar param_1 = __webpack_require__(23);\n\tvar resolvable_1 = __webpack_require__(20);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar parseUrl = function (url) {\n\t    if (!predicates_1.isString(url))\n\t        return false;\n\t    var root = url.charAt(0) === '^';\n\t    return { val: root ? url.substring(1) : url, root: root };\n\t};\n\tfunction nameBuilder(state) {\n\t    if (state.lazyLoad)\n\t        state.name = state.self.name + \".**\";\n\t    return state.name;\n\t}\n\tfunction selfBuilder(state) {\n\t    state.self.$$state = function () { return state; };\n\t    return state.self;\n\t}\n\tfunction dataBuilder(state) {\n\t    if (state.parent && state.parent.data) {\n\t        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n\t    }\n\t    return state.data;\n\t}\n\tvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n\t    return function urlBuilder(state) {\n\t        var stateDec = state;\n\t        if (stateDec && stateDec.url && stateDec.lazyLoad) {\n\t            stateDec.url += \"{remainder:any}\"; // match any path (.*)\n\t        }\n\t        var parsed = parseUrl(stateDec.url), parent = state.parent;\n\t        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n\t            params: state.params || {},\n\t            paramMap: function (paramConfig, isSearch) {\n\t                if (stateDec.reloadOnSearch === false && isSearch)\n\t                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n\t                return paramConfig;\n\t            }\n\t        });\n\t        if (!url)\n\t            return null;\n\t        if (!$urlMatcherFactoryProvider.isMatcher(url))\n\t            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n\t        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n\t    };\n\t};\n\tvar getNavigableBuilder = function (isRoot) {\n\t    return function navigableBuilder(state) {\n\t        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n\t    };\n\t};\n\tvar getParamsBuilder = function (paramTypes) {\n\t    return function paramsBuilder(state) {\n\t        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };\n\t        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n\t        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n\t        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n\t    };\n\t};\n\tfunction pathBuilder(state) {\n\t    return state.parent ? state.parent.path.concat(state) : [state];\n\t}\n\tfunction includesBuilder(state) {\n\t    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n\t    includes[state.name] = true;\n\t    return includes;\n\t}\n\t/**\n\t * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * validates the `resolve` property and converts it to a [[Resolvable]] array.\n\t *\n\t * resolve: input value can be:\n\t *\n\t * {\n\t *   // analyzed but not injected\n\t *   myFooResolve: function() { return \"myFooData\"; },\n\t *\n\t *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n\t *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; \"DependencyName\" dep as string\n\t *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n\t *\n\t *   // Array split; DependencyType dep as token (compared using ===)\n\t *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n\t *\n\t *   // val.$inject used as deps\n\t *   // where:\n\t *   //     corgeResolve.$inject = [\"DependencyName\"];\n\t *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n\t *   // then \"DependencyName\" dep as string\n\t *   myCorgeResolve: corgeResolve,\n\t *\n\t *  // inject service by name\n\t *  // When a string is found, desugar creating a resolve that injects the named service\n\t *   myGraultResolve: \"SomeService\"\n\t * }\n\t *\n\t * or:\n\t *\n\t * [\n\t *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n\t *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n\t *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n\t * ]\n\t */\n\tfunction resolvablesBuilder(state) {\n\t    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n\t    var objects2Tuples = function (resolveObj, resolvePolicies) {\n\t        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });\n\t    };\n\t    /** fetch DI annotations from a function or ng1-style array */\n\t    var annotate = function (fn) {\n\t        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);\n\t    };\n\t    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n\t    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n\t    /** true if the object looks like a provide literal, or a ng2 Provider */\n\t    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\n\t    /** true if the object looks like a tuple from obj2Tuples */\n\t    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\n\t    /** extracts the token from a Provider or provide literal */\n\t    var token = function (p) { return p.provide || p.token; };\n\t    /** Given a literal resolve or provider object, returns a Resolvable */\n\t    var literal2Resolvable = hof_1.pattern([\n\t        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\n\t        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\n\t        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\n\t        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n\t        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],\n\t    ]);\n\t    var tuple2Resolvable = hof_1.pattern([\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n\t        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n\t    ]);\n\t    var item2Resolvable = hof_1.pattern([\n\t        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\n\t        [isResolveLiteral, literal2Resolvable],\n\t        [isLikeNg2Provider, literal2Resolvable],\n\t        [isTupleFromObj, tuple2Resolvable],\n\t        [hof_1.val(true), function (obj) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(obj)); }]\n\t    ]);\n\t    // If resolveBlock is already an array, use it as-is.\n\t    // Otherwise, assume it's an object and convert to an Array of tuples\n\t    var decl = state.resolve;\n\t    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n\t    return items.map(item2Resolvable);\n\t}\n\texports.resolvablesBuilder = resolvablesBuilder;\n\t/**\n\t * @internalapi A internal global service\n\t *\n\t * StateBuilder is a factory for the internal [[State]] objects.\n\t *\n\t * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n\t * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n\t * [[State]] object, which has an API and is used internally.\n\t *\n\t * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n\t * using the [[builder]] method.\n\t */\n\tvar StateBuilder = (function () {\n\t    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\n\t        this.matcher = matcher;\n\t        var self = this;\n\t        var root = function () { return matcher.find(\"\"); };\n\t        var isRoot = function (state) { return state.name === \"\"; };\n\t        function parentBuilder(state) {\n\t            if (isRoot(state))\n\t                return null;\n\t            return matcher.find(self.parentName(state)) || root();\n\t        }\n\t        this.builders = {\n\t            name: [nameBuilder],\n\t            self: [selfBuilder],\n\t            parent: [parentBuilder],\n\t            data: [dataBuilder],\n\t            // Build a URLMatcher if necessary, either via a relative or absolute URL\n\t            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\n\t            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n\t            navigable: [getNavigableBuilder(isRoot)],\n\t            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],\n\t            // Each framework-specific ui-router implementation should define its own `views` builder\n\t            // e.g., src/ng1/statebuilders/views.ts\n\t            views: [],\n\t            // Keep a full path from the root down to this state as this is needed for state activation.\n\t            path: [pathBuilder],\n\t            // Speed up $state.includes() as it's used a lot\n\t            includes: [includesBuilder],\n\t            resolvables: [resolvablesBuilder]\n\t        };\n\t    }\n\t    /**\n\t     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n\t     * More than one BuilderFunction can be registered for a given property.\n\t     *\n\t     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n\t     *\n\t     * @param name The name of the State property being registered for.\n\t     * @param fn The BuilderFunction which will be used to build the State property\n\t     * @returns a function which deregisters the BuilderFunction\n\t     */\n\t    StateBuilder.prototype.builder = function (name, fn) {\n\t        var builders = this.builders;\n\t        var array = builders[name] || [];\n\t        // Backwards compat: if only one builder exists, return it, else return whole arary.\n\t        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n\t            return array.length > 1 ? array : array[0];\n\t        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n\t            return;\n\t        builders[name] = array;\n\t        builders[name].push(fn);\n\t        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n\t    };\n\t    /**\n\t     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n\t     * properties and API built.\n\t     *\n\t     * @param state an uninitialized State object\n\t     * @returns the built State object\n\t     */\n\t    StateBuilder.prototype.build = function (state) {\n\t        var _a = this, matcher = _a.matcher, builders = _a.builders;\n\t        var parent = this.parentName(state);\n\t        if (parent && !matcher.find(parent))\n\t            return null;\n\t        for (var key in builders) {\n\t            if (!builders.hasOwnProperty(key))\n\t                continue;\n\t            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n\t            state[key] = chain(state);\n\t        }\n\t        return state;\n\t    };\n\t    StateBuilder.prototype.parentName = function (state) {\n\t        var name = state.name || \"\";\n\t        if (name.indexOf('.') !== -1)\n\t            return name.substring(0, name.lastIndexOf('.'));\n\t        if (!state.parent)\n\t            return \"\";\n\t        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t    };\n\t    StateBuilder.prototype.name = function (state) {\n\t        var name = state.name;\n\t        if (name.indexOf('.') !== -1 || !state.parent)\n\t            return name;\n\t        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n\t        return parentName ? parentName + \".\" + name : name;\n\t    };\n\t    return StateBuilder;\n\t}());\n\texports.StateBuilder = StateBuilder;\n\t//# sourceMappingURL=stateBuilder.js.map\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar stateObject_1 = __webpack_require__(44);\n\tvar StateQueueManager = (function () {\n\t    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {\n\t        this.states = states;\n\t        this.builder = builder;\n\t        this.$urlRouterProvider = $urlRouterProvider;\n\t        this.listeners = listeners;\n\t        this.queue = [];\n\t    }\n\t    StateQueueManager.prototype.register = function (config) {\n\t        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\n\t        // Wrap a new object around the state so we can store our private details easily.\n\t        // @TODO: state = new State(extend({}, config, { ... }))\n\t        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\n\t            self: config,\n\t            resolve: config.resolve || [],\n\t            toString: function () { return config.name; }\n\t        }));\n\t        if (!predicates_1.isString(state.name))\n\t            throw new Error(\"State must have a valid name\");\n\t        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\n\t            throw new Error(\"State '\" + state.name + \"' is already defined\");\n\t        queue.push(state);\n\t        if (this.$state) {\n\t            this.flush($state);\n\t        }\n\t        return state;\n\t    };\n\t    StateQueueManager.prototype.flush = function ($state) {\n\t        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n\t        var registered = [], // states that got registered\n\t        orphans = [], // states that dodn't yet have a parent registered\n\t        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n\t        while (queue.length > 0) {\n\t            var state = queue.shift();\n\t            var result = builder.build(state);\n\t            var orphanIdx = orphans.indexOf(state);\n\t            if (result) {\n\t                if (states.hasOwnProperty(state.name))\n\t                    throw new Error(\"State '\" + name + \"' is already defined\");\n\t                states[state.name] = state;\n\t                this.attachRoute($state, state);\n\t                if (orphanIdx >= 0)\n\t                    orphans.splice(orphanIdx, 1);\n\t                registered.push(state);\n\t                continue;\n\t            }\n\t            var prev = previousQueueLength[state.name];\n\t            previousQueueLength[state.name] = queue.length;\n\t            if (orphanIdx >= 0 && prev === queue.length) {\n\t                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n\t                // throw new Error(`Cannot register orphaned state '${state.name}'`);\n\t                queue.push(state);\n\t                return states;\n\t            }\n\t            else if (orphanIdx < 0) {\n\t                orphans.push(state);\n\t            }\n\t            queue.push(state);\n\t        }\n\t        if (registered.length) {\n\t            this.listeners.forEach(function (listener) { return listener(\"registered\", registered.map(function (s) { return s.self; })); });\n\t        }\n\t        return states;\n\t    };\n\t    StateQueueManager.prototype.autoFlush = function ($state) {\n\t        this.$state = $state;\n\t        this.flush($state);\n\t    };\n\t    StateQueueManager.prototype.attachRoute = function ($state, state) {\n\t        var $urlRouterProvider = this.$urlRouterProvider;\n\t        if (state.abstract || !state.url)\n\t            return;\n\t        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n\t                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\n\t                    $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\n\t                }\n\t            }], function (rule) { return state._urlRule = rule; });\n\t    };\n\t    return StateQueueManager;\n\t}());\n\texports.StateQueueManager = StateQueueManager;\n\t//# sourceMappingURL=stateQueueManager.js.map\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/** @module state */ /** for typedoc */\n\t\"use strict\";\n\tvar common_1 = __webpack_require__(4);\n\tvar hof_1 = __webpack_require__(6);\n\t/**\n\t * @ngdoc object\n\t * @name ui.router.state.type:State\n\t *\n\t * @description\n\t * Definition object for states. Includes methods for manipulating the state heirarchy.\n\t *\n\t * @param {Object} config  A configuration object hash that includes the results of user-supplied\n\t *        values, as well as values from `StateBuilder`.\n\t *\n\t * @returns {Object}  Returns a new `State` object.\n\t */\n\tvar State = (function () {\n\t    function State(config) {\n\t        common_1.extend(this, config);\n\t        // Object.freeze(this);\n\t    }\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#is\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Compares the identity of the state against the passed value, which is either an object\n\t     * reference to the actual `State` instance, the original definition object passed to\n\t     * `$stateProvider.state()`, or the fully-qualified name.\n\t     *\n\t     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n\t     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n\t     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n\t     */\n\t    State.prototype.is = function (ref) {\n\t        return this === ref || this.self === ref || this.fqn() === ref;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#fqn\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the fully-qualified name of the state, based on its current position in the tree.\n\t     *\n\t     * @returns {string} Returns a dot-separated name of the state.\n\t     */\n\t    State.prototype.fqn = function () {\n\t        if (!this.parent || !(this.parent instanceof this.constructor))\n\t            return this.name;\n\t        var name = this.parent.fqn();\n\t        return name ? name + \".\" + this.name : this.name;\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.type:State#root\n\t     * @methodOf ui.router.state.type:State\n\t     *\n\t     * @description\n\t     * Returns the root node of this state's tree.\n\t     *\n\t     * @returns {State} The root of this state's tree.\n\t     */\n\t    State.prototype.root = function () {\n\t        return this.parent && this.parent.root() || this;\n\t    };\n\t    State.prototype.parameters = function (opts) {\n\t        opts = common_1.defaults(opts, { inherit: true });\n\t        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n\t        return inherited.concat(common_1.values(this.params));\n\t    };\n\t    State.prototype.parameter = function (id, opts) {\n\t        if (opts === void 0) { opts = {}; }\n\t        return (this.url && this.url.parameter(id, opts) ||\n\t            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n\t            opts.inherit && this.parent && this.parent.parameter(id));\n\t    };\n\t    State.prototype.toString = function () {\n\t        return this.fqn();\n\t    };\n\t    return State;\n\t}());\n\texports.State = State;\n\t//# sourceMappingURL=stateObject.js.map\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module state */ /** */\n\tvar common_1 = __webpack_require__(4);\n\tvar predicates_1 = __webpack_require__(5);\n\tvar queue_1 = __webpack_require__(9);\n\tvar coreservices_1 = __webpack_require__(7);\n\tvar pathFactory_1 = __webpack_require__(21);\n\tvar node_1 = __webpack_require__(22);\n\tvar transitionService_1 = __webpack_require__(32);\n\tvar rejectFactory_1 = __webpack_require__(11);\n\tvar targetState_1 = __webpack_require__(15);\n\tvar param_1 = __webpack_require__(23);\n\tvar glob_1 = __webpack_require__(8);\n\tvar common_2 = __webpack_require__(4);\n\tvar common_3 = __webpack_require__(4);\n\tvar StateService = (function () {\n\t    /** @hidden */\n\t    function StateService(router) {\n\t        this.router = router;\n\t        /** @hidden */\n\t        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n\t            if ($error$ instanceof Error && $error$.stack) {\n\t                console.error($error$);\n\t                console.error($error$.stack);\n\t            }\n\t            else if ($error$ instanceof rejectFactory_1.Rejection) {\n\t                console.error($error$.toString());\n\t                if ($error$.detail && $error$.detail.stack)\n\t                    console.error($error$.detail.stack);\n\t            }\n\t            else {\n\t                console.error($error$);\n\t            }\n\t        };\n\t        var getters = ['current', '$current', 'params', 'transition'];\n\t        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\n\t        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\n\t    }\n\t    Object.defineProperty(StateService.prototype, \"transition\", {\n\t        get: function () { return this.router.globals.transition; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"params\", {\n\t        get: function () { return this.router.globals.params; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"current\", {\n\t        get: function () { return this.router.globals.current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(StateService.prototype, \"$current\", {\n\t        get: function () { return this.router.globals.$current; },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    /**\n\t     * Handler for when [[transitionTo]] is called with an invalid state.\n\t     *\n\t     * Invokes the [[onInvalid]] callbacks, in natural order.\n\t     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n\t     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n\t     *\n\t     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n\t     */\n\t    StateService.prototype._handleInvalidTargetState = function (fromPath, $to$) {\n\t        var _this = this;\n\t        var globals = this.router.globals;\n\t        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n\t        var latest = latestThing();\n\t        var $from$ = pathFactory_1.PathFactory.makeTargetState(fromPath);\n\t        var callbackQueue = new queue_1.Queue(this.router.stateProvider.invalidCallbacks.slice());\n\t        var $q = coreservices_1.services.$q, $injector = coreservices_1.services.$injector;\n\t        var invokeCallback = function (callback) {\n\t            return $q.when($injector.invoke(callback, null, { $to$: $to$, $from$: $from$ }));\n\t        };\n\t        var checkForRedirect = function (result) {\n\t            if (!(result instanceof targetState_1.TargetState)) {\n\t                return;\n\t            }\n\t            var target = result;\n\t            // Recreate the TargetState, in case the state is now defined.\n\t            target = _this.target(target.identifier(), target.params(), target.options());\n\t            if (!target.valid())\n\t                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n\t            if (latestThing() !== latest)\n\t                return rejectFactory_1.Rejection.superseded().toPromise();\n\t            return _this.transitionTo(target.identifier(), target.params(), target.options());\n\t        };\n\t        function invokeNextCallback() {\n\t            var nextCallback = callbackQueue.dequeue();\n\t            if (nextCallback === undefined)\n\t                return rejectFactory_1.Rejection.invalid($to$.error()).toPromise();\n\t            return invokeCallback(nextCallback).then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n\t        }\n\t        return invokeNextCallback();\n\t    };\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#reload\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n\t     * controllers reinstantiated, and events re-fired.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     $state.reload();\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * `reload()` is just an alias for:\n\t     * <pre>\n\t     * $state.transitionTo($state.current, $stateParams, {\n\t     *   reload: true, inherit: false, notify: true\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n\t     * @example\n\t     * <pre>\n\t     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n\t     * //and current state is 'contacts.detail.item'\n\t     * let app angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.reload = function(){\n\t     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n\t     *     $state.reload('contact.detail');\n\t     *   }\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.reload = function (reloadState) {\n\t        return this.transitionTo(this.current, this.params, {\n\t            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n\t            inherit: false,\n\t            notify: false\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#go\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Convenience method for transitioning to a new state. `$state.go` calls\n\t     * `$state.transitionTo` internally but automatically sets options to\n\t     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n\t     * This allows you to easily use an absolute or relative to path and specify\n\t     * only the parameters you'd like to update (while letting unspecified parameters\n\t     * inherit from the currently active ancestor states).\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.go('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n\t     *\n\t     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\n\t     *\n\t     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n\t     * - `$state.go('^')` - will go to a parent state\n\t     * - `$state.go('^.sibling')` - will go to a sibling state\n\t     * - `$state.go('.child.grandchild')` - will go to grandchild state\n\t     *\n\t     * @param {object=} params A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n\t     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n\t     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n\t     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n\t     * will get you all current parameters, etc.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition.\n\t     *\n\t     * Possible success values:\n\t     *\n\t     * - $state.current\n\t     *\n\t     * <br/>Possible rejection values:\n\t     *\n\t     * - 'transition superseded' - when a newer transition has been started after this one\n\t     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n\t     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n\t     *   when a `$stateNotFound` `event.retry` promise errors.\n\t     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n\t     * - *resolve error* - when an error has occurred with a `resolve`\n\t     *\n\t     */\n\t    StateService.prototype.go = function (to, params, options) {\n\t        var defautGoOpts = { relative: this.$current, inherit: true };\n\t        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n\t        return this.transitionTo(to, params, transOpts);\n\t    };\n\t    ;\n\t    /** Factory method for creating a TargetState */\n\t    StateService.prototype.target = function (identifier, params, options) {\n\t        if (options === void 0) { options = {}; }\n\t        // If we're reloading, find the state object to reload from\n\t        if (predicates_1.isObject(options.reload) && !options.reload.name)\n\t            throw new Error('Invalid reload state object');\n\t        var reg = this.router.stateRegistry;\n\t        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n\t        if (options.reload && !options.reloadState)\n\t            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n\t        var stateDefinition = reg.matcher.find(identifier, options.relative);\n\t        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#transitionTo\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n\t     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * let app = angular.module('app', ['ui.router']);\n\t     *\n\t     * app.controller('ctrl', function ($scope, $state) {\n\t     *   $scope.changeState = function () {\n\t     *     $state.transitionTo('contact.detail');\n\t     *   };\n\t     * });\n\t     * </pre>\n\t     *\n\t     * @param {string|object} to State name or state object.\n\t     * @param {object=} toParams A map of the parameters that will be sent to the state,\n\t     * will populate $stateParams.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n\t     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n\t     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n\t     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n\t     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n\t     *    use this when you want to force a reload when *everything* is the same, including search params.\n\t     *\n\t     * @returns {promise} A promise representing the state of the new transition. See\n\t     * {@link ui.router.state.$state#methods_go $state.go}.\n\t     */\n\t    StateService.prototype.transitionTo = function (to, toParams, options) {\n\t        var _this = this;\n\t        if (toParams === void 0) { toParams = {}; }\n\t        if (options === void 0) { options = {}; }\n\t        var router = this.router;\n\t        var globals = router.globals;\n\t        var transHistory = globals.transitionHistory;\n\t        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n\t        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\n\t        var ref = this.target(to, toParams, options);\n\t        var latestSuccess = globals.successfulTransitions.peekTail();\n\t        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\n\t        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n\t        if (!ref.exists())\n\t            return this._handleInvalidTargetState(currentPath, ref);\n\t        if (!ref.valid())\n\t            return common_1.silentRejection(ref.error());\n\t        /**\n\t         * Special handling for Ignored, Aborted, and Redirected transitions\n\t         *\n\t         * The semantics for the transition.run() promise and the StateService.transitionTo()\n\t         * promise differ. For instance, the run() promise may be rejected because it was\n\t         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n\t         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n\t         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n\t         */\n\t        var rejectedTransitionHandler = function (transition) { return function (error) {\n\t            if (error instanceof rejectFactory_1.Rejection) {\n\t                if (error.type === rejectFactory_1.RejectType.IGNORED) {\n\t                    // Consider ignored `Transition.run()` as a successful `transitionTo`\n\t                    router.urlRouter.update();\n\t                    return coreservices_1.services.$q.when(globals.current);\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && error.detail instanceof targetState_1.TargetState) {\n\t                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n\t                    // by returning the promise for the new (redirect) `Transition.run()`.\n\t                    var redirect = transition.redirect(error.detail);\n\t                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n\t                }\n\t                if (error.type === rejectFactory_1.RejectType.ABORTED) {\n\t                    router.urlRouter.update();\n\t                }\n\t            }\n\t            var errorHandler = _this.defaultErrorHandler();\n\t            errorHandler(error);\n\t            return coreservices_1.services.$q.reject(error);\n\t        }; };\n\t        var transition = this.router.transitionService.create(currentPath, ref);\n\t        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n\t        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\t        // Return a promise for the transition, which also has the transition object on it.\n\t        return common_1.extend(transitionToPromise, { transition: transition });\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#is\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n\t     * but only checks for the full state name. If params is supplied then it will be\n\t     * tested for strict equality against the current active params object, so all params\n\t     * must match with none missing and no extras.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // absolute name\n\t     * $state.is('contact.details.item'); // returns true\n\t     * $state.is(contactDetailItemStateObject); // returns true\n\t     *\n\t     * // relative name (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n\t     * to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n\t     * test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it is the state.\n\t     */\n\t    StateService.prototype.is = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (this.$current !== state)\n\t            return false;\n\t        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#includes\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A method to determine if the current active state is equal to or is the child of the\n\t     * state stateName. If any params are passed then they will be tested for a match as well.\n\t     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n\t     *\n\t     * @example\n\t     * Partial and relative names\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item';\n\t     *\n\t     * // Using partial names\n\t     * $state.includes(\"contacts\"); // returns true\n\t     * $state.includes(\"contacts.details\"); // returns true\n\t     * $state.includes(\"contacts.details.item\"); // returns true\n\t     * $state.includes(\"contacts.list\"); // returns false\n\t     * $state.includes(\"about\"); // returns false\n\t     *\n\t     * // Using relative names (. and ^), typically from a template\n\t     * // E.g. from the 'contacts.details' template\n\t     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n\t     * </pre>\n\t     *\n\t     * Basic globbing patterns\n\t     * <pre>\n\t     * $state.$current.name = 'contacts.details.item.url';\n\t     *\n\t     * $state.includes(\"*.details.*.*\"); // returns true\n\t     * $state.includes(\"*.details.**\"); // returns true\n\t     * $state.includes(\"**.item.**\"); // returns true\n\t     * $state.includes(\"*.details.item.url\"); // returns true\n\t     * $state.includes(\"*.details.*.url\"); // returns true\n\t     * $state.includes(\"*.details.*\"); // returns false\n\t     * $state.includes(\"item.**\"); // returns false\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName A partial name, relative name, glob pattern,\n\t     * or state object to be searched for within the current state name.\n\t     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n\t     * that you'd like to test against the current active state.\n\t     * @param {object=} options An options object.  The options are:\n\t     *\n\t     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n\t     * .includes will test relative to `options.relative` state (or name).\n\t     *\n\t     * @returns {boolean} Returns true if it does include the state\n\t     */\n\t    StateService.prototype.includes = function (stateOrName, params, options) {\n\t        options = common_1.defaults(options, { relative: this.$current });\n\t        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n\t        if (glob) {\n\t            if (!glob.matches(this.$current.name))\n\t                return false;\n\t            stateOrName = this.$current.name;\n\t        }\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\t        if (!predicates_1.isDefined(state))\n\t            return undefined;\n\t        if (!predicates_1.isDefined(include[state.name]))\n\t            return false;\n\t        // @TODO Replace with Param.equals() ?\n\t        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n\t    };\n\t    ;\n\t    /**\n\t     * @ngdoc function\n\t     * @name ui.router.state.$state#href\n\t     * @methodOf ui.router.state.$state\n\t     *\n\t     * @description\n\t     * A url generation method that returns the compiled url for the given state populated with the given params.\n\t     *\n\t     * @example\n\t     * <pre>\n\t     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n\t     * </pre>\n\t     *\n\t     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n\t     * @param {object=} params An object of parameter values to fill the state's required parameters.\n\t     * @param {object=} options Options object. The options are:\n\t     *\n\t     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n\t     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n\t     *    ancestor with a valid url).\n\t     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n\t     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n\t     *    defines which state to be relative from.\n\t     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n\t     *\n\t     * @returns {string} compiled state url\n\t     */\n\t    StateService.prototype.href = function (stateOrName, params, options) {\n\t        var defaultHrefOpts = {\n\t            lossy: true,\n\t            inherit: true,\n\t            absolute: false,\n\t            relative: this.$current\n\t        };\n\t        options = common_1.defaults(options, defaultHrefOpts);\n\t        params = params || {};\n\t        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\t        if (!predicates_1.isDefined(state))\n\t            return null;\n\t        if (options.inherit)\n\t            params = this.params.$inherit(params, this.$current, state);\n\t        var nav = (state && options.lossy) ? state.navigable : state;\n\t        if (!nav || nav.url === undefined || nav.url === null) {\n\t            return null;\n\t        }\n\t        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\n\t            absolute: options.absolute\n\t        });\n\t    };\n\t    ;\n\t    /**\n\t     * Sets or gets the default [[transitionTo]] error handler.\n\t     *\n\t     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n\t     * This includes errors caused by resolves and transition hooks.\n\t     *\n\t     * Note:\n\t     * This handler does not receive certain Transition rejections.\n\t     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n\t     *\n\t     * The built-in default error handler logs the error to the console.\n\t     *\n\t     * You can provide your own custom handler.\n\t     *\n\t     * @example\n\t     * ```js\n\t     *\n\t     * stateService.defaultErrorHandler(function() {\n\t     *   // Do not log transitionTo errors\n\t     * });\n\t     * ```\n\t     *\n\t     * @param handler a global error handler function\n\t     * @returns the current global error handler\n\t     */\n\t    StateService.prototype.defaultErrorHandler = function (handler) {\n\t        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n\t    };\n\t    StateService.prototype.get = function (stateOrName, base) {\n\t        var reg = this.router.stateRegistry;\n\t        if (arguments.length === 0)\n\t            return reg.get();\n\t        return reg.get(stateOrName, base || this.$current);\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\t//# sourceMappingURL=stateService.js.map\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module core */ /** */\n\tvar stateParams_1 = __webpack_require__(47);\n\tvar queue_1 = __webpack_require__(9);\n\tvar common_1 = __webpack_require__(4);\n\t/**\n\t * Global mutable state\n\t */\n\tvar Globals = (function () {\n\t    function Globals(transitionService) {\n\t        var _this = this;\n\t        this.params = new stateParams_1.StateParams();\n\t        this.transitionHistory = new queue_1.Queue([], 1);\n\t        this.successfulTransitions = new queue_1.Queue([], 1);\n\t        var beforeNewTransition = function ($transition$) {\n\t            _this.transition = $transition$;\n\t            _this.transitionHistory.enqueue($transition$);\n\t            var updateGlobalState = function () {\n\t                _this.successfulTransitions.enqueue($transition$);\n\t                _this.$current = $transition$.$to();\n\t                _this.current = _this.$current.self;\n\t                common_1.copy($transition$.params(), _this.params);\n\t            };\n\t            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\n\t            var clearCurrentTransition = function () { if (_this.transition === $transition$)\n\t                _this.transition = null; };\n\t            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n\t        };\n\t        transitionService.onBefore({}, beforeNewTransition);\n\t    }\n\t    return Globals;\n\t}());\n\texports.Globals = Globals;\n\t//# sourceMappingURL=globals.js.map\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/** @module params */ /** for typedoc */\n\tvar common_1 = __webpack_require__(4);\n\tvar StateParams = (function () {\n\t    function StateParams(params) {\n\t        if (params === void 0) { params = {}; }\n\t        common_1.extend(this, params);\n\t    }\n\t    /**\n\t     * Merges a set of parameters with all parameters inherited between the common parents of the\n\t     * current state and a given destination state.\n\t     *\n\t     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n\t     * @param {Object} $current Internal definition of object representing the current state.\n\t     * @param {Object} $to Internal definition of object representing state to transition to.\n\t     */\n\t    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n\t        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\t        for (var i in parents) {\n\t            if (!parents[i] || !parents[i].params)\n\t                continue;\n\t            parentParams = Object.keys(parents[i].params);\n\t            if (!parentParams.length)\n\t                continue;\n\t            for (var j in parentParams) {\n\t                if (inheritList.indexOf(parentParams[j]) >= 0)\n\t                    continue;\n\t                inheritList.push(parentParams[j]);\n\t                inherited[parentParams[j]] = this[parentParams[j]];\n\t            }\n\t        }\n\t        return common_1.extend({}, inherited, newParams);\n\t    };\n\t    ;\n\t    return StateParams;\n\t}());\n\texports.StateParams = StateParams;\n\t//# sourceMappingURL=stateParams.js.map\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains code for State Parameters.\n\t *\n\t * See [[ParamDeclaration]]\n\t * @module params\n\t * @preferred doc\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(23));\n\t__export(__webpack_require__(29));\n\t__export(__webpack_require__(47));\n\t__export(__webpack_require__(25));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module path */ /** for typedoc */\n\t__export(__webpack_require__(22));\n\t__export(__webpack_require__(21));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module resolve */ /** for typedoc */\n\t__export(__webpack_require__(19));\n\t__export(__webpack_require__(20));\n\t__export(__webpack_require__(18));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module state */ /** for typedoc */\n\t__export(__webpack_require__(31));\n\t__export(__webpack_require__(42));\n\t__export(__webpack_require__(44));\n\t__export(__webpack_require__(41));\n\t__export(__webpack_require__(43));\n\t__export(__webpack_require__(40));\n\t__export(__webpack_require__(45));\n\t__export(__webpack_require__(15));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/**\n\t * This module contains APIs related to a Transition.\n\t *\n\t * See [[Transition]], [[$transitions]]\n\t *\n\t * @module transition\n\t * @preferred\n\t */\n\t/** for typedoc */\n\t__export(__webpack_require__(17));\n\t__export(__webpack_require__(16));\n\t__export(__webpack_require__(11));\n\t__export(__webpack_require__(12));\n\t__export(__webpack_require__(14));\n\t__export(__webpack_require__(32));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module url */ /** for typedoc */\n\t__export(__webpack_require__(28));\n\t__export(__webpack_require__(24));\n\t__export(__webpack_require__(27));\n\t__export(__webpack_require__(30));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\t/** @module view */ /** for typedoc */\n\t__export(__webpack_require__(39));\n\t//# sourceMappingURL=module.js.map\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/**\n\t * Naive, pure JS implementation of core ui-router services\n\t *\n\t * @module justjs\n\t */ /** */\n\tvar ui_router_core_1 = __webpack_require__(2);\n\tvar ui_router_core_2 = __webpack_require__(2);\n\tvar ui_router_core_3 = __webpack_require__(2);\n\t/** $q-like promise api */\n\tui_router_core_1.services.$q = {\n\t    when: function (val) { return new Promise(function (resolve, reject) { return resolve(val); }); },\n\t    reject: function (val) { return new Promise(function (resolve, reject) { reject(val); }); },\n\t    defer: function () {\n\t        var deferred = {};\n\t        deferred.promise = new Promise(function (resolve, reject) {\n\t            deferred.resolve = resolve;\n\t            deferred.reject = reject;\n\t        });\n\t        return deferred;\n\t    },\n\t    all: function (promises) {\n\t        if (ui_router_core_2.isArray(promises)) {\n\t            return new Promise(function (resolve, reject) {\n\t                var results = [];\n\t                promises.reduce(function (wait4, promise) { return wait4.then(function () { return promise.then(function (val) { return results.push(val); }); }); }, ui_router_core_1.services.$q.when())\n\t                    .then(function () { resolve(results); }, reject);\n\t            });\n\t        }\n\t        if (ui_router_core_2.isObject(promises)) {\n\t            // console.log(\"$q.all({}) Input:\", promises);\n\t            // Convert promises map to promises array.\n\t            // When each promise resolves, map it to a tuple { key: key, val: val }\n\t            var chain = Object.keys(promises)\n\t                .map(function (key) { return promises[key].then(function (val) { return ({ key: key, val: val }); }); });\n\t            // Then wait for all promises to resolve, and convert them back to an object\n\t            return ui_router_core_1.services.$q.all(chain).then(function (values) {\n\t                var value = values.reduce(function (acc, tuple) { acc[tuple.key] = tuple.val; return acc; }, {});\n\t                // console.log(\"$q.all({}) Output:\", value);\n\t                return value;\n\t            });\n\t        }\n\t    }\n\t};\n\t/** angular1-like injector api */\n\t// globally available injectables\n\tvar globals = {};\n\tvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\tvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n\tui_router_core_1.services.$injector = {\n\t    get: function (name) { return globals[name]; },\n\t    has: function (name) { return ui_router_core_1.services.$injector.get(name) != null; },\n\t    invoke: function (fn, context, locals) {\n\t        var all = ui_router_core_3.extend({}, globals, locals || {});\n\t        var params = ui_router_core_1.services.$injector.annotate(fn);\n\t        var ensureExist = ui_router_core_3.assertPredicate(function (key) { return all.hasOwnProperty(key); }, function (key) { return (\"DI can't find injectable: '\" + key + \"'\"); });\n\t        var args = params.filter(ensureExist).map(function (x) { return all[x]; });\n\t        if (ui_router_core_2.isFunction(fn))\n\t            return fn.apply(context, args);\n\t        else\n\t            return fn.slice(-1)[0].apply(context, args);\n\t    },\n\t    annotate: function (fn) {\n\t        if (!ui_router_core_2.isInjectable(fn))\n\t            throw new Error(\"Not an injectable function: \" + fn);\n\t        if (fn && fn.$inject)\n\t            return fn.$inject;\n\t        if (ui_router_core_2.isArray(fn))\n\t            return fn.slice(0, -1);\n\t        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n\t        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n\t        return result || [];\n\t    }\n\t};\n\t/** angular1-like location provider */\n\tvar loc = ui_router_core_1.services.location;\n\tvar hashPrefix = '';\n\tvar baseHref = \"\";\n\tvar locCfg = ui_router_core_1.services.locationConfig;\n\tlocCfg.port = function () { return location.port; };\n\tlocCfg.protocol = function () { return location.protocol; };\n\tlocCfg.host = function () { return location.host; };\n\tlocCfg.baseHref = function (newBaseHref) {\n\t    if (ui_router_core_2.isDefined(newBaseHref)) {\n\t        baseHref = newBaseHref;\n\t    }\n\t    return baseHref;\n\t};\n\tlocCfg.html5Mode = function () { return false; };\n\tlocCfg.hashPrefix = function (newprefix) {\n\t    if (ui_router_core_2.isDefined(newprefix)) {\n\t        hashPrefix = newprefix;\n\t    }\n\t    return hashPrefix;\n\t};\n\tvar beforeAfterSubstr = function (char) { return function (str) {\n\t    if (!str)\n\t        return [\"\", \"\"];\n\t    var idx = str.indexOf(char);\n\t    if (idx === -1)\n\t        return [str, \"\"];\n\t    return [str.substr(0, idx), str.substr(idx + 1)];\n\t}; };\n\tvar splitHash = beforeAfterSubstr(\"#\");\n\tvar splitQuery = beforeAfterSubstr(\"?\");\n\tvar splitEqual = beforeAfterSubstr(\"=\");\n\tvar trimHashVal = function (str) { return str ? str.replace(/^#/, \"\") : \"\"; };\n\tvar keyValsToObjectR = function (accum, _a) {\n\t    var key = _a[0], val = _a[1];\n\t    if (!accum.hasOwnProperty(key)) {\n\t        accum[key] = val;\n\t    }\n\t    else if (ui_router_core_2.isArray(accum[key])) {\n\t        accum[key].push(val);\n\t    }\n\t    else {\n\t        accum[key] = [accum[key], val];\n\t    }\n\t    return accum;\n\t};\n\tvar getParams = function (queryString) { return queryString.split(\"&\").map(splitEqual).reduce(keyValsToObjectR, {}); };\n\t// Location: hash mode or pushstate mode\n\texports.hashLocation = {\n\t    hash: function () {\n\t        return splitHash(trimHashVal(location.hash))[1];\n\t    },\n\t    path: function () {\n\t        return splitHash(splitQuery(trimHashVal(location.hash))[0])[0];\n\t    },\n\t    search: function () {\n\t        return getParams(splitQuery(splitHash(trimHashVal(location.hash))[1])[1]);\n\t    },\n\t    setUrl: function (url, replace) {\n\t        if (replace === void 0) { replace = true; }\n\t        if (url)\n\t            location.hash = url;\n\t    },\n\t    url: function (url) {\n\t        return loc.path();\n\t    },\n\t    onChange: function (cb) { return window.addEventListener(\"hashchange\", cb, false); }\n\t};\n\texports.pushStateLocation = {\n\t    hash: function () {\n\t        return trimHashVal(location.hash);\n\t    },\n\t    path: function () {\n\t        var base = locCfg.baseHref();\n\t        var path = location.pathname;\n\t        var idx = path.indexOf(base);\n\t        if (idx !== 0)\n\t            throw new Error(\"current url: \" + path + \" does not start with <base> tag \" + base);\n\t        return path.substr(base.length);\n\t    },\n\t    search: function () {\n\t        return getParams(splitQuery(location.search)[1]);\n\t    },\n\t    setUrl: function (url, replace) {\n\t        if (replace === void 0) { replace = false; }\n\t        if (ui_router_core_2.isDefined(url)) {\n\t            if (replace)\n\t                history.replaceState(null, null, locCfg.baseHref() + url);\n\t            else\n\t                history.pushState(null, null, locCfg.baseHref() + url);\n\t        }\n\t    },\n\t    url: function (url) {\n\t        var hash = loc.hash();\n\t        return loc.path() + (hash ? \"#\" + hash : \"\");\n\t    },\n\t    onChange: function (cb) { return window.addEventListener(\"popstate\", cb, false); }\n\t};\n\tObject.assign(loc, exports.hashLocation);\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar ui_router_core_1 = __webpack_require__(2);\n\t/**\n\t * This is a [[StateBuilder.builder]] function for react `views`.\n\t *\n\t * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n\t * handles the `views` property with logic specific to ui-router-react.\n\t *\n\t * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n\t * applies the state-level configuration to a view named `$default`.\n\t */\n\tfunction reactViewsBuilder(state) {\n\t    var views = {}, viewsDefinitionObject;\n\t    if (!state.views) {\n\t        viewsDefinitionObject = { \"$default\": ui_router_core_1.pick(state, \"component\") };\n\t    }\n\t    else {\n\t        viewsDefinitionObject = ui_router_core_1.map(state.views, function (val, key) {\n\t            if (val.component)\n\t                return val;\n\t            return { component: val };\n\t        });\n\t    }\n\t    ui_router_core_1.forEach(viewsDefinitionObject, function (config, name) {\n\t        name = name || \"$default\"; // Account for views: { \"\": { template... } }\n\t        if (Object.keys(config).length == 0)\n\t            return;\n\t        config.$type = \"react\";\n\t        config.$context = state;\n\t        config.$name = name;\n\t        var normalized = ui_router_core_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);\n\t        config.$uiViewName = normalized.uiViewName;\n\t        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\t        views[name] = config;\n\t    });\n\t    return views;\n\t}\n\texports.reactViewsBuilder = reactViewsBuilder;\n\tvar id = 0;\n\tvar ReactViewConfig = (function () {\n\t    function ReactViewConfig(path, viewDecl) {\n\t        this.path = path;\n\t        this.viewDecl = viewDecl;\n\t        this.loaded = true;\n\t        this.$id = id++;\n\t    }\n\t    ReactViewConfig.prototype.load = function () {\n\t        return ui_router_core_1.services.$q.when(this);\n\t    };\n\t    return ReactViewConfig;\n\t}());\n\texports.ReactViewConfig = ReactViewConfig;\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar react_1 = __webpack_require__(58);\n\tvar ui_router_core_1 = __webpack_require__(2);\n\tvar index_1 = __webpack_require__(1);\n\tvar id = 0;\n\tvar UIView = (function (_super) {\n\t    __extends(UIView, _super);\n\t    function UIView() {\n\t        _super.apply(this, arguments);\n\t        this.state = {\n\t            loaded: false,\n\t            component: 'div',\n\t            props: {}\n\t        };\n\t    }\n\t    UIView.prototype.render = function () {\n\t        var _this = this;\n\t        var children = this.props.children;\n\t        var _a = this.state, component = _a.component, props = _a.props, loaded = _a.loaded;\n\t        // register reference of child component\n\t        // register new hook right after component has been rendered\n\t        var stateName = this.uiViewAddress && this.uiViewAddress.context && this.uiViewAddress.context.name;\n\t        props.ref = function (c) {\n\t            _this.componentInstance = c;\n\t            _this.registerUiCanExitHook(stateName);\n\t        };\n\t        var child = !loaded && react_1.isValidElement(children)\n\t            ? react_1.cloneElement(children, props)\n\t            : react_1.createElement(component, props);\n\t        return child;\n\t    };\n\t    UIView.prototype.getChildContext = function () {\n\t        return {\n\t            parentUIViewAddress: this.uiViewAddress\n\t        };\n\t    };\n\t    UIView.prototype.componentWillMount = function () {\n\t        var router = index_1.default.instance;\n\t        // Check the context for the parent UIView's fqn and State\n\t        var parent = this.context['parentUIViewAddress'];\n\t        // Not found in context, this is a root UIView\n\t        parent = parent || { fqn: \"\", context: router.stateRegistry.root() };\n\t        var name = this.props.name || \"$default\";\n\t        this.uiViewData = {\n\t            $type: 'react',\n\t            id: ++id,\n\t            name: name,\n\t            fqn: parent.fqn ? parent.fqn + \".\" + name : name,\n\t            creationContext: parent.context,\n\t            configUpdated: this.viewConfigUpdated.bind(this),\n\t            config: undefined\n\t        };\n\t        this.uiViewAddress = { fqn: this.uiViewData.fqn, context: undefined };\n\t        this.deregister = router.viewService.registerUIView(this.uiViewData);\n\t        this.setState({ id: this.uiViewData.id });\n\t    };\n\t    UIView.prototype.componentWillUnmount = function () {\n\t        this.deregister();\n\t    };\n\t    UIView.prototype.viewConfigUpdated = function (newConfig) {\n\t        var newComponent = newConfig && newConfig.viewDecl && newConfig.viewDecl.component;\n\t        var trans = undefined, resolves = {};\n\t        if (newConfig) {\n\t            var context = newConfig.viewDecl && newConfig.viewDecl.$context;\n\t            this.uiViewAddress = { fqn: this.uiViewAddress.fqn, context: context };\n\t            var ctx = new ui_router_core_1.ResolveContext(newConfig.path);\n\t            trans = ctx.getResolvable(ui_router_core_1.Transition).data;\n\t            var stringTokens = trans.getResolveTokens().filter(function (x) { return typeof x === 'string'; });\n\t            resolves = stringTokens.map(function (token) { return [token, trans.getResolveValue(token)]; }).reduce(ui_router_core_1.applyPairs, {});\n\t        }\n\t        this.uiViewData.config = newConfig;\n\t        var props = { resolves: resolves, transition: trans };\n\t        // attach any style or className to the rendered component\n\t        // specified on the UIView itself\n\t        var styleProps = {};\n\t        if (this.props.className)\n\t            styleProps.className = this.props.className;\n\t        if (this.props.className)\n\t            styleProps.style = this.props.style;\n\t        this.setState({\n\t            component: newComponent || 'div',\n\t            props: newComponent ? ui_router_core_1.extend(props, styleProps) : styleProps,\n\t            loaded: newComponent ? true : false\n\t        });\n\t    };\n\t    UIView.prototype.registerUiCanExitHook = function (stateName) {\n\t        typeof this.removeHook === 'function' && this.removeHook();\n\t        var criteria = { exiting: stateName };\n\t        var callback = this.componentInstance && typeof this.componentInstance.uiCanExit === 'function' && this.componentInstance.uiCanExit;\n\t        if (stateName && callback) {\n\t            var transitions = index_1.default.instance.transitionService;\n\t            this.removeHook = transitions.onBefore(criteria, callback, {});\n\t        }\n\t    };\n\t    UIView.propTypes = {\n\t        name: react_1.PropTypes.string,\n\t        className: react_1.PropTypes.string,\n\t        style: react_1.PropTypes.object\n\t    };\n\t    UIView.childContextTypes = {\n\t        parentUIViewAddress: react_1.PropTypes.object\n\t    };\n\t    UIView.contextTypes = {\n\t        parentUIViewAddress: react_1.PropTypes.object\n\t    };\n\t    return UIView;\n\t}(react_1.Component));\n\texports.UIView = UIView;\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_58__;\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar react_1 = __webpack_require__(58);\n\tvar classNames = __webpack_require__(60);\n\tvar index_1 = __webpack_require__(1);\n\tvar ui_router_core_1 = __webpack_require__(2);\n\tvar UISref = (function (_super) {\n\t    __extends(UISref, _super);\n\t    function UISref() {\n\t        var _this = this;\n\t        _super.apply(this, arguments);\n\t        this.getOptions = function () {\n\t            var parent = _this.context['parentUIViewAddress'];\n\t            var parentContext = parent && parent.context || index_1.default.instance.stateRegistry.root();\n\t            var defOpts = { relative: parentContext, inherit: true };\n\t            return ui_router_core_1.extend(defOpts, _this.props.options || {});\n\t        };\n\t        this.handleClick = function (e) {\n\t            if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {\n\t                e.preventDefault();\n\t                var params = _this.props.params || {};\n\t                var to = _this.props.to;\n\t                var options = _this.getOptions();\n\t                index_1.default.instance.stateService.go(to, params, options);\n\t            }\n\t        };\n\t    }\n\t    UISref.prototype.componentWillMount = function () {\n\t        var addStateInfo = this.context['parentUiSrefActiveAddStateInfo'];\n\t        this.deregister = typeof addStateInfo === 'function'\n\t            ? addStateInfo(this.props.to, this.props.params)\n\t            : function () { };\n\t    };\n\t    UISref.prototype.componentWillUnmount = function () {\n\t        this.deregister();\n\t    };\n\t    UISref.prototype.render = function () {\n\t        var params = this.props.params || {}, to = this.props.to, options = this.getOptions();\n\t        var childrenProps = this.props.children.props;\n\t        var props = Object.assign({}, childrenProps, {\n\t            onClick: this.handleClick,\n\t            href: index_1.default.instance.stateService.href(to, params, options),\n\t            className: classNames(this.props.className, childrenProps.className)\n\t        });\n\t        return react_1.cloneElement(this.props.children, props);\n\t    };\n\t    UISref.propTypes = {\n\t        children: react_1.PropTypes.element.isRequired,\n\t        to: react_1.PropTypes.string.isRequired,\n\t        params: react_1.PropTypes.object,\n\t        options: react_1.PropTypes.object,\n\t        className: react_1.PropTypes.string\n\t    };\n\t    UISref.contextTypes = {\n\t        parentUIViewAddress: react_1.PropTypes.object,\n\t        parentUiSrefActiveAddStateInfo: react_1.PropTypes.func\n\t    };\n\t    return UISref;\n\t}(react_1.Component));\n\texports.UISref = UISref;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  Copyright (c) 2016 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\t/* global define */\n\t\n\t(function () {\n\t\t'use strict';\n\t\n\t\tvar hasOwn = {}.hasOwnProperty;\n\t\n\t\tfunction classNames () {\n\t\t\tvar classes = [];\n\t\n\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\tvar arg = arguments[i];\n\t\t\t\tif (!arg) continue;\n\t\n\t\t\t\tvar argType = typeof arg;\n\t\n\t\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\t\tclasses.push(arg);\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn classes.join(' ');\n\t\t}\n\t\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\tmodule.exports = classNames;\n\t\t} else if (true) {\n\t\t\t// register as 'classnames', consistent with npm package name\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\t\treturn classNames;\n\t\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else {\n\t\t\twindow.classNames = classNames;\n\t\t}\n\t}());\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar react_1 = __webpack_require__(58);\n\tvar classNames = __webpack_require__(60);\n\tvar index_1 = __webpack_require__(1);\n\tvar UISrefActive = (function (_super) {\n\t    __extends(UISrefActive, _super);\n\t    function UISrefActive() {\n\t        var _this = this;\n\t        _super.apply(this, arguments);\n\t        // keep track of states to watch and their activeClasses\n\t        this.states = [];\n\t        this.activeClasses = {};\n\t        this.addStateInfo = function (stateName, stateParams) {\n\t            var activeClass = _this.props.class;\n\t            var deregister = _this.addState(stateName, stateParams, activeClass);\n\t            _this.forceUpdate();\n\t            return deregister;\n\t        };\n\t        this.addState = function (stateName, stateParams, activeClass) {\n\t            var stateService = index_1.default.instance.stateService;\n\t            var parent = _this.context['parentUIViewAddress'];\n\t            var stateContext = parent && parent.context || index_1.default.instance.stateRegistry.root();\n\t            var state = stateService.get(stateName, stateContext);\n\t            var stateHash = _this.createStateHash(stateName, stateParams);\n\t            var stateInfo = {\n\t                state: state || { name: stateName },\n\t                params: stateParams,\n\t                hash: stateHash\n\t            };\n\t            _this.states.push(stateInfo);\n\t            _this.activeClasses[stateHash] = activeClass;\n\t            return function () {\n\t                var idx = _this.states.indexOf(stateInfo);\n\t                if (idx !== -1)\n\t                    _this.states.splice(idx, 1);\n\t            };\n\t        };\n\t        this.createStateHash = function (state, params) {\n\t            if (typeof state !== 'string') {\n\t                throw new Error('state should be a string');\n\t            }\n\t            return params && typeof params === 'object'\n\t                ? state + JSON.stringify(params)\n\t                : state;\n\t        };\n\t        this.getActiveClasses = function () {\n\t            var activeClasses = [];\n\t            var stateService = index_1.default.instance.stateService;\n\t            var exact = _this.props.exact;\n\t            _this.states.forEach(function (s) {\n\t                var state = s.state, params = s.params, hash = s.hash;\n\t                if (!exact && stateService.includes(state.name, params))\n\t                    activeClasses.push(_this.activeClasses[hash]);\n\t                if (exact && stateService.is(state.name, params))\n\t                    activeClasses.push(_this.activeClasses[hash]);\n\t            });\n\t            return activeClasses;\n\t        };\n\t    }\n\t    UISrefActive.prototype.getChildContext = function () {\n\t        return {\n\t            parentUiSrefActiveAddStateInfo: this.addStateInfo\n\t        };\n\t    };\n\t    UISrefActive.prototype.componentWillMount = function () {\n\t        var _this = this;\n\t        // register callback for state change\n\t        this.deregister = index_1.default.instance.transitionService.onSuccess({}, function () { return _this.forceUpdate(); });\n\t    };\n\t    UISrefActive.prototype.componentWillUnmount = function () {\n\t        this.deregister();\n\t    };\n\t    UISrefActive.prototype.render = function () {\n\t        var activeClasses = this.getActiveClasses();\n\t        return activeClasses.length > 0\n\t            ? react_1.cloneElement(this.props.children, Object.assign({}, this.props.children.props, {\n\t                className: classNames(this.props.children.props.className, activeClasses)\n\t            }))\n\t            : this.props.children;\n\t    };\n\t    UISrefActive.propTypes = {\n\t        class: react_1.PropTypes.string.isRequired,\n\t        children: react_1.PropTypes.element.isRequired\n\t    };\n\t    UISrefActive.contextTypes = {\n\t        parentUIViewAddress: react_1.PropTypes.object\n\t    };\n\t    UISrefActive.childContextTypes = {\n\t        parentUiSrefActiveAddStateInfo: react_1.PropTypes.func\n\t    };\n\t    return UISrefActive;\n\t}(react_1.Component));\n\texports.UISrefActive = UISrefActive;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ui-router-react.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2f467fd00663b8ca481f\n **/","import {trace, UIRouter, PathNode, services} from 'ui-router-core';\nimport './justjs';\nimport {hashLocation, pushStateLocation} from './justjs';\nimport {ReactViewConfig, reactViewsBuilder} from \"./ui-router-react\"\nimport {ReactViewDeclaration, ReactStateDeclaration} from \"./interface\"\nimport {UIView} from \"./components/UIView\";\nimport {UISref} from \"./components/UISref\";\nimport {UISrefActive} from \"./components/UISrefActive\";\n\n// Set up view config factory\nlet viewConfigFactory = (node: [PathNode], config: ReactViewDeclaration) =>\n  new ReactViewConfig(node, config);\n\nexport default class UIRouterReact extends UIRouter {\n  static instance;\n  constructor() {\n    super();\n    this.viewService.viewConfigFactory('react', viewConfigFactory);\n    this.stateRegistry.decorator(\"views\", reactViewsBuilder);\n    UIRouterReact.instance = this;\n  }\n  start(): void {\n    this.stateRegistry.stateQueue.autoFlush(this.stateService);\n    this.urlRouter.listen();\n    this.urlRouter.sync();\n  }\n  html5Mode (mode: Boolean): void {\n    if (mode === true) {\n      let loc = <any> services.location;\n      let locCfg = <any> services.locationConfig;\n      locCfg.html5Mode = () => true;\n      Object.assign(loc, pushStateLocation);\n    }\n  }\n}\n\nexport {\n    UIView,\n    UISref,\n    UISrefActive,\n    ReactStateDeclaration,\n    trace\n}\n\n\n/** WEBPACK FOOTER **\n ** ./_src/index.ts\n **/","/** @module common */ /** */\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(require(\"./common/module\"));\n__export(require(\"./params/module\"));\n__export(require(\"./path/module\"));\n__export(require(\"./resolve/module\"));\n__export(require(\"./state/module\"));\n__export(require(\"./transition/module\"));\n__export(require(\"./url/module\"));\n__export(require(\"./view/module\"));\n__export(require(\"./globals\"));\nvar router_1 = require(\"./router\");\nexports.UIRouter = router_1.UIRouter;\n//# sourceMappingURL=core.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/core.js\n ** module id = 2\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module common */ /** for typedoc */\n__export(require(\"./common\"));\n__export(require(\"./coreservices\"));\n__export(require(\"./glob\"));\n__export(require(\"./hof\"));\n__export(require(\"./predicates\"));\n__export(require(\"./queue\"));\n__export(require(\"./strings\"));\n__export(require(\"./trace\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/module.js\n ** module id = 3\n ** module chunks = 0 1\n **/","/**\n * Random utility functions used in the UI-Router code\n *\n * @preferred @module common\n */ /** for typedoc */\n\"use strict\";\nvar predicates_1 = require(\"./predicates\");\nvar hof_1 = require(\"./hof\");\nvar coreservices_1 = require(\"./coreservices\");\nvar w = typeof window === 'undefined' ? {} : window;\nvar angular = w.angular || {};\nexports.fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexports.toJson = angular.toJson || JSON.stringify.bind(JSON);\nexports.copy = angular.copy || _copy;\nexports.forEach = angular.forEach || _forEach;\nexports.extend = angular.extend || _extend;\nexports.equals = angular.equals || _equals;\nexports.identity = function (x) { return x; };\nexports.noop = function () { return undefined; };\n/**\n * Binds and copies functions onto an object\n *\n * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions\n * on the 'to' object.\n *\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * @example\n * ```\n *\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * This example creates a bound version of a service function, and copies it to another object\n * @example\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param from The object which contains the functions to be bound\n * @param to The object which will receive the bound functions\n * @param bindTo The object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n */\nfunction bindFunctions(from, to, bindTo, fnNames) {\n    if (fnNames === void 0) { fnNames = Object.keys(from); }\n    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })\n        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });\n}\nexports.bindFunctions = bindFunctions;\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexports.inherit = function (parent, extra) {\n    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);\n};\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nvar restArgs = function (args, idx) {\n    if (idx === void 0) { idx = 0; }\n    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n};\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexports.inArray = function (array, obj) {\n    return array.indexOf(obj) !== -1;\n};\n/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */\nexports.removeFrom = hof_1.curry(function (array, obj) {\n    var idx = array.indexOf(obj);\n    if (idx >= 0)\n        array.splice(idx, 1);\n    return array;\n});\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nfunction defaults(opts) {\n    if (opts === void 0) { opts = {}; }\n    var defaultsList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        defaultsList[_i - 1] = arguments[_i];\n    }\n    var defaults = merge.apply(null, [{}].concat(defaultsList));\n    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));\n}\nexports.defaults = defaults;\n/**\n * Merges properties from the list of objects to the destination object.\n * If a property already exists in the destination object, then it is not overwritten.\n */\nfunction merge(dst) {\n    var objs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        objs[_i - 1] = arguments[_i];\n    }\n    exports.forEach(objs, function (obj) {\n        exports.forEach(obj, function (value, key) {\n            if (!dst.hasOwnProperty(key))\n                dst[key] = value;\n        });\n    });\n    return dst;\n}\nexports.merge = merge;\n/** Reduce function that merges each element of the list into a single object, using extend */\nexports.mergeR = function (memo, item) { return exports.extend(memo, item); };\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n    var path = [];\n    for (var n in first.path) {\n        if (first.path[n] !== second.path[n])\n            break;\n        path.push(first.path[n]);\n    }\n    return path;\n}\nexports.ancestors = ancestors;\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nfunction equalForKeys(a, b, keys) {\n    if (keys === void 0) { keys = Object.keys(a); }\n    for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        if (a[k] != b[k])\n            return false; // Not '===', values aren't necessarily normalized\n    }\n    return true;\n}\nexports.equalForKeys = equalForKeys;\nfunction pickOmitImpl(predicate, obj) {\n    var keys = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        keys[_i - 2] = arguments[_i];\n    }\n    var objCopy = {};\n    for (var key in obj) {\n        if (predicate(keys, key))\n            objCopy[key] = obj[key];\n    }\n    return objCopy;\n}\n/** Return a copy of the object only containing the whitelisted properties. */\nfunction pick(obj) {\n    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));\n}\nexports.pick = pick;\n/** Return a copy of the object omitting the blacklisted properties. */\nfunction omit(obj) {\n    var notInArray = function (array, item) { return !exports.inArray(array, item); };\n    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));\n}\nexports.omit = omit;\n/**\n * Maps an array, or object to a property (by name)\n */\nfunction pluck(collection, propName) {\n    return map(collection, hof_1.prop(propName));\n}\nexports.pluck = pluck;\n/** Filters an Array or an Object's properties based on a predicate */\nfunction filter(collection, callback) {\n    var arr = predicates_1.isArray(collection), result = arr ? [] : {};\n    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };\n    exports.forEach(collection, function (item, i) {\n        if (callback(item, i))\n            accept(item, i);\n    });\n    return result;\n}\nexports.filter = filter;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nfunction find(collection, callback) {\n    var result;\n    exports.forEach(collection, function (item, i) {\n        if (result)\n            return;\n        if (callback(item, i))\n            result = item;\n    });\n    return result;\n}\nexports.find = find;\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexports.mapObj = map;\n/** Maps an array or object properties using a callback function */\nfunction map(collection, callback) {\n    var result = predicates_1.isArray(collection) ? [] : {};\n    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });\n    return result;\n}\nexports.map = map;\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexports.values = function (obj) {\n    return Object.keys(obj).map(function (key) { return obj[key]; });\n};\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexports.allTrueR = function (memo, elem) { return memo && elem; };\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexports.anyTrueR = function (memo, elem) { return memo || elem; };\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexports.unnestR = function (memo, elem) { return memo.concat(elem); };\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexports.flattenR = function (memo, elem) {\n    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);\n};\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nfunction pushR(arr, obj) {\n    arr.push(obj);\n    return arr;\n}\nexports.pushR = pushR;\n/** Reduce function that filters out duplicates */\nexports.uniqR = function (acc, token) {\n    return exports.inArray(acc, token) ? acc : pushR(acc, token);\n};\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nfunction assertPredicate(predicate, errMsg) {\n    if (errMsg === void 0) { errMsg = \"assert failure\"; }\n    return function (obj) {\n        if (!predicate(obj)) {\n            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);\n        }\n        return true;\n    };\n}\nexports.assertPredicate = assertPredicate;\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexports.pairs = function (obj) {\n    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });\n};\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nfunction arrayTuples() {\n    var arrayArgs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrayArgs[_i - 0] = arguments[_i];\n    }\n    if (arrayArgs.length === 0)\n        return [];\n    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });\n}\nexports.arrayTuples = arrayTuples;\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nfunction applyPairs(memo, keyValTuple) {\n    var key, value;\n    if (predicates_1.isArray(keyValTuple))\n        key = keyValTuple[0], value = keyValTuple[1];\n    if (!predicates_1.isString(key))\n        throw new Error(\"invalid parameters to applyPairs\");\n    memo[key] = value;\n    return memo;\n}\nexports.applyPairs = applyPairs;\n/** Get the last element of an array */\nfunction tail(arr) {\n    return arr.length && arr[arr.length - 1] || undefined;\n}\nexports.tail = tail;\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src, dest) {\n    if (dest)\n        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n    if (!dest)\n        dest = {};\n    return exports.extend(dest, src);\n}\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj, cb, _this) {\n    if (predicates_1.isArray(obj))\n        return obj.forEach(cb, _this);\n    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n}\nfunction _copyProps(to, from) {\n    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });\n    return to;\n}\nfunction _extend(toObj) {\n    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);\n}\nfunction _equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    var t1 = typeof o1, t2 = typeof o2;\n    if (t1 !== t2 || t1 !== 'object')\n        return false;\n    var tup = [o1, o2];\n    if (hof_1.all(predicates_1.isArray)(tup))\n        return _arraysEq(o1, o2);\n    if (hof_1.all(predicates_1.isDate)(tup))\n        return o1.getTime() === o2.getTime();\n    if (hof_1.all(predicates_1.isRegExp)(tup))\n        return o1.toString() === o2.toString();\n    if (hof_1.all(predicates_1.isFunction)(tup))\n        return true; // meh\n    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];\n    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n        return false;\n    var key, keys = {};\n    for (key in o1) {\n        if (!_equals(o1[key], o2[key]))\n            return false;\n        keys[key] = true;\n    }\n    for (key in o2) {\n        if (!keys[key])\n            return false;\n    }\n    return true;\n}\nfunction _arraysEq(a1, a2) {\n    if (a1.length !== a2.length)\n        return false;\n    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n}\n// issue #2676\nexports.silenceUncaughtInPromise = function (promise) {\n    return promise.catch(function (e) { return 0; }) && promise;\n};\nexports.silentRejection = function (error) {\n    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));\n};\n//# sourceMappingURL=common.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/common.js\n ** module id = 4\n ** module chunks = 0 1\n **/","\"use strict\";\n/** Predicates @module common_predicates */ /** */\nvar hof_1 = require(\"./hof\");\nvar toStr = Object.prototype.toString;\nvar tis = function (t) { return function (x) { return typeof (x) === t; }; };\nexports.isUndefined = tis('undefined');\nexports.isDefined = hof_1.not(exports.isUndefined);\nexports.isNull = function (o) { return o === null; };\nexports.isFunction = tis('function');\nexports.isNumber = tis('number');\nexports.isString = tis('string');\nexports.isObject = function (x) { return x !== null && typeof x === 'object'; };\nexports.isArray = Array.isArray;\nexports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\nexports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nfunction isInjectable(val) {\n    if (exports.isArray(val) && val.length) {\n        var head = val.slice(0, -1), tail = val.slice(-1);\n        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);\n    }\n    return exports.isFunction(val);\n}\nexports.isInjectable = isInjectable;\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));\n//# sourceMappingURL=predicates.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/predicates.js\n ** module id = 5\n ** module chunks = 0 1\n **/","/**\n * Higher order functions\n *\n * @module common_hof\n */ /** */\n\"use strict\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nfunction curry(fn) {\n    var initial_args = [].slice.apply(arguments, [1]);\n    var func_args_length = fn.length;\n    function curried(args) {\n        if (args.length >= func_args_length)\n            return fn.apply(null, args);\n        return function () {\n            return curried(args.concat([].slice.apply(arguments)));\n        };\n    }\n    return curried(initial_args);\n}\nexports.curry = curry;\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nfunction compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start, result = args[start].apply(this, arguments);\n        while (i--)\n            result = args[i].call(this, result);\n        return result;\n    };\n}\nexports.compose = compose;\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nfunction pipe() {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        funcs[_i - 0] = arguments[_i];\n    }\n    return compose.apply(null, [].slice.call(arguments).reverse());\n}\nexports.pipe = pipe;\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexports.prop = function (name) {\n    return function (obj) { return obj && obj[name]; };\n};\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexports.parse = function (name) {\n    return pipe.apply(null, name.split(\".\").map(exports.prop));\n};\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexports.not = function (fn) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        return !fn.apply(null, args);\n    };\n};\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nfunction and(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        return fn1.apply(null, args) && fn2.apply(null, args);\n    };\n}\nexports.and = and;\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nfunction or(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        return fn1.apply(null, args) || fn2.apply(null, args);\n    };\n}\nexports.or = or;\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexports.all = function (fn1) {\n    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };\n};\nexports.any = function (fn1) {\n    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };\n};\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexports.is = function (ctor) { return function (obj) {\n    return (obj != null && obj.constructor === ctor || obj instanceof ctor);\n}; };\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexports.eq = function (val) { return function (other) {\n    return val === other;\n}; };\n/** Given a value, returns a function which returns the value */\nexports.val = function (v) { return function () { return v; }; };\nfunction invoke(fnName, args) {\n    return function (obj) {\n        return obj[fnName].apply(obj, args);\n    };\n}\nexports.invoke = invoke;\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nfunction pattern(struct) {\n    return function (x) {\n        for (var i = 0; i < struct.length; i++) {\n            if (struct[i][0](x))\n                return struct[i][1](x);\n        }\n    };\n}\nexports.pattern = pattern;\n//# sourceMappingURL=hof.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/hof.js\n ** module id = 6\n ** module chunks = 0 1\n **/","\"use strict\";\nvar notImplemented = function (fnname) { return function () {\n    throw new Error(fnname + \"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']\");\n}; };\nvar services = {\n    $q: undefined,\n    $injector: undefined,\n    location: {},\n    locationConfig: {},\n    template: {}\n};\nexports.services = services;\n[\"setUrl\", \"path\", \"search\", \"hash\", \"onChange\"]\n    .forEach(function (key) { return services.location[key] = notImplemented(key); });\n[\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"]\n    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });\n//# sourceMappingURL=coreservices.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/coreservices.js\n ** module id = 7\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module common */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - [[HookMatchCriteria.to]]\n * - [[HookMatchCriteria.from]]\n * - [[HookMatchCriteria.exiting]]\n * - [[HookMatchCriteria.retained]]\n * - [[HookMatchCriteria.entering]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nvar Glob = (function () {\n    function Glob(text) {\n        this.text = text;\n        this.glob = text.split('.');\n        var regexpString = this.text.split('.')\n            .map(function (seg) {\n            if (seg === '**')\n                return '(?:|(?:\\\\.[^.]*)*)';\n            if (seg === '*')\n                return '\\\\.[^.]*';\n            return '\\\\.' + seg;\n        }).join('');\n        this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n    }\n    Glob.prototype.matches = function (name) {\n        return this.regexp.test('.' + name);\n    };\n    /** @deprecated whats the point? */\n    Glob.is = function (text) {\n        return text.indexOf('*') > -1;\n    };\n    /** @deprecated whats the point? */\n    Glob.fromString = function (text) {\n        if (!this.is(text))\n            return null;\n        return new Glob(text);\n    };\n    return Glob;\n}());\nexports.Glob = Glob;\n//# sourceMappingURL=glob.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/glob.js\n ** module id = 8\n ** module chunks = 0 1\n **/","/** @module common */ /** for typedoc */\n\"use strict\";\nvar Queue = (function () {\n    function Queue(_items, _limit) {\n        if (_items === void 0) { _items = []; }\n        if (_limit === void 0) { _limit = null; }\n        this._items = _items;\n        this._limit = _limit;\n    }\n    Queue.prototype.enqueue = function (item) {\n        var items = this._items;\n        items.push(item);\n        if (this._limit && items.length > this._limit)\n            items.shift();\n        return item;\n    };\n    Queue.prototype.dequeue = function () {\n        if (this.size())\n            return this._items.splice(0, 1)[0];\n    };\n    Queue.prototype.clear = function () {\n        var current = this._items;\n        this._items = [];\n        return current;\n    };\n    Queue.prototype.size = function () {\n        return this._items.length;\n    };\n    Queue.prototype.remove = function (item) {\n        var idx = this._items.indexOf(item);\n        return idx > -1 && this._items.splice(idx, 1)[0];\n    };\n    Queue.prototype.peekTail = function () {\n        return this._items[this._items.length - 1];\n    };\n    Queue.prototype.peekHead = function () {\n        if (this.size())\n            return this._items[0];\n    };\n    return Queue;\n}());\nexports.Queue = Queue;\n//# sourceMappingURL=queue.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/queue.js\n ** module id = 9\n ** module chunks = 0 1\n **/","/** @module common_strings */ /** */\n\"use strict\";\nvar predicates_1 = require(\"./predicates\");\nvar rejectFactory_1 = require(\"../transition/rejectFactory\");\nvar common_1 = require(\"./common\");\nvar hof_1 = require(\"./hof\");\nvar transition_1 = require(\"../transition/transition\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nfunction maxLength(max, str) {\n    if (str.length <= max)\n        return str;\n    return str.substr(0, max - 3) + \"...\";\n}\nexports.maxLength = maxLength;\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nfunction padString(length, str) {\n    while (str.length < length)\n        str += \" \";\n    return str;\n}\nexports.padString = padString;\nfunction kebobString(camelCase) {\n    return camelCase\n        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n        .replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); }); // replace rest\n}\nexports.kebobString = kebobString;\nfunction _toJson(obj) {\n    return JSON.stringify(obj);\n}\nfunction _fromJson(json) {\n    return predicates_1.isString(json) ? JSON.parse(json) : json;\n}\nfunction promiseToString(p) {\n    return \"Promise(\" + JSON.stringify(p) + \")\";\n}\nfunction functionToString(fn) {\n    var fnStr = fnToString(fn);\n    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n    return namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n}\nexports.functionToString = functionToString;\nfunction fnToString(fn) {\n    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;\n    return _fn && _fn.toString() || \"undefined\";\n}\nexports.fnToString = fnToString;\nvar stringifyPatternFn = null;\nvar stringifyPattern = function (value) {\n    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;\n    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([\n        [hof_1.not(predicates_1.isDefined), hof_1.val(\"undefined\")],\n        [predicates_1.isNull, hof_1.val(\"null\")],\n        [predicates_1.isPromise, hof_1.val(\"[Promise]\")],\n        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],\n        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke(\"toString\")],\n        [hof_1.is(transition_1.Transition), hof_1.invoke(\"toString\")],\n        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke(\"toString\")],\n        [predicates_1.isInjectable, functionToString],\n        [hof_1.val(true), common_1.identity]\n    ]);\n    return stringifyPatternFn(value);\n};\nfunction stringify(o) {\n    var seen = [];\n    function format(val) {\n        if (predicates_1.isObject(val)) {\n            if (seen.indexOf(val) !== -1)\n                return '[circular ref]';\n            seen.push(val);\n        }\n        return stringifyPattern(val);\n    }\n    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\\\\"/g, '\"');\n}\nexports.stringify = stringify;\n/** Returns a function that splits a string on a character or substring */\nexports.beforeAfterSubstr = function (char) { return function (str) {\n    if (!str)\n        return [\"\", \"\"];\n    var idx = str.indexOf(char);\n    if (idx === -1)\n        return [str, \"\"];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n}; };\n//# sourceMappingURL=strings.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/strings.js\n ** module id = 10\n ** module chunks = 0 1\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nvar common_1 = require(\"../common/common\");\nvar strings_1 = require(\"../common/strings\");\n(function (RejectType) {\n    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n})(exports.RejectType || (exports.RejectType = {}));\nvar RejectType = exports.RejectType;\nvar Rejection = (function () {\n    function Rejection(type, message, detail) {\n        this.type = type;\n        this.message = message;\n        this.detail = detail;\n    }\n    Rejection.prototype.toString = function () {\n        var detailString = function (d) {\n            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);\n        };\n        var type = this.type, message = this.message, detail = detailString(this.detail);\n        return \"TransitionRejection(type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n    };\n    Rejection.prototype.toPromise = function () {\n        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });\n    };\n    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n    Rejection.isTransitionRejectionPromise = function (obj) {\n        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;\n    };\n    /** Returns a TransitionRejection due to transition superseded */\n    Rejection.superseded = function (detail, options) {\n        var message = \"The transition has been superseded by a different transition\";\n        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n        if (options && options.redirected) {\n            rejection.redirected = true;\n        }\n        return rejection;\n    };\n    /** Returns a TransitionRejection due to redirected transition */\n    Rejection.redirected = function (detail) {\n        return Rejection.superseded(detail, { redirected: true });\n    };\n    /** Returns a TransitionRejection due to invalid transition */\n    Rejection.invalid = function (detail) {\n        var message = \"This transition is invalid\";\n        return new Rejection(RejectType.INVALID, message, detail);\n    };\n    /** Returns a TransitionRejection due to ignored transition */\n    Rejection.ignored = function (detail) {\n        var message = \"The transition was ignored\";\n        return new Rejection(RejectType.IGNORED, message, detail);\n    };\n    /** Returns a TransitionRejection due to aborted transition */\n    Rejection.aborted = function (detail) {\n        // TODO think about how to encapsulate an Error() object\n        var message = \"The transition has been aborted\";\n        return new Rejection(RejectType.ABORTED, message, detail);\n    };\n    /** Returns a TransitionRejection due to aborted transition */\n    Rejection.errored = function (detail) {\n        // TODO think about how to encapsulate an Error() object\n        var message = \"The transition errored\";\n        return new Rejection(RejectType.ERROR, message, detail);\n    };\n    return Rejection;\n}());\nexports.Rejection = Rejection;\n//# sourceMappingURL=rejectFactory.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/rejectFactory.js\n ** module id = 11\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module transition */ /** for typedoc */\nvar strings_1 = require(\"../common/strings\");\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar transitionHook_1 = require(\"./transitionHook\");\nvar hookRegistry_1 = require(\"./hookRegistry\");\nvar hookBuilder_1 = require(\"./hookBuilder\");\nvar node_1 = require(\"../path/node\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar targetState_1 = require(\"../state/targetState\");\nvar param_1 = require(\"../params/param\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\nvar rejectFactory_1 = require(\"./rejectFactory\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\nvar router_1 = require(\"../router\");\nvar transitionCount = 0;\nvar stateSelf = hof_1.prop(\"self\");\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nvar Transition = (function () {\n    /**\n     * Creates a new Transition object.\n     *\n     * If the target state is not valid, an error is thrown.\n     *\n     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n     *        encapsulates the \"from state\".\n     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n     * @param router The [[UIRouter]] instance\n     */\n    function Transition(fromPath, targetState, router) {\n        var _this = this;\n        /** @hidden */\n        this._deferred = coreservices_1.services.$q.defer();\n        /**\n         * This promise is resolved or rejected based on the outcome of the Transition.\n         *\n         * When the transition is successful, the promise is resolved\n         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error\n         */\n        this.promise = this._deferred.promise;\n        this.treeChanges = function () { return _this._treeChanges; };\n        this.isActive = function () { return _this === _this._options.current(); };\n        this.router = router;\n        this._targetState = targetState;\n        if (!targetState.valid()) {\n            throw new Error(targetState.error());\n        }\n        // Makes the Transition instance a hook registry (onStart, etc)\n        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());\n        this.$id = transitionCount++;\n        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);\n        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);\n        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n        var rootResolvables = [\n            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),\n            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),\n            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),\n            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())\n        ];\n        var rootNode = this._treeChanges.to[0];\n        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);\n        context.addResolvables(rootResolvables, rootNode.state);\n    }\n    /** @inheritdoc */\n    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    Transition.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    Transition.prototype.$from = function () {\n        return common_1.tail(this._treeChanges.from).state;\n    };\n    Transition.prototype.$to = function () {\n        return common_1.tail(this._treeChanges.to).state;\n    };\n    /**\n     * Returns the \"from state\"\n     *\n     * @returns The state object for the Transition's \"from state\".\n     */\n    Transition.prototype.from = function () {\n        return this.$from().self;\n    };\n    /**\n     * Returns the \"to state\"\n     *\n     * @returns The state object for the Transition's target state (\"to state\").\n     */\n    Transition.prototype.to = function () {\n        return this.$to().self;\n    };\n    /**\n     * Gets the Target State\n     *\n     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].\n     *\n     * @returns the [[TargetState]] of this Transition\n     */\n    Transition.prototype.targetState = function () {\n        return this._targetState;\n    };\n    /**\n     * Determines whether two transitions are equivalent.\n     */\n    Transition.prototype.is = function (compare) {\n        if (compare instanceof Transition) {\n            // TODO: Also compare parameters\n            return this.is({ to: compare.$to().name, from: compare.$from().name });\n        }\n        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||\n            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));\n    };\n    /**\n     * Gets transition parameter values\n     *\n     * @param pathname Pick which treeChanges path to get parameters for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @returns transition parameter values for the desired path.\n     */\n    Transition.prototype.params = function (pathname) {\n        if (pathname === void 0) { pathname = \"to\"; }\n        return this._treeChanges[pathname].map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {});\n    };\n    /**\n     * Creates a [[UIInjector]] Dependency Injector\n     *\n     * Returns a Dependency Injector for the Transition's target state (to state).\n     * The injector provides resolve values which the target state has access to.\n     *\n     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n     *\n     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n     *\n     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n     * @returns a [[UIInjector]]\n     */\n    Transition.prototype.injector = function (state) {\n        var path = this.treeChanges().to;\n        if (state)\n            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n        return new resolveContext_1.ResolveContext(path).injector();\n    };\n    /**\n     * Gets all available resolve tokens (keys)\n     *\n     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values\n     * available to the Transition.\n     *\n     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states\n     * in the Transition's [[TreeChanges.to]] path.\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    Transition.prototype.getResolveTokens = function () {\n        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();\n    };\n    /**\n     * Gets resolved values\n     *\n     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values\n     * are available to the Transition.\n     *\n     * Given a token, returns the resolved data for that token.\n     * Given an array of tokens, returns an array of resolved data for those tokens.\n     *\n     * If a resolvable hasn't yet been fetched, returns `undefined` for that token\n     * If a resolvable doesn't exist for the token, throws an error.\n     *\n     * @param token the token (or array of tokens)\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    Transition.prototype.getResolveValue = function (token) {\n        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);\n        var getData = function (token) {\n            var resolvable = resolveContext.getResolvable(token);\n            if (resolvable === undefined) {\n                throw new Error(\"Dependency Injection token not found: \" + strings_1.stringify(token));\n            }\n            return resolvable.data;\n        };\n        if (predicates_1.isArray(token)) {\n            return token.map(getData);\n        }\n        return getData(token);\n    };\n    /**\n     * Gets a [[Resolvable]] primitive\n     *\n     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.\n     *\n     * @param token the DI token\n     *\n     * @returns the [[Resolvable]] in the transition's to path, or undefined\n     */\n    Transition.prototype.getResolvable = function (token) {\n        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);\n    };\n    /**\n     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.\n     *\n     * @param resolvable an [[Resolvable]] object\n     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n     */\n    Transition.prototype.addResolvable = function (resolvable, state) {\n        if (state === void 0) { state = \"\"; }\n        var stateName = (typeof state === \"string\") ? state : state.name;\n        var topath = this._treeChanges.to;\n        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });\n        var resolveContext = new resolveContext_1.ResolveContext(topath);\n        resolveContext.addResolvables([resolvable], targetNode.state);\n    };\n    /**\n     * If the current transition is a redirect, returns the transition that was redirected.\n     *\n     * Gets the transition from which this transition was redirected.\n     *\n     *\n     * @example\n     * ```js\n     *\n     * let transitionA = $state.go('A').transitionA\n     * transitionA.onStart({}, () => $state.target('B'));\n     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n     *   trans.to().name === 'B'; // true\n     *   trans.redirectedFrom() === transitionA; // true\n     * });\n     * ```\n     *\n     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n     */\n    Transition.prototype.redirectedFrom = function () {\n        return this._options.redirectedFrom || null;\n    };\n    /**\n     * Get the transition options\n     *\n     * @returns the options for this Transition.\n     */\n    Transition.prototype.options = function () {\n        return this._options;\n    };\n    /**\n     * Gets the states being entered.\n     *\n     * @returns an array of states that will be entered during this transition.\n     */\n    Transition.prototype.entering = function () {\n        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Gets the states being exited.\n     *\n     * @returns an array of states that will be exited during this transition.\n     */\n    Transition.prototype.exiting = function () {\n        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();\n    };\n    /**\n     * Gets the states being retained.\n     *\n     * @returns an array of states that are already entered from a previous Transition, that will not be\n     *    exited during this Transition\n     */\n    Transition.prototype.retained = function () {\n        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);\n    };\n    /**\n     * Get the [[ViewConfig]]s associated with this Transition\n     *\n     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n     *\n     * @param pathname the name of the path to fetch views for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n     *\n     * @returns a list of ViewConfig objects for the given path.\n     */\n    Transition.prototype.views = function (pathname, state) {\n        if (pathname === void 0) { pathname = \"entering\"; }\n        var path = this._treeChanges[pathname];\n        path = !state ? path : path.filter(hof_1.propEq('state', state));\n        return path.map(hof_1.prop(\"views\")).filter(common_1.identity).reduce(common_1.unnestR, []);\n    };\n    /**\n     * Creates a new transition that is a redirection of the current one.\n     *\n     * This transition can be returned from a [[TransitionService]] hook to\n     * redirect a transition to a new state and/or set of parameters.\n     *\n     * @returns Returns a new [[Transition]] instance.\n     */\n    Transition.prototype.redirect = function (targetState) {\n        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: \"redirect\" });\n        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n        var originalEnteringNodes = this.treeChanges().entering;\n        var redirectEnteringNodes = newTransition.treeChanges().entering;\n        // --- Re-use resolve data from original transition ---\n        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n        // redirected transition.\n        //\n        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n        // You can wait for the resolve, then redirect to a child state based on the result.\n        // The redirected transition does not have to re-fetch the resolve.\n        // ---------------------------------------------------------\n        var nodeIsReloading = function (reloadState) { return function (node) {\n            return reloadState && node.state.includes[reloadState.name];\n        }; };\n        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)\n            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));\n        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n        matchingEnteringNodes.forEach(function (node, idx) {\n            node.resolvables = originalEnteringNodes[idx].resolvables;\n        });\n        return newTransition;\n    };\n    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n    Transition.prototype._changedParams = function () {\n        var _a = this._treeChanges, to = _a.to, from = _a.from;\n        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)\n            return undefined;\n        var nodeSchemas = to.map(function (node) { return node.paramSchema; });\n        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];\n        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);\n        return tuples.map(function (_a) {\n            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n            return param_1.Param.changed(schema, toVals, fromVals);\n        }).reduce(common_1.unnestR, []);\n    };\n    /**\n     * Returns true if the transition is dynamic.\n     *\n     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n     *\n     * @returns true if the Transition is dynamic\n     */\n    Transition.prototype.dynamic = function () {\n        var changes = this._changedParams();\n        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);\n    };\n    /**\n     * Returns true if the transition is ignored.\n     *\n     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n     *\n     * @returns true if the Transition is ignored.\n     */\n    Transition.prototype.ignored = function () {\n        var changes = this._changedParams();\n        return !changes ? false : changes.length === 0;\n    };\n    /**\n     * @hidden\n     */\n    Transition.prototype.hookBuilder = function () {\n        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {\n            transition: this,\n            current: this._options.current\n        });\n    };\n    /**\n     * Runs the transition\n     *\n     * This method is generally called from the [[StateService.transitionTo]]\n     *\n     * @returns a promise for a successful transition.\n     */\n    Transition.prototype.run = function () {\n        var _this = this;\n        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;\n        var hookBuilder = this.hookBuilder();\n        var globals = this.router.globals;\n        globals.transitionHistory.enqueue(this);\n        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());\n        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {\n            syncResult.catch(function () { return 0; }); // issue #2676\n            var rejectReason = syncResult._transitionRejection;\n            this._deferred.reject(rejectReason);\n            return this.promise;\n        }\n        if (!this.valid()) {\n            var error = new Error(this.error());\n            this._deferred.reject(error);\n            return this.promise;\n        }\n        if (this.ignored()) {\n            trace_1.trace.traceTransitionIgnored(this);\n            this._deferred.reject(rejectFactory_1.Rejection.ignored());\n            return this.promise;\n        }\n        // When the chain is complete, then resolve or reject the deferred\n        var transitionSuccess = function () {\n            trace_1.trace.traceSuccess(_this.$to(), _this);\n            _this.success = true;\n            _this._deferred.resolve(_this.to());\n            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);\n        };\n        var transitionError = function (reason) {\n            trace_1.trace.traceError(reason, _this);\n            _this.success = false;\n            _this._deferred.reject(reason);\n            _this._error = reason;\n            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);\n        };\n        trace_1.trace.traceTransitionStart(this);\n        // Chain the next hook off the previous\n        var appendHookToChain = function (prev, nextHook) {\n            return prev.then(function () { return nextHook.invokeHook(); });\n        };\n        // Run the hooks, then resolve or reject the overall deferred in the .then() handler\n        hookBuilder.asyncHooks()\n            .reduce(appendHookToChain, syncResult)\n            .then(transitionSuccess, transitionError);\n        return this.promise;\n    };\n    /**\n     * Checks if the Transition is valid\n     *\n     * @returns true if the Transition is valid\n     */\n    Transition.prototype.valid = function () {\n        return !this.error() || this.success !== undefined;\n    };\n    /**\n     * The Transition error reason.\n     *\n     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n     *\n     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n     */\n    Transition.prototype.error = function () {\n        var state = this.$to();\n        var redirects = 0, trans = this;\n        while ((trans = trans.redirectedFrom()) != null) {\n            if (++redirects > 20)\n                return \"Too many Transition redirects (20+)\";\n        }\n        if (state.self.abstract)\n            return \"Cannot transition to abstract state '\" + state.name + \"'\";\n        if (!param_1.Param.validates(state.parameters(), this.params()))\n            return \"Param values not valid for state '\" + state.name + \"'\";\n        if (this.success === false)\n            return this._error;\n    };\n    /**\n     * A string representation of the Transition\n     *\n     * @returns A string representation of the Transition\n     */\n    Transition.prototype.toString = function () {\n        var fromStateOrName = this.from();\n        var toStateOrName = this.to();\n        var avoidEmptyHash = function (params) {\n            return (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : common_1.omit(params, \"#\");\n        };\n        // (X) means the to state is invalid.\n        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? \"\" : \"(X) \", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));\n        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n    };\n    Transition.diToken = Transition;\n    return Transition;\n}());\nexports.Transition = Transition;\n//# sourceMappingURL=transition.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/transition.js\n ** module id = 12\n ** module chunks = 0 1\n **/","\"use strict\";\n/**\n * UI-Router Transition Tracing\n *\n * Enable transition tracing to print transition information to the console, in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[trace]] singleton and enable one or more categories.\n *\n * ES6\n * ```\n *\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * CJS\n * ```\n *\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * Globals\n * ```\n *\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * @module trace\n */ /** for typedoc */\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar strings_1 = require(\"./strings\");\n/** @hidden */\nfunction uiViewString(viewData) {\n    if (!viewData)\n        return 'ui-view (defunct)';\n    return (\"[ui-view#\" + viewData.id + \" tag \") +\n        (\"in template from '\" + (viewData.creationContext && viewData.creationContext.name || '(root)') + \"' state]: \") +\n        (\"fqn: '\" + viewData.fqn + \"', \") +\n        (\"name: '\" + viewData.name + \"@\" + viewData.creationContext + \"')\");\n}\n/** @hidden */\nvar viewConfigString = function (viewConfig) {\n    return (\"[ViewConfig#\" + viewConfig.$id + \" from '\" + (viewConfig.viewDecl.$context.name || '(root)') + \"' state]: target ui-view: '\" + viewConfig.viewDecl.$uiViewName + \"@\" + viewConfig.viewDecl.$uiViewContextAnchor + \"'\");\n};\n/** @hidden */\nfunction normalizedCat(input) {\n    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];\n}\n/**\n * Trace categories\n *\n * [[Trace.enable]] or [[Trace.disable]] a category\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\n(function (Category) {\n    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\n    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\n})(exports.Category || (exports.Category = {}));\nvar Category = exports.Category;\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nvar Trace = (function () {\n    function Trace() {\n        /** @hidden */\n        this._enabled = {};\n        this.approximateDigests = 0;\n    }\n    /** @hidden */\n    Trace.prototype._set = function (enabled, categories) {\n        var _this = this;\n        if (!categories.length) {\n            categories = Object.keys(Category)\n                .map(function (k) { return parseInt(k, 10); })\n                .filter(function (k) { return !isNaN(k); })\n                .map(function (key) { return Category[key]; });\n        }\n        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });\n    };\n    /**\n     * Enables a trace [[Category]]\n     *\n     * ```\n     * trace.enable(\"TRANSITION\");\n     * ```\n     *\n     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.enable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i - 0] = arguments[_i];\n        }\n        this._set(true, categories);\n    };\n    /**\n     * Disables a trace [[Category]]\n     *\n     * ```\n     * trace.disable(\"VIEWCONFIG\");\n     * ```\n     *\n     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n     *        Also takes strings (category name) or ordinal (category position)\n     */\n    Trace.prototype.disable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i - 0] = arguments[_i];\n        }\n        this._set(false, categories);\n    };\n    /**\n     * Retrieves the enabled stateus of a [[Category]]\n     *\n     * ```\n     * trace.enabled(\"VIEWCONFIG\"); // true or false\n     * ```\n     *\n     * @returns boolean true if the category is enabled\n     */\n    Trace.prototype.enabled = function (category) {\n        return !!this._enabled[normalizedCat(category)];\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceTransitionStart = function (transition) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Started  -> \" + transitionStr);\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceTransitionIgnored = function (trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": Ignored  <> \" + transitionStr);\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceHookInvocation = function (step, options) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        var tid = hof_1.parse(\"transition.$id\")(options), digest = this.approximateDigests, event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.functionToString(step.hookFn);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   Hook -> \" + event + \" context: \" + context + \", \" + strings_1.maxLength(200, name));\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceHookResult = function (hookResult, transitionResult, transitionOptions) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        var tid = hof_1.parse(\"transition.$id\")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult), transitionResultStr = strings_1.stringify(transitionResult);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":   <- Hook returned: \" + strings_1.maxLength(200, hookResultStr) + \", transition result: \" + strings_1.maxLength(200, transitionResultStr));\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceResolvePath = function (path, when, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":         Resolving \" + pathStr + \" (\" + when + \")\");\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \":               <- Resolved  \" + resolvableStr + \" to: \" + strings_1.maxLength(200, result));\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceError = function (reason, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Rejected \" + transitionStr + \", reason: \" + reason);\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceSuccess = function (finalState, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);\n        console.log(\"Transition #\" + tid + \" Digest #\" + digest + \": <- Success  \" + transitionStr + \", final state: \" + state);\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n        if (extra === void 0) { extra = \"\"; }\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        console.log(\"ui-view: \" + strings_1.padString(30, event) + \" \" + uiViewString(viewData) + extra);\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent(\"Updating\", viewData, \" with ViewConfig from context='\" + context + \"'\");\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceUIViewFill = function (viewData, html) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent(\"Fill\", viewData, \" with: \" + strings_1.maxLength(200, html));\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n    };\n    /** called by ui-router code */\n    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n    };\n    return Trace;\n}());\nexports.Trace = Trace;\n/**\n * The [[Trace]] singleton\n *\n * @example\n * ```js\n *\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nvar trace = new Trace();\nexports.trace = trace;\n//# sourceMappingURL=trace.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/common/trace.js\n ** module id = 13\n ** module chunks = 0 1\n **/","\"use strict\";\nvar common_1 = require(\"../common/common\");\nvar strings_1 = require(\"../common/strings\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar rejectFactory_1 = require(\"./rejectFactory\");\nvar targetState_1 = require(\"../state/targetState\");\nvar defaultOptions = {\n    async: true,\n    rejectIfSuperseded: true,\n    current: common_1.noop,\n    transition: null,\n    traceData: {},\n    bind: null\n};\n/** @hidden */\nvar TransitionHook = (function () {\n    function TransitionHook(transition, stateContext, eventHook, options) {\n        var _this = this;\n        this.transition = transition;\n        this.stateContext = stateContext;\n        this.eventHook = eventHook;\n        this.options = options;\n        this.isSuperseded = function () { return _this.options.current() !== _this.options.transition; };\n        this.options = common_1.defaults(options, defaultOptions);\n    }\n    TransitionHook.prototype.invokeHook = function () {\n        var _a = this, options = _a.options, eventHook = _a.eventHook;\n        trace_1.trace.traceHookInvocation(this, options);\n        if (options.rejectIfSuperseded && this.isSuperseded()) {\n            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();\n        }\n        var hookResult = !eventHook._deregistered\n            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)\n            : undefined;\n        return this.handleHookResult(hookResult);\n    };\n    /**\n     * This method handles the return value of a Transition Hook.\n     *\n     * A hook can return false, a redirect (TargetState), or a promise (which may resolve to false or a redirect)\n     */\n    TransitionHook.prototype.handleHookResult = function (hookResult) {\n        var _this = this;\n        if (!predicates_1.isDefined(hookResult))\n            return undefined;\n        /**\n         * Handles transition superseded, transition aborted and transition redirect.\n         */\n        var mapHookResult = hof_1.pattern([\n            // Transition is no longer current\n            [this.isSuperseded, function () { return rejectFactory_1.Rejection.superseded(_this.options.current()).toPromise(); }],\n            // If the hook returns false, abort the current Transition\n            [hof_1.eq(false), function () { return rejectFactory_1.Rejection.aborted(\"Hook aborted transition\").toPromise(); }],\n            // If the hook returns a Transition, halt the current Transition and redirect to that Transition.\n            [hof_1.is(targetState_1.TargetState), function (target) { return rejectFactory_1.Rejection.redirected(target).toPromise(); }],\n            // A promise was returned, wait for the promise and then chain another hookHandler\n            [predicates_1.isPromise, function (promise) { return promise.then(_this.handleHookResult.bind(_this)); }]\n        ]);\n        var transitionResult = mapHookResult(hookResult);\n        if (transitionResult)\n            trace_1.trace.traceHookResult(hookResult, transitionResult, this.options);\n        return transitionResult;\n    };\n    TransitionHook.prototype.toString = function () {\n        var _a = this, options = _a.options, eventHook = _a.eventHook;\n        var event = hof_1.parse(\"traceData.hookType\")(options) || \"internal\", context = hof_1.parse(\"traceData.context.state.name\")(options) || hof_1.parse(\"traceData.context\")(options) || \"unknown\", name = strings_1.fnToString(eventHook.callback);\n        return event + \" context: \" + context + \", \" + strings_1.maxLength(200, name);\n    };\n    /**\n     * Given an array of TransitionHooks, runs each one synchronously and sequentially.\n     *\n     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call\n     */\n    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {\n        if (swallowExceptions === void 0) { swallowExceptions = false; }\n        var results = [];\n        for (var i = 0; i < hooks.length; i++) {\n            var hook = hooks[i];\n            try {\n                results.push(hook.invokeHook());\n            }\n            catch (exception) {\n                if (!swallowExceptions) {\n                    return rejectFactory_1.Rejection.errored(exception).toPromise();\n                }\n                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();\n                errorHandler(exception);\n            }\n        }\n        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);\n        if (rejections.length)\n            return rejections[0];\n        return results\n            .filter(predicates_1.isPromise)\n            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());\n    };\n    return TransitionHook;\n}());\nexports.TransitionHook = TransitionHook;\n//# sourceMappingURL=transitionHook.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/transitionHook.js\n ** module id = 14\n ** module chunks = 0 1\n **/","/** @module state */ /** for typedoc */\n\"use strict\";\nvar common_1 = require(\"../common/common\");\n/**\n * @ngdoc object\n * @name ui.router.state.type:TargetState\n *\n * @description\n * Encapsulate the desired target of a transition.\n * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.\n *\n * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object\n *            used to define the state.\n * @param {IState} _definition The `State` object definition.\n * @param {ParamsOrArray} _params Parameters for the target state\n * @param {TransitionOptions} _options Transition options.\n */\nvar TargetState = (function () {\n    function TargetState(_identifier, _definition, _params, _options) {\n        if (_params === void 0) { _params = {}; }\n        if (_options === void 0) { _options = {}; }\n        this._identifier = _identifier;\n        this._definition = _definition;\n        this._options = _options;\n        this._params = _params || {};\n    }\n    TargetState.prototype.name = function () {\n        return this._definition && this._definition.name || this._identifier;\n    };\n    TargetState.prototype.identifier = function () {\n        return this._identifier;\n    };\n    TargetState.prototype.params = function () {\n        return this._params;\n    };\n    TargetState.prototype.$state = function () {\n        return this._definition;\n    };\n    TargetState.prototype.state = function () {\n        return this._definition && this._definition.self;\n    };\n    TargetState.prototype.options = function () {\n        return this._options;\n    };\n    TargetState.prototype.exists = function () {\n        return !!(this._definition && this._definition.self);\n    };\n    TargetState.prototype.valid = function () {\n        return !this.error();\n    };\n    TargetState.prototype.error = function () {\n        var base = this.options().relative;\n        if (!this._definition && !!base) {\n            var stateName = base.name ? base.name : base;\n            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n        }\n        if (!this._definition)\n            return \"No such state '\" + this.name() + \"'\";\n        if (!this._definition.self)\n            return \"State '\" + this.name() + \"' has an invalid definition\";\n    };\n    TargetState.prototype.toString = function () {\n        return \"'\" + this.name() + \"'\" + common_1.toJson(this.params());\n    };\n    return TargetState;\n}());\nexports.TargetState = TargetState;\n//# sourceMappingURL=targetState.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/targetState.js\n ** module id = 15\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module transition */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar glob_1 = require(\"../common/glob\");\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nfunction matchState(state, criterion) {\n    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;\n    function matchGlobs(_state) {\n        var globStrings = toMatch;\n        for (var i = 0; i < globStrings.length; i++) {\n            var glob = glob_1.Glob.fromString(globStrings[i]);\n            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);\n    return !!matchFn(state);\n}\nexports.matchState = matchState;\n/** @hidden */\nvar EventHook = (function () {\n    function EventHook(matchCriteria, callback, options) {\n        if (options === void 0) { options = {}; }\n        this.callback = callback;\n        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);\n        this.priority = options.priority || 0;\n        this.bind = options.bind || null;\n        this._deregistered = false;\n    }\n    EventHook._matchingNodes = function (nodes, criterion) {\n        if (criterion === true)\n            return nodes;\n        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n        return matching.length ? matching : null;\n    };\n    /**\n     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n     *\n     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n     */\n    EventHook.prototype.matches = function (treeChanges) {\n        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;\n        var matches = {\n            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),\n            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),\n            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),\n            retained: _matchingNodes(treeChanges.retained, mc.retained),\n            entering: _matchingNodes(treeChanges.entering, mc.entering),\n        };\n        // Check if all the criteria matched the TreeChanges object\n        var allMatched = [\"to\", \"from\", \"exiting\", \"retained\", \"entering\"]\n            .map(function (prop) { return matches[prop]; })\n            .reduce(common_1.allTrueR, true);\n        return allMatched ? matches : null;\n    };\n    return EventHook;\n}());\nexports.EventHook = EventHook;\n/** @hidden Return a registration function of the requested type. */\nfunction makeHookRegistrationFn(hooks, name) {\n    return function (matchObject, callback, options) {\n        if (options === void 0) { options = {}; }\n        var eventHook = new EventHook(matchObject, callback, options);\n        hooks[name].push(eventHook);\n        return function deregisterEventHook() {\n            eventHook._deregistered = true;\n            common_1.removeFrom(hooks[name])(eventHook);\n        };\n    };\n}\n/**\n * Mixin class acts as a Transition Hook registry.\n *\n * Holds the registered [[HookFn]] objects.\n * Exposes functions to register new hooks.\n *\n * This is a Mixin class which can be applied to other objects.\n *\n * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].\n *\n * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.\n * Global hooks are added to the [[TransitionService]].\n * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions\n * (note: the hook criteria still must match the Transition).\n */\nvar HookRegistry = (function () {\n    function HookRegistry() {\n        var _this = this;\n        this._transitionEvents = {\n            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []\n        };\n        this.getHooks = function (name) { return _this._transitionEvents[name]; };\n        /** @inheritdoc */\n        this.onBefore = makeHookRegistrationFn(this._transitionEvents, \"onBefore\");\n        /** @inheritdoc */\n        this.onStart = makeHookRegistrationFn(this._transitionEvents, \"onStart\");\n        /** @inheritdoc */\n        this.onEnter = makeHookRegistrationFn(this._transitionEvents, \"onEnter\");\n        /** @inheritdoc */\n        this.onRetain = makeHookRegistrationFn(this._transitionEvents, \"onRetain\");\n        /** @inheritdoc */\n        this.onExit = makeHookRegistrationFn(this._transitionEvents, \"onExit\");\n        /** @inheritdoc */\n        this.onFinish = makeHookRegistrationFn(this._transitionEvents, \"onFinish\");\n        /** @inheritdoc */\n        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, \"onSuccess\");\n        /** @inheritdoc */\n        this.onError = makeHookRegistrationFn(this._transitionEvents, \"onError\");\n    }\n    HookRegistry.mixin = function (source, target) {\n        Object.keys(source._transitionEvents).concat([\"getHooks\"]).forEach(function (key) { return target[key] = source[key]; });\n    };\n    return HookRegistry;\n}());\nexports.HookRegistry = HookRegistry;\n//# sourceMappingURL=hookRegistry.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/hookRegistry.js\n ** module id = 16\n ** module chunks = 0 1\n **/","/** @module transition */ /** for typedoc */\n\"use strict\";\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar transitionHook_1 = require(\"./transitionHook\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nvar HookBuilder = (function () {\n    function HookBuilder($transitions, transition, baseHookOptions) {\n        var _this = this;\n        this.$transitions = $transitions;\n        this.transition = transition;\n        this.baseHookOptions = baseHookOptions;\n        this.getOnBeforeHooks = function () { return _this._buildNodeHooks(\"onBefore\", \"to\", tupleSort(), { async: false }); };\n        this.getOnStartHooks = function () { return _this._buildNodeHooks(\"onStart\", \"to\", tupleSort()); };\n        this.getOnExitHooks = function () { return _this._buildNodeHooks(\"onExit\", \"exiting\", tupleSort(true), { stateHook: true }); };\n        this.getOnRetainHooks = function () { return _this._buildNodeHooks(\"onRetain\", \"retained\", tupleSort(false), { stateHook: true }); };\n        this.getOnEnterHooks = function () { return _this._buildNodeHooks(\"onEnter\", \"entering\", tupleSort(false), { stateHook: true }); };\n        this.getOnFinishHooks = function () { return _this._buildNodeHooks(\"onFinish\", \"to\", tupleSort()); };\n        this.getOnSuccessHooks = function () { return _this._buildNodeHooks(\"onSuccess\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n        this.getOnErrorHooks = function () { return _this._buildNodeHooks(\"onError\", \"to\", tupleSort(), { async: false, rejectIfSuperseded: false }); };\n        this.treeChanges = transition.treeChanges();\n        this.toState = common_1.tail(this.treeChanges.to).state;\n        this.fromState = common_1.tail(this.treeChanges.from).state;\n        this.transitionOptions = transition.options();\n    }\n    HookBuilder.prototype.asyncHooks = function () {\n        var onStartHooks = this.getOnStartHooks();\n        var onExitHooks = this.getOnExitHooks();\n        var onRetainHooks = this.getOnRetainHooks();\n        var onEnterHooks = this.getOnEnterHooks();\n        var onFinishHooks = this.getOnFinishHooks();\n        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];\n        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);\n    };\n    /**\n     * Returns an array of newly built TransitionHook objects.\n     *\n     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n     * - For each of the [[PathNode]]s, creates a TransitionHook\n     *\n     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.\n     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.\n     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables\n     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1\n     * @param options any specific Transition Hook Options\n     */\n    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {\n        var _this = this;\n        // Find all the matching registered hooks for a given hook type\n        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);\n        if (!matchingHooks)\n            return [];\n        var makeTransitionHooks = function (hook) {\n            // Fetch the Nodes that caused this hook to match.\n            var matches = hook.matches(_this.treeChanges);\n            // Select the PathNode[] that will be used as TransitionHook context objects\n            var matchingNodes = matches[matchingNodesProp];\n            // When invoking 'exiting' hooks, give them the \"from path\" for resolve data.\n            // Everything else gets the \"to path\"\n            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;\n            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);\n            // Return an array of HookTuples\n            return matchingNodes.map(function (node) {\n                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);\n                var state = _options.stateHook ? node.state : null;\n                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);\n                return { hook: hook, node: node, transitionHook: transitionHook };\n            });\n        };\n        return matchingHooks.map(makeTransitionHooks)\n            .reduce(common_1.unnestR, [])\n            .sort(sortHooksFn)\n            .map(function (tuple) { return tuple.transitionHook; });\n    };\n    /**\n     * Finds all IEventHooks from:\n     * - The Transition object instance hook registry\n     * - The TransitionService ($transitions) global hook registry\n     *\n     * which matched:\n     * - the eventType\n     * - the matchCriteria (to, from, exiting, retained, entering)\n     *\n     * @returns an array of matched [[IEventHook]]s\n     */\n    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {\n        return [this.transition, this.$transitions] // Instance and Global hook registries\n            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries\n            .filter(common_1.assertPredicate(predicates_1.isArray, \"broken event named: \" + hookName)) // Sanity check\n            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array\n            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n    };\n    return HookBuilder;\n}());\nexports.HookBuilder = HookBuilder;\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort) {\n    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n    return function nodeDepthThenPriority(l, r) {\n        var factor = reverseDepthSort ? -1 : 1;\n        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n    };\n}\n//# sourceMappingURL=hookBuilder.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/hookBuilder.js\n ** module id = 17\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module resolve */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar trace_1 = require(\"../common/trace\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar interface_1 = require(\"./interface\");\nvar resolvable_1 = require(\"./resolvable\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar strings_1 = require(\"../common/strings\");\nvar when = interface_1.resolvePolicies.when;\nvar ALL_WHENS = [when.EAGER, when.LAZY];\nvar EAGER_WHENS = [when.EAGER];\n/**\n * Encapsulates Depenency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nvar ResolveContext = (function () {\n    function ResolveContext(_path) {\n        this._path = _path;\n    }\n    /** Gets all the tokens found in the resolve context, de-duplicated */\n    ResolveContext.prototype.getTokens = function () {\n        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);\n    };\n    /**\n     * Gets the Resolvable that matches the token\n     *\n     * Gets the last Resolvable that matches the token in this context, or undefined.\n     * Throws an error if it doesn't exist in the ResolveContext\n     */\n    ResolveContext.prototype.getResolvable = function (token) {\n        var matching = this._path.map(function (node) { return node.resolvables; })\n            .reduce(common_1.unnestR, [])\n            .filter(function (r) { return r.token === token; });\n        return common_1.tail(matching);\n    };\n    /**\n     * Returns a ResolveContext that includes a portion of this one\n     *\n     * Given a state, this method creates a new ResolveContext from this one.\n     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n     *\n     * #### Why\n     *\n     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n     * This method is used to create a narrower context when injecting ancestor nodes.\n     *\n     * @example\n     * `let ABCD = new ResolveContext([A, B, C, D]);`\n     *\n     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n     * However, `B` should only be able to access resolvables from `A`, `B`.\n     *\n     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n     * `let AB = ABCD.subcontext(a)`\n     */\n    ResolveContext.prototype.subContext = function (state) {\n        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));\n    };\n    /**\n     * Adds Resolvables to the node that matches the state\n     *\n     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n     * The resolvable is added to the node matching the `state` parameter.\n     *\n     * These new resolvables are not automatically fetched.\n     * The calling code should either fetch them, fetch something that depends on them,\n     * or rely on [[resolvePath]] being called when some state is being entered.\n     *\n     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n     *\n     * @param newResolvables the new Resolvables\n     * @param state Used to find the node to put the resolvable on\n     */\n    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n        var node = common_1.find(this._path, hof_1.propEq('state', state));\n        var keys = newResolvables.map(function (r) { return r.token; });\n        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n    };\n    /**\n     * Returns a promise for an array of resolved path Element promises\n     *\n     * @param when\n     * @param trans\n     * @returns {Promise<any>|any}\n     */\n    ResolveContext.prototype.resolvePath = function (when, trans) {\n        var _this = this;\n        if (when === void 0) { when = \"LAZY\"; }\n        // This option determines which 'when' policy Resolvables we are about to fetch.\n        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : \"LAZY\";\n        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n        // get the subpath to the state argument, if provided\n        trace_1.trace.traceResolvePath(this._path, when, trans);\n        var promises = this._path.reduce(function (acc, node) {\n            var matchesRequestedPolicy = function (resolvable) {\n                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);\n            };\n            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);\n            var subContext = _this.subContext(node.state);\n            // For the matching Resolvables, start their async fetch process.\n            var getResult = function (r) { return r.get(subContext, trans)\n                .then(function (value) { return ({ token: r.token, value: value }); }); };\n            return acc.concat(nodeResolvables.map(getResult));\n        }, []);\n        return coreservices_1.services.$q.all(promises);\n    };\n    ResolveContext.prototype.injector = function () {\n        return new UIInjectorImpl(this);\n    };\n    ResolveContext.prototype.findNode = function (resolvable) {\n        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });\n    };\n    /**\n     * Gets the async dependencies of a Resolvable\n     *\n     * Given a Resolvable, returns its dependencies as a Resolvable[]\n     */\n    ResolveContext.prototype.getDependencies = function (resolvable) {\n        var node = this.findNode(resolvable);\n        // Find which other resolvables are \"visible\" to the `resolvable` argument\n        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;\n        var availableResolvables = subPath\n            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables\n            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n        var getDependency = function (token) {\n            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n            if (matching.length)\n                return common_1.tail(matching);\n            var fromInjector = coreservices_1.services.$injector.get(token);\n            if (!fromInjector) {\n                throw new Error(\"Could not find Dependency Injection token: \" + strings_1.stringify(token));\n            }\n            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n        };\n        return resolvable.deps.map(getDependency);\n    };\n    return ResolveContext;\n}());\nexports.ResolveContext = ResolveContext;\nvar UIInjectorImpl = (function () {\n    function UIInjectorImpl(context) {\n        this.context = context;\n        /** The native injector ($injector on ng1, Root Injector on ng2, justjs injector for everything else) */\n        this.native = coreservices_1.services.$injector;\n    }\n    UIInjectorImpl.prototype.get = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable) {\n            if (!resolvable.resolved) {\n                throw new Error(\"Resolvable async .get() not complete:\" + strings_1.stringify(resolvable.token));\n            }\n            return resolvable.data;\n        }\n        return coreservices_1.services.$injector.get(token);\n    };\n    UIInjectorImpl.prototype.getAsync = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable)\n            return resolvable.get(this.context);\n        return coreservices_1.services.$q.when(coreservices_1.services.$injector.get(token));\n    };\n    return UIInjectorImpl;\n}());\n//# sourceMappingURL=resolveContext.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/resolve/resolveContext.js\n ** module id = 18\n ** module chunks = 0 1\n **/","\"use strict\";\nexports.resolvePolicies = {\n    when: {\n        LAZY: \"LAZY\",\n        EAGER: \"EAGER\"\n    },\n    async: {\n        WAIT: \"WAIT\",\n        NOWAIT: \"NOWAIT\",\n        RXWAIT: \"RXWAIT\"\n    }\n};\n//# sourceMappingURL=interface.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/resolve/interface.js\n ** module id = 19\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module resolve */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar trace_1 = require(\"../common/trace\");\nvar strings_1 = require(\"../common/strings\");\nvar predicates_1 = require(\"../common/predicates\");\n// TODO: explicitly make this user configurable\nexports.defaultResolvePolicy = {\n    when: \"LAZY\",\n    async: \"WAIT\"\n};\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nvar Resolvable = (function () {\n    function Resolvable(arg1, resolveFn, deps, policy, data) {\n        this.resolved = false;\n        this.promise = undefined;\n        if (arg1 instanceof Resolvable) {\n            common_1.extend(this, arg1);\n        }\n        else if (predicates_1.isFunction(resolveFn)) {\n            if (arg1 == null || arg1 == undefined)\n                throw new Error(\"new Resolvable(): token argument is required\");\n            if (!predicates_1.isFunction(resolveFn))\n                throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n            this.token = arg1;\n            this.policy = policy;\n            this.resolveFn = resolveFn;\n            this.deps = deps || [];\n            this.data = data;\n            this.resolved = data !== undefined;\n            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;\n        }\n        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {\n            var literal = arg1;\n            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n        }\n    }\n    Resolvable.prototype.getPolicy = function (state) {\n        var thisPolicy = this.policy || {};\n        var statePolicy = state && state.resolvePolicy || {};\n        return {\n            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,\n            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,\n        };\n    };\n    /**\n     * Asynchronously resolve this Resolvable's data\n     *\n     * Given a ResolveContext that this Resolvable is found in:\n     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n     * and update the Resolvable's state\n     */\n    Resolvable.prototype.resolve = function (resolveContext, trans) {\n        var _this = this;\n        var $q = coreservices_1.services.$q;\n        // Gets all dependencies from ResolveContext and wait for them to be resolved\n        var getResolvableDependencies = function () {\n            return $q.all(resolveContext.getDependencies(_this).map(function (r) {\n                return r.get(resolveContext, trans);\n            }));\n        };\n        // Invokes the resolve function passing the resolved dependencies as arguments\n        var invokeResolveFn = function (resolvedDeps) {\n            return _this.resolveFn.apply(null, resolvedDeps);\n        };\n        /**\n         * For RXWAIT policy:\n         *\n         * Given an observable returned from a resolve function:\n         * - enables .cache() mode (this allows multicast subscribers)\n         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n         * - Waits for the promise, then return the cached observable (not the first emitted value).\n         */\n        var waitForRx = function (observable$) {\n            var cached = observable$.cache(1);\n            return cached.take(1).toPromise().then(function () { return cached; });\n        };\n        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n        var node = resolveContext.findNode(this);\n        var state = node && node.state;\n        var maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : common_1.identity;\n        // After the final value has been resolved, update the state of the Resolvable\n        var applyResolvedValue = function (resolvedValue) {\n            _this.data = resolvedValue;\n            _this.resolved = true;\n            trace_1.trace.traceResolvableResolved(_this, trans);\n            return _this.data;\n        };\n        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n        return this.promise = $q.when()\n            .then(getResolvableDependencies)\n            .then(invokeResolveFn)\n            .then(maybeWaitForRx)\n            .then(applyResolvedValue);\n    };\n    /**\n     * Gets a promise for this Resolvable's data.\n     *\n     * Fetches the data and returns a promise.\n     * Returns the existing promise if it has already been fetched once.\n     */\n    Resolvable.prototype.get = function (resolveContext, trans) {\n        return this.promise || this.resolve(resolveContext, trans);\n    };\n    Resolvable.prototype.toString = function () {\n        return \"Resolvable(token: \" + strings_1.stringify(this.token) + \", requires: [\" + this.deps.map(strings_1.stringify) + \"])\";\n    };\n    Resolvable.prototype.clone = function () {\n        return new Resolvable(this);\n    };\n    Resolvable.fromData = function (token, data) {\n        return new Resolvable(token, function () { return data; }, null, null, data);\n    };\n    return Resolvable;\n}());\nexports.Resolvable = Resolvable;\n//# sourceMappingURL=resolvable.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/resolve/resolvable.js\n ** module id = 20\n ** module chunks = 0 1\n **/","/** @module path */ /** for typedoc */\n\"use strict\";\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar targetState_1 = require(\"../state/targetState\");\nvar node_1 = require(\"../path/node\");\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nvar PathFactory = (function () {\n    function PathFactory() {\n    }\n    /** Given a PathNode[], create an TargetState */\n    PathFactory.makeTargetState = function (path) {\n        var state = common_1.tail(path).state;\n        return new targetState_1.TargetState(state, state, path.map(hof_1.prop(\"paramValues\")).reduce(common_1.mergeR, {}));\n    };\n    PathFactory.buildPath = function (targetState) {\n        var toParams = targetState.params();\n        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });\n    };\n    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n    PathFactory.buildToPath = function (fromPath, targetState) {\n        var toPath = PathFactory.buildPath(targetState);\n        if (targetState.options().inherit) {\n            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n        }\n        return toPath;\n    };\n    /**\n     * Creates ViewConfig objects and adds to nodes.\n     *\n     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n     */\n    PathFactory.applyViewConfigs = function ($view, path, states) {\n        // Only apply the viewConfigs to the nodes for the given states\n        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {\n            var viewDecls = common_1.values(node.state.views || {});\n            var subPath = PathFactory.subPath(path, function (n) { return n === node; });\n            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n            node.views = viewConfigs.reduce(common_1.unnestR, []);\n        });\n    };\n    /**\n     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n     *\n     * For a parameter in a node to be inherited from the from path:\n     * - The toPath's node must have a matching node in the fromPath (by state).\n     * - The parameter name must not be found in the toKeys parameter array.\n     *\n     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n     * it is not inherited from the fromPath.\n     */\n    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {\n        if (toKeys === void 0) { toKeys = []; }\n        function nodeParamVals(path, state) {\n            var node = common_1.find(path, hof_1.propEq('state', state));\n            return common_1.extend({}, node && node.paramValues);\n        }\n        /**\n         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n         */\n        function makeInheritedParamsNode(toNode) {\n            // All param values for the node (may include default key/vals, when key was not found in toParams)\n            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);\n            // limited to only those keys found in toParams\n            var incomingParamVals = common_1.pick(toParamVals, toKeys);\n            toParamVals = common_1.omit(toParamVals, toKeys);\n            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};\n            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);\n            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);\n        }\n        // The param keys specified by the incoming toParams\n        return toPath.map(makeInheritedParamsNode);\n    };\n    /**\n     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n     */\n    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {\n        var keep = 0, max = Math.min(fromPath.length, toPath.length);\n        var staticParams = function (state) {\n            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));\n        };\n        var nodesMatch = function (node1, node2) {\n            return node1.equals(node2, staticParams(node1.state));\n        };\n        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n            keep++;\n        }\n        /** Given a retained node, return a new node which uses the to node's param values */\n        function applyToParams(retainedNode, idx) {\n            var cloned = node_1.PathNode.clone(retainedNode);\n            cloned.paramValues = toPath[idx].paramValues;\n            return cloned;\n        }\n        var from, retained, exiting, entering, to;\n        from = fromPath;\n        retained = from.slice(0, keep);\n        exiting = from.slice(keep);\n        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n        var retainedWithToParams = retained.map(applyToParams);\n        entering = toPath.slice(keep);\n        to = (retainedWithToParams).concat(entering);\n        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };\n    };\n    /**\n     * Return a subpath of a path, which stops at the first matching node\n     *\n     * Given an array of nodes, returns a subset of the array starting from the first node,\n     * stopping when the first node matches the predicate.\n     *\n     * @param path a path of [[PathNode]]s\n     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n     * @returns a subpath up to the matching node, or undefined if no match is found\n     */\n    PathFactory.subPath = function (path, predicate) {\n        var node = common_1.find(path, predicate);\n        var elementIdx = path.indexOf(node);\n        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n    };\n    /** Gets the raw parameter values from a path */\n    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };\n    return PathFactory;\n}());\nexports.PathFactory = PathFactory;\n//# sourceMappingURL=pathFactory.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/path/pathFactory.js\n ** module id = 21\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module path */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar param_1 = require(\"../params/param\");\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nvar PathNode = (function () {\n    function PathNode(stateOrPath) {\n        if (stateOrPath instanceof PathNode) {\n            var node = stateOrPath;\n            this.state = node.state;\n            this.paramSchema = node.paramSchema.slice();\n            this.paramValues = common_1.extend({}, node.paramValues);\n            this.resolvables = node.resolvables.slice();\n            this.views = node.views && node.views.slice();\n        }\n        else {\n            var state = stateOrPath;\n            this.state = state;\n            this.paramSchema = state.parameters({ inherit: false });\n            this.paramValues = {};\n            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n        }\n    }\n    /** Sets [[paramValues]] for the node, from the values of an object hash */\n    PathNode.prototype.applyRawParams = function (params) {\n        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});\n        return this;\n    };\n    /** Gets a specific [[Param]] metadata that belongs to the node */\n    PathNode.prototype.parameter = function (name) {\n        return common_1.find(this.paramSchema, hof_1.propEq(\"id\", name));\n    };\n    /**\n     * @returns true if the state and parameter values for another PathNode are\n     * equal to the state and param values for this PathNode\n     */\n    PathNode.prototype.equals = function (node, keys) {\n        var _this = this;\n        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }\n        var paramValsEq = function (key) {\n            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);\n        };\n        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);\n    };\n    /** Returns a clone of the PathNode */\n    PathNode.clone = function (node) {\n        return new PathNode(node);\n    };\n    /**\n     * Returns a new path which is a subpath of the first path which matched the second path.\n     *\n     * The new path starts from root and contains any nodes that match the nodes in the second path.\n     * Nodes are compared using their state property and parameter values.\n     */\n    PathNode.matching = function (pathA, pathB) {\n        var matching = [];\n        for (var i = 0; i < pathA.length && i < pathB.length; i++) {\n            var a = pathA[i], b = pathB[i];\n            if (a.state !== b.state)\n                break;\n            if (!param_1.Param.equals(a.paramSchema, a.paramValues, b.paramValues))\n                break;\n            matching.push(a);\n        }\n        return matching;\n    };\n    return PathNode;\n}());\nexports.PathNode = PathNode;\n//# sourceMappingURL=node.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/path/node.js\n ** module id = 22\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module params */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar urlMatcherConfig_1 = require(\"../url/urlMatcherConfig\");\nvar type_1 = require(\"./type\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar isShorthand = function (cfg) {\n    return [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n};\n(function (DefType) {\n    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n})(exports.DefType || (exports.DefType = {}));\nvar DefType = exports.DefType;\nfunction unwrapShorthand(cfg) {\n    cfg = isShorthand(cfg) && { value: cfg } || cfg;\n    return common_1.extend(cfg, {\n        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }\n    });\n}\nfunction getType(cfg, urlType, location, id, paramTypes) {\n    if (cfg.type && urlType && urlType.name !== 'string')\n        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\n        return paramTypes.type(cfg.type);\n    if (urlType)\n        return urlType;\n    if (!cfg.type)\n        return (location === DefType.CONFIG ? paramTypes.type(\"any\") : paramTypes.type(\"string\"));\n    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n/**\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional) {\n    var squash = config.squash;\n    if (!isOptional || squash === false)\n        return false;\n    if (!predicates_1.isDefined(squash) || squash == null)\n        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();\n    if (squash === true || predicates_1.isString(squash))\n        return squash;\n    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n}\nfunction getReplace(config, arrayMode, isOptional, squash) {\n    var replace, configuredKeys, defaultPolicy = [\n        { from: \"\", to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n    ];\n    replace = predicates_1.isArray(config.replace) ? config.replace : [];\n    if (predicates_1.isString(squash))\n        replace.push({ from: squash, to: undefined });\n    configuredKeys = common_1.map(replace, hof_1.prop(\"from\"));\n    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n}\nvar Param = (function () {\n    function Param(id, type, config, location, paramTypes) {\n        config = unwrapShorthand(config);\n        type = getType(config, type, location, id, paramTypes);\n        var arrayMode = getArrayMode();\n        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n        var isOptional = config.value !== undefined;\n        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n        var squash = getSquashPolicy(config, isOptional);\n        var replace = getReplace(config, arrayMode, isOptional, squash);\n        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n        function getArrayMode() {\n            var arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;\n        }\n        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });\n    }\n    Param.prototype.isDefaultValue = function (value) {\n        return this.isOptional && this.type.equals(this.value(), value);\n    };\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    Param.prototype.value = function (value) {\n        var _this = this;\n        /**\n         * [Internal] Get the default value of a parameter, which may be an injectable function.\n         */\n        var $$getDefaultValue = function () {\n            if (!coreservices_1.services.$injector)\n                throw new Error(\"Injectable functions cannot be called at configuration time\");\n            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);\n            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n            return defaultValue;\n        };\n        var $replace = function (val) {\n            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop(\"to\"));\n            return replacement.length ? replacement[0] : val;\n        };\n        value = $replace(value);\n        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);\n    };\n    Param.prototype.isSearch = function () {\n        return this.location === DefType.SEARCH;\n    };\n    Param.prototype.validates = function (value) {\n        // There was no parameter value, but the param is optional\n        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)\n            return true;\n        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n        var normalized = this.type.$normalize(value);\n        if (!this.type.is(normalized))\n            return false;\n        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n        var encoded = this.type.encode(normalized);\n        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));\n    };\n    Param.prototype.toString = function () {\n        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n    };\n    /** Creates a new [[Param]] from a CONFIG block */\n    Param.fromConfig = function (id, type, config, paramTypes) {\n        return new Param(id, type, config, DefType.CONFIG, paramTypes);\n    };\n    /** Creates a new [[Param]] from a url PATH */\n    Param.fromPath = function (id, type, config, paramTypes) {\n        return new Param(id, type, config, DefType.PATH, paramTypes);\n    };\n    /** Creates a new [[Param]] from a url SEARCH */\n    Param.fromSearch = function (id, type, config, paramTypes) {\n        return new Param(id, type, config, DefType.SEARCH, paramTypes);\n    };\n    Param.values = function (params, values) {\n        if (values === void 0) { values = {}; }\n        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});\n    };\n    /**\n     * Finds [[Param]] objects which have different param values\n     *\n     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n     *\n     * @param params: The list of Param objects to filter\n     * @param values1: The first set of parameter values\n     * @param values2: the second set of parameter values\n     *\n     * @returns any Param objects whose values were different between values1 and values2\n     */\n    Param.changed = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n    };\n    /**\n     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n     *\n     * @param params The list of [[Param]] objects to check\n     * @param values1 The first set of param values\n     * @param values2 The second set of param values\n     *\n     * @returns true if the param values in values1 and values2 are equal\n     */\n    Param.equals = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return Param.changed(params, values1, values2).length === 0;\n    };\n    /** Returns true if a the parameter values are valid, according to the Param definitions */\n    Param.validates = function (params, values) {\n        if (values === void 0) { values = {}; }\n        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);\n    };\n    return Param;\n}());\nexports.Param = Param;\n//# sourceMappingURL=param.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/params/param.js\n ** module id = 23\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module url */ /** for typedoc */\nvar predicates_1 = require(\"../common/predicates\");\nvar MatcherConfig = (function () {\n    function MatcherConfig() {\n        this._isCaseInsensitive = false;\n        this._isStrictMode = true;\n        this._defaultSquashPolicy = false;\n    }\n    MatcherConfig.prototype.caseInsensitive = function (value) {\n        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;\n    };\n    MatcherConfig.prototype.strictMode = function (value) {\n        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;\n    };\n    MatcherConfig.prototype.defaultSquashPolicy = function (value) {\n        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))\n            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;\n    };\n    return MatcherConfig;\n}());\nexports.MatcherConfig = MatcherConfig;\n// TODO: Do not export global instance; create one in UIRouter() constructor\nexports.matcherConfig = new MatcherConfig();\n//# sourceMappingURL=urlMatcherConfig.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/url/urlMatcherConfig.js\n ** module id = 24\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module params */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\n/**\n * Wraps up a `ParamType` object to handle array values.\n */\nfunction ArrayType(type, mode) {\n    var _this = this;\n    // Wrap non-array value as array\n    function arrayWrap(val) {\n        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);\n    }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n        switch (val.length) {\n            case 0: return undefined;\n            case 1: return mode === \"auto\" ? val[0] : val;\n            default: return val;\n        }\n    }\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n        return function handleArray(val) {\n            if (predicates_1.isArray(val) && val.length === 0)\n                return val;\n            var arr = arrayWrap(val);\n            var result = common_1.map(arr, callback);\n            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n        };\n    }\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n        return function handleArray(val1, val2) {\n            var left = arrayWrap(val1), right = arrayWrap(val2);\n            if (left.length !== right.length)\n                return false;\n            for (var i = 0; i < left.length; i++) {\n                if (!callback(left[i], right[i]))\n                    return false;\n            }\n            return true;\n        };\n    }\n    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\n        var paramTypeFn = type[name].bind(type);\n        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n        _this[name] = wrapperFn(paramTypeFn);\n    });\n    common_1.extend(this, {\n        dynamic: type.dynamic,\n        name: type.name,\n        pattern: type.pattern,\n        is: arrayHandler(type.is.bind(type), true),\n        $arrayMode: mode\n    });\n}\n/**\n * A class that implements Custom Parameter Type functionality.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * @example\n * ```\n *\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * ```\n */\nvar ParamType = (function () {\n    /**\n     * @param def  A configuration object which contains the custom type definition.  The object's\n     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n     * @returns a new ParamType object\n     */\n    function ParamType(def) {\n        this.pattern = /.*/;\n        common_1.extend(this, def);\n    }\n    // consider these four methods to be \"abstract methods\" that should be overridden\n    /** @inheritdoc */\n    ParamType.prototype.is = function (val, key) { return true; };\n    /** @inheritdoc */\n    ParamType.prototype.encode = function (val, key) { return val; };\n    /** @inheritdoc */\n    ParamType.prototype.decode = function (val, key) { return val; };\n    /** @inheritdoc */\n    ParamType.prototype.equals = function (a, b) { return a == b; };\n    ParamType.prototype.$subPattern = function () {\n        var sub = this.pattern.toString();\n        return sub.substr(1, sub.length - 2);\n    };\n    ParamType.prototype.toString = function () {\n        return \"{ParamType:\" + this.name + \"}\";\n    };\n    /** Given an encoded string, or a decoded object, returns a decoded object */\n    ParamType.prototype.$normalize = function (val) {\n        return this.is(val) ? val : this.decode(val);\n    };\n    /**\n     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n     * e.g.:\n     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n     * - url: \"/path?queryParam=1&queryParam=2\n     * - $stateParams.queryParam will be [1, 2]\n     * if `mode` is \"auto\", then\n     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n     */\n    ParamType.prototype.$asArray = function (mode, isSearch) {\n        if (!mode)\n            return this;\n        if (mode === \"auto\" && !isSearch)\n            throw new Error(\"'auto' array mode is for query parameters only\");\n        return new ArrayType(this, mode);\n    };\n    return ParamType;\n}());\nexports.ParamType = ParamType;\n//# sourceMappingURL=type.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/params/type.js\n ** module id = 25\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module core */ /** */\nvar urlMatcherFactory_1 = require(\"./url/urlMatcherFactory\");\nvar urlRouter_1 = require(\"./url/urlRouter\");\nvar state_1 = require(\"./state/state\");\nvar urlRouter_2 = require(\"./url/urlRouter\");\nvar transitionService_1 = require(\"./transition/transitionService\");\nvar view_1 = require(\"./view/view\");\nvar stateRegistry_1 = require(\"./state/stateRegistry\");\nvar stateService_1 = require(\"./state/stateService\");\nvar globals_1 = require(\"./globals\");\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * This class instantiates and wires the global UI-Router services.\n *\n * After instantiating a new instance of the Router class, configure it for your app.  For instance, register\n * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor\n * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])\n */\nvar UIRouter = (function () {\n    function UIRouter() {\n        this.viewService = new view_1.ViewService();\n        this.transitionService = new transitionService_1.TransitionService(this);\n        this.globals = new globals_1.Globals(this.transitionService);\n        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();\n        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);\n        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);\n        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);\n        /** @hidden TODO: move this to ng1.ts */\n        this.stateProvider = new state_1.StateProvider(this.stateRegistry);\n        this.stateService = new stateService_1.StateService(this);\n        this.viewService.rootContext(this.stateRegistry.root());\n        this.globals.$current = this.stateRegistry.root();\n        this.globals.current = this.globals.$current.self;\n    }\n    return UIRouter;\n}());\nexports.UIRouter = UIRouter;\n//# sourceMappingURL=router.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/router.js\n ** module id = 26\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module url */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar urlMatcher_1 = require(\"./urlMatcher\");\nvar urlMatcherConfig_1 = require(\"./urlMatcherConfig\");\nvar param_1 = require(\"../params/param\");\nvar paramTypes_1 = require(\"../params/paramTypes\");\n/** @hidden */\nfunction getDefaultConfig() {\n    return {\n        strict: urlMatcherConfig_1.matcherConfig.strictMode(),\n        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()\n    };\n}\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nvar UrlMatcherFactory = (function () {\n    function UrlMatcherFactory() {\n        this.paramTypes = new paramTypes_1.ParamTypes();\n        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });\n    }\n    /**\n     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n     *\n     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n     * @returns the current value of caseInsensitive\n     */\n    UrlMatcherFactory.prototype.caseInsensitive = function (value) {\n        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);\n    };\n    /**\n     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n     *\n     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n     * @returns the current value of strictMode\n     */\n    UrlMatcherFactory.prototype.strictMode = function (value) {\n        return urlMatcherConfig_1.matcherConfig.strictMode(value);\n    };\n    /**\n     * Sets the default behavior when generating or matching URLs with default parameter values.\n     *\n     * @param value A string that defines the default parameter URL squashing behavior.\n     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n     *             the parameter value from the URL and replace it with this string.\n     * @returns the current value of defaultSquashPolicy\n     */\n    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {\n        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);\n    };\n    /**\n     * Creates a [[UrlMatcher]] for the specified pattern.\n     *\n     * @param pattern  The URL pattern.\n     * @param config  The config object hash.\n     * @returns The UrlMatcher.\n     */\n    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));\n    };\n    /**\n     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n     *\n     * @param object  The object to perform the type check against.\n     * @returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    UrlMatcherFactory.prototype.isMatcher = function (object) {\n        // TODO: typeof?\n        if (!predicates_1.isObject(object))\n            return false;\n        var result = true;\n        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {\n            if (predicates_1.isFunction(val))\n                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));\n        });\n        return result;\n    };\n    ;\n    /**\n     * Creates and registers a custom [[ParamType]] object\n     *\n     * A [[ParamType]] can be used to generate URLs with typed parameters.\n     *\n     * @param name  The type name.\n     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n     * @param definitionFn A function that is injected before the app runtime starts.\n     *        The result of this function should be a [[ParamTypeDefinition]].\n     *        The result is merged into the existing `definition`.\n     *        See [[ParamType]] for information on the values accepted.\n     *\n     * @returns - if a type was registered: the [[UrlMatcherFactory]]\n     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n     *\n     * Note: Register custom types *before using them* in a state definition.\n     *\n     * See [[ParamTypeDefinition]] for examples\n     */\n    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {\n        var type = this.paramTypes.type(name, definition, definitionFn);\n        return !predicates_1.isDefined(definition) ? type : this;\n    };\n    ;\n    /** @hidden */\n    UrlMatcherFactory.prototype.$get = function () {\n        this.paramTypes.enqueue = false;\n        this.paramTypes._flushTypeQueue();\n        return this;\n    };\n    ;\n    return UrlMatcherFactory;\n}());\nexports.UrlMatcherFactory = UrlMatcherFactory;\n//# sourceMappingURL=urlMatcherFactory.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/url/urlMatcherFactory.js\n ** module id = 27\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module url */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar param_1 = require(\"../params/param\");\nvar predicates_2 = require(\"../common/predicates\");\nvar param_2 = require(\"../params/param\");\nvar common_2 = require(\"../common/common\");\nvar common_3 = require(\"../common/common\");\n/** @hidden */\nfunction quoteRegExp(string, param) {\n    var surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!param)\n        return result;\n    switch (param.squash) {\n        case false:\n            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n            break;\n        case true:\n            result = result.replace(/\\/$/, '');\n            surroundPattern = ['(?:\\/(', ')|\\/)?'];\n            break;\n        default:\n            surroundPattern = [(\"(\" + param.squash + \"|\"), ')?'];\n            break;\n    }\n    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/** @hidden */\nvar memoizeTo = function (obj, prop, fn) {\n    return obj[prop] = obj[prop] || fn();\n};\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)\n * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all\n * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nvar UrlMatcher = (function () {\n    /**\n     * @param pattern The pattern to compile into a matcher.\n     * @param paramTypes The [[ParamTypes]] registry\n     * @param config  A configuration object\n     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n     */\n    function UrlMatcher(pattern, paramTypes, config) {\n        var _this = this;\n        this.config = config;\n        /** @hidden */\n        this._cache = { path: [], pattern: null };\n        /** @hidden */\n        this._children = [];\n        /** @hidden */\n        this._params = [];\n        /** @hidden */\n        this._segments = [];\n        /** @hidden */\n        this._compiled = [];\n        this.pattern = pattern;\n        this.config = common_1.defaults(this.config, {\n            params: {},\n            strict: true,\n            caseInsensitive: false,\n            paramMap: common_1.identity\n        });\n        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n        //   '*' name\n        //   ':' name\n        //   '{' name '}'\n        //   '{' name ':' regexp '}'\n        // The regular expression is somewhat complicated due to the need to allow curly braces\n        // inside the regular expression. The placeholder regexp breaks down as follows:\n        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n        //    \\\\.                            - a backslash escape\n        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g, last = 0, m, patterns = [];\n        var checkParamErrors = function (id) {\n            if (!UrlMatcher.nameValidator.test(id))\n                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n            if (common_1.find(_this._params, hof_1.propEq('id', id)))\n                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n        };\n        // Split into static segments separated by path parameter placeholders.\n        // The number of segments is always 1 more than the number of parameters.\n        var matchDetails = function (m, isSearch) {\n            // IE[78] returns '' for unmatched groups instead of null\n            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);\n            return {\n                id: id,\n                regexp: regexp,\n                cfg: _this.config.params[id],\n                segment: pattern.substring(last, m.index),\n                type: !regexp ? null : paramTypes.type(regexp || \"string\") || common_1.inherit(paramTypes.type(\"string\"), {\n                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)\n                })\n            };\n        };\n        var p, segment;\n        while ((m = placeholder.exec(pattern))) {\n            p = matchDetails(m, false);\n            if (p.segment.indexOf('?') >= 0)\n                break; // we're into the search part\n            checkParamErrors(p.id);\n            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));\n            this._segments.push(p.segment);\n            patterns.push([p.segment, common_1.tail(this._params)]);\n            last = placeholder.lastIndex;\n        }\n        segment = pattern.substring(last);\n        // Find any search parameter names and remove them from the last segment\n        var i = segment.indexOf('?');\n        if (i >= 0) {\n            var search = segment.substring(i);\n            segment = segment.substring(0, i);\n            if (search.length > 0) {\n                last = 0;\n                while ((m = searchPlaceholder.exec(search))) {\n                    p = matchDetails(m, true);\n                    checkParamErrors(p.id);\n                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));\n                    last = placeholder.lastIndex;\n                }\n            }\n        }\n        this._segments.push(segment);\n        common_1.extend(this, {\n            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),\n            prefix: this._segments[0]\n        });\n        Object.freeze(this);\n    }\n    /**\n     * Creates a new concatenated UrlMatcher\n     *\n     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n     *\n     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n     */\n    UrlMatcher.prototype.append = function (url) {\n        this._children.push(url);\n        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });\n        url._cache.path = this._cache.path.concat(this);\n        return url;\n    };\n    /** @hidden */\n    UrlMatcher.prototype.isRoot = function () {\n        return this._cache.path.length === 0;\n    };\n    /** Returns the input pattern string */\n    UrlMatcher.prototype.toString = function () {\n        return this.pattern;\n    };\n    /**\n     * Tests the specified url/path against this matcher.\n     *\n     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n     * parameter values.  Returns null if the path does not match.\n     *\n     * The returned object contains the values\n     * of any search parameters that are mentioned in the pattern, but their value may be null if\n     * they are not present in `search`. This means that search parameters are always treated\n     * as optional.\n     *\n     * @example\n     * ```js\n     *\n     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n     *   x: '1', q: 'hello'\n     * });\n     * // returns { id: 'bob', q: 'hello', r: null }\n     * ```\n     *\n     * @param path    The URL path to match, e.g. `$location.path()`.\n     * @param search  URL search parameters, e.g. `$location.search()`.\n     * @param hash    URL hash e.g. `$location.hash()`.\n     * @param options\n     *\n     * @returns The captured parameter values.\n     */\n    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n        var _this = this;\n        if (search === void 0) { search = {}; }\n        if (options === void 0) { options = {}; }\n        var match = memoizeTo(this._cache, 'pattern', function () {\n            return new RegExp([\n                '^',\n                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),\n                _this.config.strict === false ? '\\/?' : '',\n                '$'\n            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n        }).exec(path);\n        if (!match)\n            return null;\n        //options = defaults(options, { isolate: false });\n        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n        if (nPathSegments !== match.length - 1)\n            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n        function decodePathArray(string) {\n            var reverseString = function (str) { return str.split(\"\").reverse().join(\"\"); };\n            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, \"-\"); };\n            var split = reverseString(string).split(/-(?!\\\\)/);\n            var allReversed = common_1.map(split, reverseString);\n            return common_1.map(allReversed, unquoteDashes).reverse();\n        }\n        for (var i = 0; i < nPathSegments; i++) {\n            var param = pathParams[i];\n            var value = match[i + 1];\n            // if the param value matches a pre-replace pair, replace the value before decoding.\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (value && param.array === true)\n                value = decodePathArray(value);\n            if (predicates_2.isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        }\n        searchParams.forEach(function (param) {\n            var value = search[param.id];\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (predicates_2.isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        });\n        if (hash)\n            values[\"#\"] = hash;\n        return values;\n    };\n    /**\n     * @hidden\n     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n     *\n     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n     *    pattern has no parameters, an empty array is returned.\n     */\n    UrlMatcher.prototype.parameters = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        if (opts.inherit === false)\n            return this._params;\n        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));\n    };\n    /**\n     * @hidden\n     * Returns a single parameter from this UrlMatcher by id\n     *\n     * @param id\n     * @param opts\n     * @returns {T|Param|any|boolean|UrlMatcher|null}\n     */\n    UrlMatcher.prototype.parameter = function (id, opts) {\n        if (opts === void 0) { opts = {}; }\n        var parent = common_1.tail(this._cache.path);\n        return (common_1.find(this._params, hof_1.propEq('id', id)) ||\n            (opts.inherit !== false && parent && parent.parameter(id)) ||\n            null);\n    };\n    /**\n     * Validates the input parameter values against this UrlMatcher\n     *\n     * Checks an object hash of parameters to validate their correctness according to the parameter\n     * types of this `UrlMatcher`.\n     *\n     * @param params The object hash of parameters to validate.\n     * @returns Returns `true` if `params` validates, otherwise `false`.\n     */\n    UrlMatcher.prototype.validates = function (params) {\n        var _this = this;\n        var validParamVal = function (param, val) {\n            return !param || param.validates(val);\n        };\n        return common_1.pairs(params || {}).map(function (_a) {\n            var key = _a[0], val = _a[1];\n            return validParamVal(_this.parameter(key), val);\n        }).reduce(common_1.allTrueR, true);\n    };\n    /**\n     * Given a set of parameter values, creates a URL from this UrlMatcher.\n     *\n     * Creates a URL that matches this pattern by substituting the specified values\n     * for the path and search parameters.\n     *\n     * @example\n     * ```js\n     *\n     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n     * // returns '/user/bob?q=yes'\n     * ```\n     *\n     * @param values  the values to substitute for the parameters in this pattern.\n     * @returns the formatted URL (path and optionally search part).\n     */\n    UrlMatcher.prototype.format = function (values) {\n        if (values === void 0) { values = {}; }\n        if (!this.validates(values))\n            return null;\n        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n        var urlMatchers = this._cache.path.slice().concat(this);\n        // Extract all the static segments and Params into an ordered array\n        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);\n        // Extract the query params into a separate array\n        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);\n        /**\n         * Given a Param,\n         * Applies the parameter value, then returns details about it\n         */\n        function getDetails(param) {\n            // Normalize to typed value\n            var value = param.value(values[param.id]);\n            var isDefaultValue = param.isDefaultValue(value);\n            // Check if we're in squash mode for the parameter\n            var squash = isDefaultValue ? param.squash : false;\n            // Allow the Parameter's Type to encode the value\n            var encoded = param.type.encode(value);\n            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n        }\n        // Build up the path-portion from the list of static segments and parameters\n        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n            // The element is a static segment (a raw string); just append it\n            if (predicates_1.isString(x))\n                return acc + x;\n            // Otherwise, it's a Param.  Fetch details about the parameter value\n            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;\n            // If squash is === true, try to remove a slash from the path\n            if (squash === true)\n                return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n            // If squash is a string, use the string for the param value\n            if (predicates_1.isString(squash))\n                return acc + squash;\n            if (squash !== false)\n                return acc; // ?\n            if (encoded == null)\n                return acc;\n            // If this parameter value is an array, encode the value using encodeDashes\n            if (predicates_1.isArray(encoded))\n                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join(\"-\");\n            // If the parameter type is \"raw\", then do not encodeURIComponent\n            if (param.type.raw)\n                return acc + encoded;\n            // Encode the value\n            return acc + encodeURIComponent(encoded);\n        }, \"\");\n        // Build the query string by applying parameter values (array or regular)\n        // then mapping to key=value, then flattening and joining using \"&\"\n        var queryString = queryParams.map(function (param) {\n            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;\n            if (encoded == null || (isDefaultValue && squash !== false))\n                return;\n            if (!predicates_1.isArray(encoded))\n                encoded = [encoded];\n            if (encoded.length === 0)\n                return;\n            if (!param.type.raw)\n                encoded = common_1.map(encoded, encodeURIComponent);\n            return encoded.map(function (val) { return (param.id + \"=\" + val); });\n        }).filter(common_1.identity).reduce(common_2.unnestR, []).join(\"&\");\n        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n        return pathString + (queryString ? \"?\" + queryString : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n    };\n    /** @hidden */\n    UrlMatcher.encodeDashes = function (str) {\n        return encodeURIComponent(str).replace(/-/g, function (c) { return (\"%5C%\" + c.charCodeAt(0).toString(16).toUpperCase()); });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n        var staticSegments = matcher._segments;\n        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });\n        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== \"\" && predicates_2.isDefined(x); });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's query params */\n    UrlMatcher.queryParams = function (matcher) {\n        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });\n    };\n    /** @hidden */\n    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n    return UrlMatcher;\n}());\nexports.UrlMatcher = UrlMatcher;\n//# sourceMappingURL=urlMatcher.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/url/urlMatcher.js\n ** module id = 28\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module params */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar hof_1 = require(\"../common/hof\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar type_1 = require(\"./type\");\n// Use tildes to pre-encode slashes.\n// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n// and bidirectional encoding/decoding fails.\n// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\nfunction valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\nfunction valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\nvar ParamTypes = (function () {\n    function ParamTypes() {\n        this.enqueue = true;\n        this.typeQueue = [];\n        this.defaultTypes = {\n            \"hash\": {\n                encode: valToString,\n                decode: valFromString,\n                is: hof_1.is(String),\n                pattern: /.*/,\n                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/\"\"\n            },\n            \"string\": {\n                encode: valToString,\n                decode: valFromString,\n                is: hof_1.is(String),\n                pattern: /[^/]*/\n            },\n            \"int\": {\n                encode: valToString,\n                decode: function (val) { return parseInt(val, 10); },\n                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },\n                pattern: /-?\\d+/\n            },\n            \"bool\": {\n                encode: function (val) { return val && 1 || 0; },\n                decode: function (val) { return parseInt(val, 10) !== 0; },\n                is: hof_1.is(Boolean),\n                pattern: /0|1/\n            },\n            \"date\": {\n                encode: function (val) {\n                    return !this.is(val) ? undefined : [\n                        val.getFullYear(),\n                        ('0' + (val.getMonth() + 1)).slice(-2),\n                        ('0' + val.getDate()).slice(-2)\n                    ].join(\"-\");\n                },\n                decode: function (val) {\n                    if (this.is(val))\n                        return val;\n                    var match = this.capture.exec(val);\n                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n                },\n                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n                equals: function (l, r) {\n                    return ['getFullYear', 'getMonth', 'getDate']\n                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n                },\n                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n            },\n            \"json\": {\n                encode: common_1.toJson,\n                decode: common_1.fromJson,\n                is: hof_1.is(Object),\n                equals: common_1.equals,\n                pattern: /[^/]*/\n            },\n            \"any\": {\n                encode: common_1.identity,\n                decode: common_1.identity,\n                equals: common_1.equals,\n                pattern: /.*/\n            }\n        };\n        // Register default types. Store them in the prototype of this.types.\n        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };\n        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});\n    }\n    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n        if (!predicates_1.isDefined(definition))\n            return this.types[name];\n        if (this.types.hasOwnProperty(name))\n            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));\n        if (definitionFn) {\n            this.typeQueue.push({ name: name, def: definitionFn });\n            if (!this.enqueue)\n                this._flushTypeQueue();\n        }\n        return this;\n    };\n    ParamTypes.prototype._flushTypeQueue = function () {\n        while (this.typeQueue.length) {\n            var type = this.typeQueue.shift();\n            if (type.pattern)\n                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));\n        }\n    };\n    return ParamTypes;\n}());\nexports.ParamTypes = ParamTypes;\n//# sourceMappingURL=paramTypes.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/params/paramTypes.js\n ** module id = 29\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module url */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar coreservices_1 = require(\"../common/coreservices\");\n/** @hidden */\nvar $location = coreservices_1.services.location;\n/** @hidden Returns a string that is a prefix of all strings matching the RegExp */\nfunction regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n}\n/** @hidden Interpolates matched values into a String.replace()-style pattern */\nfunction interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n        return match[what === '$' ? 0 : Number(what)];\n    });\n}\n/** @hidden */\nfunction handleIfMatch($injector, $stateParams, handler, match) {\n    if (!match)\n        return false;\n    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });\n    return predicates_1.isDefined(result) ? result : true;\n}\n/** @hidden */\nfunction appendBasePath(url, isHtml5, absolute) {\n    var baseHref = coreservices_1.services.locationConfig.baseHref();\n    if (baseHref === '/')\n        return url;\n    if (isHtml5)\n        return baseHref.slice(0, -1) + url;\n    if (absolute)\n        return baseHref.slice(1) + url;\n    return url;\n}\n// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n/** @hidden */\nfunction update(rules, otherwiseFn, evt) {\n    if (evt && evt.defaultPrevented)\n        return;\n    function check(rule) {\n        var handled = rule(coreservices_1.services.$injector, $location);\n        if (!handled)\n            return false;\n        if (predicates_1.isString(handled)) {\n            $location.setUrl(handled, true);\n        }\n        return true;\n    }\n    var n = rules.length;\n    for (var i = 0; i < n; i++) {\n        if (check(rules[i]))\n            return;\n    }\n    // always check otherwise last to allow dynamic updates to the set of rules\n    if (otherwiseFn)\n        check(otherwiseFn);\n}\n/**\n * Manages rules for client-side URL\n *\n * This class manages the router rules for what to do when the URL changes.\n */\nvar UrlRouterProvider = (function () {\n    function UrlRouterProvider($urlMatcherFactory, $stateParams) {\n        /** @hidden */\n        this.rules = [];\n        /** @hidden */\n        this.interceptDeferred = false;\n        this.$urlMatcherFactory = $urlMatcherFactory;\n        this.$stateParams = $stateParams;\n    }\n    /**\n     * Registers a url handler function.\n     *\n     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns\n     * a redirect, or performs some action.\n     *\n     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.\n     *\n     * @example\n     * ```js\n     *\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Here's an example of how you might allow case insensitive urls\n     *   $urlRouterProvider.rule(function ($injector, $location) {\n     *     var path = $location.path(),\n     *         normalized = path.toLowerCase();\n     *\n     *     if (path !== normalized) {\n     *       return normalized;\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param rule\n     * Handler function that takes `$injector` and `$location` services as arguments.\n     * You can use them to detect a url and return a different url as a string.\n     *\n     * @return [[$urlRouterProvider]] (`this`)\n     */\n    UrlRouterProvider.prototype.rule = function (rule) {\n        if (!predicates_1.isFunction(rule))\n            throw new Error(\"'rule' must be a function\");\n        this.rules.push(rule);\n        return this;\n    };\n    ;\n    /**\n     * Remove a rule previously registered\n     *\n     * @param rule the matcher rule that was previously registered using [[rule]]\n     * @return true if the rule was found (and removed)\n     */\n    UrlRouterProvider.prototype.removeRule = function (rule) {\n        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;\n    };\n    /**\n     * Defines the path or behavior to use when no url can be matched.\n     *\n     * @example\n     * ```js\n     *\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // if the path doesn't match any of the urls you configured\n     *   // otherwise will take care of routing the user to the\n     *   // specified url\n     *   $urlRouterProvider.otherwise('/index');\n     *\n     *   // Example of using function rule as param\n     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n     *     return '/a/valid/url';\n     *   });\n     * });\n     * ```\n     *\n     * @param rule\n     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.\n     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.\n     *\n     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n     */\n    UrlRouterProvider.prototype.otherwise = function (rule) {\n        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))\n            throw new Error(\"'rule' must be a string or function\");\n        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;\n        return this;\n    };\n    ;\n    /**\n     * Registers a handler for a given url matching.\n     *\n     * If the handler is a string, it is\n     * treated as a redirect, and is interpolated according to the syntax of match\n     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n     *\n     * If the handler is a function, it is injectable.\n     * It gets invoked if `$location` matches.\n     * You have the option of inject the match object as `$match`.\n     *\n     * The handler can return\n     *\n     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n     *   will continue trying to find another one that matches.\n     * - **string** which is treated as a redirect and passed to `$location.url()`\n     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n     *\n     * @example\n     * ```js\n     *\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n     *     if ($state.$current.navigable !== state ||\n     *         !equalForKeys($match, $stateParams) {\n     *      $state.transitionTo(state, $match, false);\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * @param what A pattern string to match, compiled as a [[UrlMatcher]].\n     * @param handler The path (or function that returns a path) that you want to redirect your user to.\n     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]\n     *\n     * Note: the handler may also invoke arbitrary code, such as `$state.go()`\n     */\n    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {\n        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }\n        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;\n        var redirect, handlerIsString = predicates_1.isString(handler);\n        // @todo Queue this\n        if (predicates_1.isString(what))\n            what = $urlMatcherFactory.compile(what);\n        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))\n            throw new Error(\"invalid 'handler' in when()\");\n        var strategies = {\n            matcher: function (_what, _handler) {\n                if (handlerIsString) {\n                    redirect = $urlMatcherFactory.compile(_handler);\n                    _handler = ['$match', redirect.format.bind(redirect)];\n                }\n                return common_1.extend(function () {\n                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));\n                }, {\n                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''\n                });\n            },\n            regex: function (_what, _handler) {\n                if (_what.global || _what.sticky)\n                    throw new Error(\"when() RegExp must not be global or sticky\");\n                if (handlerIsString) {\n                    redirect = _handler;\n                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n                }\n                return common_1.extend(function () {\n                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));\n                }, {\n                    prefix: regExpPrefix(_what)\n                });\n            }\n        };\n        var check = {\n            matcher: $urlMatcherFactory.isMatcher(what),\n            regex: what instanceof RegExp\n        };\n        for (var n in check) {\n            if (check[n]) {\n                var rule = strategies[n](what, handler);\n                ruleCallback(rule);\n                return this.rule(rule);\n            }\n        }\n        throw new Error(\"invalid 'what' in when()\");\n    };\n    ;\n    /**\n     * Disables monitoring of the URL.\n     *\n     * Call this method before UI-Router has bootstrapped.\n     * It will stop UI-Router from performing the initial url sync.\n     *\n     * This can be useful to perform some asynchronous initialization before the router starts.\n     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n     *\n     * @example\n     * ```js\n     *\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Prevent $urlRouter from automatically intercepting URL changes;\n     *   $urlRouterProvider.deferIntercept();\n     * })\n     *\n     * app.run(function (MyService, $urlRouter, $http) {\n     *   $http.get(\"/stuff\").then(function(resp) {\n     *     MyService.doStuff(resp.data);\n     *     $urlRouter.listen();\n     *     $urlRouter.sync();\n     *   });\n     * });\n     * ```\n     *\n     * @param defer Indicates whether to defer location change interception. Passing\n     *        no parameter is equivalent to `true`.\n     */\n    UrlRouterProvider.prototype.deferIntercept = function (defer) {\n        if (defer === undefined)\n            defer = true;\n        this.interceptDeferred = defer;\n    };\n    ;\n    return UrlRouterProvider;\n}());\nexports.UrlRouterProvider = UrlRouterProvider;\nvar UrlRouter = (function () {\n    /** @hidden */\n    function UrlRouter(urlRouterProvider) {\n        this.urlRouterProvider = urlRouterProvider;\n        common_1.bindFunctions(UrlRouter.prototype, this, this);\n    }\n    /**\n     * Checks the current URL for a matching rule\n     *\n     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n     * with the transition by calling `$urlRouter.sync()`.\n     *\n     * @example\n     * ```js\n     *\n     * angular.module('app', ['ui.router'])\n     *   .run(function($rootScope, $urlRouter) {\n     *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n     *       // Halt state change from even starting\n     *       evt.preventDefault();\n     *       // Perform custom logic\n     *       var meetsRequirement = ...\n     *       // Continue with the update and state transition if logic allows\n     *       if (meetsRequirement) $urlRouter.sync();\n     *     });\n     * });\n     * ```\n     */\n    UrlRouter.prototype.sync = function () {\n        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);\n    };\n    /**\n     * Starts listening for URL changes\n     *\n     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.\n     */\n    UrlRouter.prototype.listen = function () {\n        var _this = this;\n        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });\n    };\n    /**\n     * Internal API.\n     */\n    UrlRouter.prototype.update = function (read) {\n        if (read) {\n            this.location = $location.path();\n            return;\n        }\n        if ($location.path() === this.location)\n            return;\n        $location.setUrl(this.location, true);\n    };\n    /**\n     * Internal API.\n     *\n     * Pushes a new location to the browser history.\n     *\n     * @param urlMatcher\n     * @param params\n     * @param options\n     */\n    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n        var replace = options && !!options.replace;\n        $location.setUrl(urlMatcher.format(params || {}), replace);\n    };\n    /**\n     * Builds and returns a URL with interpolated parameters\n     *\n     * @example\n     * ```js\n     *\n     * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n     *   person: \"bob\"\n     * });\n     * // $bob == \"/about/bob\";\n     * ```\n     *\n     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n     * @param params An object of parameter values to fill the matcher's required parameters.\n     * @param options Options object. The options are:\n     *\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *\n     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n     */\n    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n        if (!urlMatcher.validates(params))\n            return null;\n        var url = urlMatcher.format(params);\n        options = options || { absolute: false };\n        var cfg = coreservices_1.services.locationConfig;\n        var isHtml5 = cfg.html5Mode();\n        if (!isHtml5 && url !== null) {\n            url = \"#\" + cfg.hashPrefix() + url;\n        }\n        url = appendBasePath(url, isHtml5, options.absolute);\n        if (!options.absolute || !url) {\n            return url;\n        }\n        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n    };\n    return UrlRouter;\n}());\nexports.UrlRouter = UrlRouter;\n//# sourceMappingURL=urlRouter.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/url/urlRouter.js\n ** module id = 30\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module state */ /** for typedoc */\nvar predicates_1 = require(\"../common/predicates\");\nvar common_1 = require(\"../common/common\");\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\nvar StateProvider = (function () {\n    function StateProvider(stateRegistry) {\n        this.stateRegistry = stateRegistry;\n        this.invalidCallbacks = [];\n        common_1.bindFunctions(StateProvider.prototype, this, this);\n    }\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$stateProvider#decorator\n     * @methodOf ui.router.state.$stateProvider\n     *\n     * @description\n     * Allows you to extend (carefully) or override (at your own peril) the\n     * `stateBuilder` object used internally by `$stateProvider`. This can be used\n     * to add custom functionality to ui-router, for example inferring templateUrl\n     * based on the state name.\n     *\n     * When passing only a name, it returns the current (original or decorated) builder\n     * function that matches `name`.\n     *\n     * The builder functions that can be decorated are listed below. Though not all\n     * necessarily have a good use case for decoration, that is up to you to decide.\n     *\n     * In addition, users can attach custom decorators, which will generate new\n     * properties within the state's internal definition. There is currently no clear\n     * use-case for this beyond accessing internal states (i.e. $state.$current),\n     * however, expect this to become increasingly relevant as we introduce additional\n     * meta-programming features.\n     *\n     * **Warning**: Decorators should not be interdependent because the order of\n     * execution of the builder functions in non-deterministic. Builder functions\n     * should only be dependent on the state definition object and super function.\n     *\n     *\n     * Existing builder functions and current return values:\n     *\n     * - **parent** `{object}` - returns the parent state object.\n     * - **data** `{object}` - returns state data, including any inherited data that is not\n     *   overridden by own values (if any).\n     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n     *   or `null`.\n     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n     *   navigable).\n     * - **params** `{object}` - returns an array of state params that are ensured to\n     *   be a super-set of parent's params.\n     * - **views** `{object}` - returns a views object where each key is an absolute view\n     *   name (i.e. \"viewName@stateName\") and each value is the config object\n     *   (template, controller) for the view. Even when you don't use the views object\n     *   explicitly on a state config, one is still created for you internally.\n     *   So by decorating this builder function you have access to decorating template\n     *   and controller properties.\n     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n     *   not including any params defined by ancestor states.\n     * - **path** `{string}` - returns the full path from the root down to this state.\n     *   Needed for state activation.\n     * - **includes** `{object}` - returns an object that includes every state that\n     *   would pass a `$state.includes()` test.\n     *\n     * @example\n     * <pre>\n     * // Override the internal 'views' builder with a function that takes the state\n     * // definition, and a reference to the internal function being overridden:\n     * $stateProvider.decorator('views', function (state, parent) {\n     *   let result = {},\n     *       views = parent(state);\n     *\n     *   angular.forEach(views, function (config, name) {\n     *     let autoName = (state.name + '.' + name).replace('.', '/');\n     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n     *     result[name] = config;\n     *   });\n     *   return result;\n     * });\n     *\n     * $stateProvider.state('home', {\n     *   views: {\n     *     'contact.list': { controller: 'ListController' },\n     *     'contact.item': { controller: 'ItemController' }\n     *   }\n     * });\n     *\n     * // ...\n     *\n     * $state.go('home');\n     * // Auto-populates list and item views with /partials/home/contact/list.html,\n     * // and /partials/home/contact/item.html, respectively.\n     * </pre>\n     *\n     * @param {string} name The name of the builder function to decorate.\n     * @param {object} func A function that is responsible for decorating the original\n     * builder function. The function receives two parameters:\n     *\n     *   - `{object}` - state - The state config object.\n     *   - `{object}` - super - The original builder function.\n     *\n     * @return {object} $stateProvider - $stateProvider instance\n     */\n    StateProvider.prototype.decorator = function (name, func) {\n        return this.stateRegistry.decorator(name, func) || this;\n    };\n    StateProvider.prototype.state = function (name, definition) {\n        if (predicates_1.isObject(name)) {\n            definition = name;\n        }\n        else {\n            definition.name = name;\n        }\n        this.stateRegistry.register(definition);\n        return this;\n    };\n    /**\n     * Registers an invalid state handler\n     *\n     * Registers a function to be injected and invoked when [[StateService.transitionTo]] has been called with an invalid\n     * state reference parameter\n     *\n     * This function can be injected with one some special values:\n     * - **`$to$`**: TargetState\n     * - **`$from$`**: TargetState\n     *\n     * Note: This API is subject to change.\n     * Replacement of dependency injection support with some alternative is likely.\n     *\n     * @param {function} callback\n     *   The function which will be injected and invoked, when a matching transition is started.\n     *   The function may optionally return a {TargetState} or a Promise for a TargetState.  If one\n     *   is returned, it is treated as a redirect.\n     */\n    StateProvider.prototype.onInvalid = function (callback) {\n        this.invalidCallbacks.push(callback);\n    };\n    return StateProvider;\n}());\nexports.StateProvider = StateProvider;\n//# sourceMappingURL=state.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/state.js\n ** module id = 31\n ** module chunks = 0 1\n **/","\"use strict\";\nvar transition_1 = require(\"./transition\");\nvar hookRegistry_1 = require(\"./hookRegistry\");\nvar resolve_1 = require(\"../hooks/resolve\");\nvar views_1 = require(\"../hooks/views\");\nvar url_1 = require(\"../hooks/url\");\nvar redirectTo_1 = require(\"../hooks/redirectTo\");\nvar onEnterExitRetain_1 = require(\"../hooks/onEnterExitRetain\");\nvar lazyLoadStates_1 = require(\"../hooks/lazyLoadStates\");\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexports.defaultTransOpts = {\n    location: true,\n    relative: null,\n    inherit: false,\n    notify: true,\n    reload: false,\n    custom: {},\n    current: function () { return null; },\n    source: \"unknown\"\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nvar TransitionService = (function () {\n    function TransitionService(_router) {\n        this._router = _router;\n        this.$view = _router.viewService;\n        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);\n        this._deregisterHookFns = {};\n        this.registerTransitionHooks();\n    }\n    /** @hidden */\n    TransitionService.prototype.registerTransitionHooks = function () {\n        var fns = this._deregisterHookFns;\n        // Wire up redirectTo hook\n        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);\n        // Wire up onExit/Retain/Enter state hooks\n        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);\n        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);\n        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);\n        // Wire up Resolve hooks\n        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);\n        fns.lazyResolve = resolve_1.registerLazyResolveState(this);\n        // Wire up the View management hooks\n        fns.loadViews = views_1.registerLoadEnteringViews(this);\n        fns.activateViews = views_1.registerActivateViews(this);\n        // After globals.current is updated at priority: 10000\n        fns.updateUrl = url_1.registerUpdateUrl(this);\n        // Lazy load state trees\n        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /** @inheritdoc */\n    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw \"\"; };\n    ;\n    /**\n     * Creates a new [[Transition]] object\n     *\n     * This is a factory function for creating new Transition objects.\n     * It is used internally by the [[StateService]] and should generally not be called by application code.\n     *\n     * @param fromPath the path to the current state (the from state)\n     * @param targetState the target state (destination)\n     * @returns a Transition\n     */\n    TransitionService.prototype.create = function (fromPath, targetState) {\n        return new transition_1.Transition(fromPath, targetState, this._router);\n    };\n    return TransitionService;\n}());\nexports.TransitionService = TransitionService;\n//# sourceMappingURL=transitionService.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/transitionService.js\n ** module id = 32\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module hooks */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar resolveContext_1 = require(\"../resolve/resolveContext\");\nvar hof_1 = require(\"../common/hof\");\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar eagerResolvePath = function (trans) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(common_1.noop);\n};\nexports.registerEagerResolvePath = function (transitionService) {\n    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });\n};\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar lazyResolveState = function (trans, state) {\n    return new resolveContext_1.ResolveContext(trans.treeChanges().to)\n        .subContext(state)\n        .resolvePath(\"LAZY\", trans)\n        .then(common_1.noop);\n};\nexports.registerLazyResolveState = function (transitionService) {\n    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });\n};\n//# sourceMappingURL=resolve.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/resolve.js\n ** module id = 33\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module hooks */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar coreservices_1 = require(\"../common/coreservices\");\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nvar loadEnteringViews = function (transition) {\n    var enteringViews = transition.views(\"entering\");\n    if (!enteringViews.length)\n        return;\n    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);\n};\nexports.registerLoadEnteringViews = function (transitionService) {\n    return transitionService.onStart({}, loadEnteringViews);\n};\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nvar activateViews = function (transition) {\n    var enteringViews = transition.views(\"entering\");\n    var exitingViews = transition.views(\"exiting\");\n    if (!enteringViews.length && !exitingViews.length)\n        return;\n    var $view = transition.router.viewService;\n    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n    $view.sync();\n};\nexports.registerActivateViews = function (transitionService) {\n    return transitionService.onSuccess({}, activateViews);\n};\n//# sourceMappingURL=views.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/views.js\n ** module id = 34\n ** module chunks = 0 1\n **/","\"use strict\";\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nvar updateUrl = function (transition) {\n    var options = transition.options();\n    var $state = transition.router.stateService;\n    var $urlRouter = transition.router.urlRouter;\n    // Dont update the url in these situations:\n    // The transition was triggered by a URL sync (options.source === 'url')\n    // The user doesn't want the url to update (options.location === false)\n    // The destination state, and all parents have no navigable url\n    if (options.source !== 'url' && options.location && $state.$current.navigable) {\n        var urlOptions = { replace: options.location === 'replace' };\n        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n    }\n    $urlRouter.update(true);\n};\nexports.registerUpdateUrl = function (transitionService) {\n    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n};\n//# sourceMappingURL=url.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/url.js\n ** module id = 35\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module hooks */ /** */\nvar predicates_1 = require(\"../common/predicates\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar targetState_1 = require(\"../state/targetState\");\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nvar redirectToHook = function (trans) {\n    var redirect = trans.to().redirectTo;\n    if (!redirect)\n        return;\n    function handleResult(result) {\n        var $state = trans.router.stateService;\n        if (result instanceof targetState_1.TargetState)\n            return result;\n        if (predicates_1.isString(result))\n            return $state.target(result, trans.params(), trans.options());\n        if (result['state'] || result['params'])\n            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n    }\n    if (predicates_1.isFunction(redirect)) {\n        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);\n    }\n    return handleResult(redirect);\n};\nexports.registerRedirectToHook = function (transitionService) {\n    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\n};\n//# sourceMappingURL=redirectTo.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/redirectTo.js\n ** module id = 36\n ** module chunks = 0 1\n **/","\"use strict\";\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName) {\n    return function (transition, state) {\n        var hookFn = state[hookName];\n        return hookFn(transition, state);\n    };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexports.registerOnExitHook = function (transitionService) {\n    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexports.registerOnRetainHook = function (transitionService) {\n    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexports.registerOnEnterHook = function (transitionService) {\n    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\n};\n//# sourceMappingURL=onEnterExitRetain.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/onEnterExitRetain.js\n ** module id = 37\n ** module chunks = 0 1\n **/","\"use strict\";\nvar coreservices_1 = require(\"../common/coreservices\");\n/**\n * A [[TransitionHookFn]] that lazy loads a state tree.\n *\n * When transitioning to a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function\n *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s\n * - Wait for the promise to resolve\n * - Deregister the original state \"abc\"\n *   - The original state definition is a placeholder for the lazy loaded states\n * - Register the new states\n * - Retry the transition\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nvar lazyLoadHook = function (transition) {\n    var toState = transition.to();\n    var registry = transition.router.stateRegistry;\n    function retryOriginalTransition() {\n        if (transition.options().source === 'url') {\n            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();\n            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };\n            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {\n                var state = _a[0], params = _a[1];\n                return !!params;\n            });\n            if (matches.length) {\n                var _a = matches[0], state = _a[0], params = _a[1];\n                return transition.router.stateService.target(state, params, transition.options());\n            }\n            transition.router.urlRouter.sync();\n        }\n        // The original transition was not triggered via url sync\n        // The lazy state should be loaded now, so re-try the original transition\n        var orig = transition.targetState();\n        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());\n    }\n    /**\n     * Replace the placeholder state with the newly loaded states from the NgModule.\n     */\n    function updateStateRegistry(result) {\n        // deregister placeholder state\n        registry.deregister(transition.$to());\n        if (result && Array.isArray(result.states)) {\n            result.states.forEach(function (state) { return registry.register(state); });\n        }\n    }\n    var hook = toState.lazyLoad;\n    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n    var promise = hook['_promise'];\n    if (!promise) {\n        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);\n        var cleanup = function () { return delete hook['_promise']; };\n        promise.catch(cleanup, cleanup);\n    }\n    return promise.then(retryOriginalTransition);\n};\nexports.registerLazyLoadHook = function (transitionService) {\n    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\n};\n//# sourceMappingURL=lazyLoadStates.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/hooks/lazyLoadStates.js\n ** module id = 38\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module view */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\nvar predicates_1 = require(\"../common/predicates\");\nvar trace_1 = require(\"../common/trace\");\n/**\n * The View service\n */\nvar ViewService = (function () {\n    function ViewService() {\n        var _this = this;\n        this.uiViews = [];\n        this.viewConfigs = [];\n        this._viewConfigFactories = {};\n        this.sync = function () {\n            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});\n            /**\n             * Given a ui-view and a ViewConfig, determines if they \"match\".\n             *\n             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n             *\n             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n             * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n             *\n             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n             *\n             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n             * - the ui-view's name matches the ViewConfig's target name\n             * - the ui-view's context matches the ViewConfig's anchor\n             *\n             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n             * - There exists a parent ui-view where:\n             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n             *    - the parent ui-view's context matches the ViewConfig's anchor\n             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n             *\n             * Example:\n             *\n             * DOM:\n             * <div ui-view>                        <!-- created in the root context (name: \"\") -->\n             *   <div ui-view=\"foo\">                <!-- created in the context named: \"A\"      -->\n             *     <div ui-view>                    <!-- created in the context named: \"A.B\"    -->\n             *       <div ui-view=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n             *       </div>\n             *     </div>\n             *   </div>\n             * </div>\n             *\n             * uiViews: [\n             *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n             *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n             *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n             *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n             * ]\n             *\n             * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n             *\n             * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n             * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n             * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n             * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n             *\n             * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n             * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n             * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n             *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n             *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n             * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n             *   the tail of the ui-view's fqn \"default.bar\"\n             */\n            var matches = function (uiView) { return function (viewConfig) {\n                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n                if (uiView.$type !== viewConfig.viewDecl.$type)\n                    return false;\n                // Split names apart from both viewConfig and uiView into segments\n                var vc = viewConfig.viewDecl;\n                var vcSegments = vc.$uiViewName.split(\".\");\n                var uivSegments = uiView.fqn.split(\".\");\n                // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n                // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n                    return false;\n                // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n                // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n                var negOffset = (1 - vcSegments.length) || undefined;\n                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n            }; };\n            // Return the number of dots in the fully qualified name\n            function uiViewDepth(uiView) {\n                return uiView.fqn.split(\".\").length;\n            }\n            // Return the ViewConfig's context's depth in the context tree.\n            function viewConfigDepth(config) {\n                var context = config.viewDecl.$context, count = 0;\n                while (++count && context.parent)\n                    context = context.parent;\n                return count;\n            }\n            // Given a depth function, returns a compare function which can return either ascending or descending order\n            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n            var matchingConfigPair = function (uiView) {\n                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));\n                if (matchingConfigs.length > 1)\n                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n                return [uiView, matchingConfigs[0]];\n            };\n            var configureUIView = function (_a) {\n                var uiView = _a[0], viewConfig = _a[1];\n                // If a parent ui-view is reconfigured, it could destroy child ui-views.\n                // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n                if (_this.uiViews.indexOf(uiView) !== -1)\n                    uiView.configUpdated(viewConfig);\n            };\n            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);\n        };\n    }\n    ViewService.prototype.rootContext = function (context) {\n        return this._rootContext = context || this._rootContext;\n    };\n    ;\n    ViewService.prototype.viewConfigFactory = function (viewType, factory) {\n        this._viewConfigFactories[viewType] = factory;\n    };\n    ViewService.prototype.createViewConfig = function (path, decl) {\n        var cfgFactory = this._viewConfigFactories[decl.$type];\n        if (!cfgFactory)\n            throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n        var cfgs = cfgFactory(path, decl);\n        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];\n    };\n    /**\n     * De-registers a ViewConfig.\n     *\n     * @param viewConfig The ViewConfig view to deregister.\n     */\n    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n        common_1.removeFrom(this.viewConfigs, viewConfig);\n    };\n    ;\n    ViewService.prototype.activateViewConfig = function (viewConfig) {\n        trace_1.trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n        this.viewConfigs.push(viewConfig);\n    };\n    ;\n    /**\n     * Allows a `ui-view` element to register its canonical name with a callback that allows it to\n     * be updated with a template, controller, and local variables.\n     *\n     * @param {String} name The fully-qualified name of the `ui-view` object being registered.\n     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration\n     *                   of the view.\n     * @return {Function} Returns a de-registration function used when the view is destroyed.\n     */\n    ViewService.prototype.registerUIView = function (uiView) {\n        trace_1.trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n        var uiViews = this.uiViews;\n        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };\n        if (uiViews.filter(fqnMatches).length)\n            trace_1.trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n        uiViews.push(uiView);\n        this.sync();\n        return function () {\n            var idx = uiViews.indexOf(uiView);\n            if (idx <= 0) {\n                trace_1.trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n                return;\n            }\n            trace_1.trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n            common_1.removeFrom(uiViews)(uiView);\n        };\n    };\n    ;\n    /**\n     * Returns the list of views currently available on the page, by fully-qualified name.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.available = function () {\n        return this.uiViews.map(hof_1.prop(\"fqn\"));\n    };\n    /**\n     * Returns the list of views on the page containing loaded content.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.active = function () {\n        return this.uiViews.filter(hof_1.prop(\"$config\")).map(hof_1.prop(\"name\"));\n    };\n    /**\n     * Normalizes a view's name from a state.views configuration block.\n     *\n     * @param context the context object (state declaration) that the view belongs to\n     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n     *\n     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n     */\n    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n        if (rawViewName === void 0) { rawViewName = \"\"; }\n        // TODO: Validate incoming view name with a regexp to allow:\n        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n        var viewAtContext = rawViewName.split(\"@\");\n        var uiViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : \"^\"; // default to parent context\n        // Handle relative view-name sugar syntax.\n        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n        if (relativeViewNameSugar) {\n            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n        }\n        if (uiViewName.charAt(0) === '!') {\n            uiViewName = uiViewName.substr(1);\n            uiViewContextAnchor = \"\"; // target absolutely from root\n        }\n        // handle parent relative targeting \"^.^.^\"\n        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n        if (relativeMatch.exec(uiViewContextAnchor)) {\n            var anchor = uiViewContextAnchor.split(\".\").reduce((function (anchor, x) { return anchor.parent; }), context);\n            uiViewContextAnchor = anchor.name;\n        }\n        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n    };\n    return ViewService;\n}());\nexports.ViewService = ViewService;\n//# sourceMappingURL=view.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/view/view.js\n ** module id = 39\n ** module chunks = 0 1\n **/","/** @module state */ /** for typedoc */\n\"use strict\";\nvar stateMatcher_1 = require(\"./stateMatcher\");\nvar stateBuilder_1 = require(\"./stateBuilder\");\nvar stateQueueManager_1 = require(\"./stateQueueManager\");\nvar common_1 = require(\"../common/common\");\nvar StateRegistry = (function () {\n    function StateRegistry(urlMatcherFactory, urlRouterProvider) {\n        this.urlRouterProvider = urlRouterProvider;\n        this.states = {};\n        this.listeners = [];\n        this.matcher = new stateMatcher_1.StateMatcher(this.states);\n        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);\n        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);\n        var rootStateDef = {\n            name: '',\n            url: '^',\n            views: null,\n            params: {\n                '#': { value: null, type: 'hash', dynamic: true }\n            },\n            abstract: true\n        };\n        var _root = this._root = this.stateQueue.register(rootStateDef);\n        _root.navigable = null;\n    }\n    /**\n     * Listen for a State Registry events\n     *\n     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n     *\n     * @example\n     * ```js\n     *\n     * let allStates = registry.get();\n     *\n     * // Later, invoke deregisterFn() to remove the listener\n     * let deregisterFn = registry.onStatesChanged((event, states) => {\n     *   switch(event) {\n     *     case: 'registered':\n     *       states.forEach(state => allStates.push(state));\n     *       break;\n     *     case: 'deregistered':\n     *       states.forEach(state => {\n     *         let idx = allStates.indexOf(state);\n     *         if (idx !== -1) allStates.splice(idx, 1);\n     *       });\n     *       break;\n     *   }\n     * });\n     * ```\n     *\n     * @param listener a callback function invoked when the registered states changes.\n     *        The function receives two parameters, `event` and `state`.\n     *        See [[StateRegistryListener]]\n     * @return a function that deregisters the listener\n     */\n    StateRegistry.prototype.onStatesChanged = function (listener) {\n        this.listeners.push(listener);\n        return function deregisterListener() {\n            common_1.removeFrom(this.listeners)(listener);\n        }.bind(this);\n    };\n    /**\n     * Gets the implicit root state\n     *\n     * Gets the root of the state tree.\n     * The root state is implicitly created by UI-Router.\n     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]\n     *\n     * @return the root [[State]]\n     */\n    StateRegistry.prototype.root = function () {\n        return this._root;\n    };\n    /**\n     * Adds a state to the registry\n     *\n     * Registers a [[StateDefinition]] or queues it for registration.\n     *\n     * Note: a state will be queued if the state's parent isn't yet registered.\n     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.\n     *\n     * @param stateDefinition the definition of the state to register.\n     * @returns the internal [[State]] object.\n     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n     *          If the state was only queued, then the object is not fully built.\n     */\n    StateRegistry.prototype.register = function (stateDefinition) {\n        return this.stateQueue.register(stateDefinition);\n    };\n    /** @hidden */\n    StateRegistry.prototype._deregisterTree = function (state) {\n        var _this = this;\n        var all = this.get().map(function (s) { return s.$$state(); });\n        var getChildren = function (states) {\n            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\n            return children.length === 0 ? children : children.concat(getChildren(children));\n        };\n        var children = getChildren([state]);\n        var deregistered = [state].concat(children).reverse();\n        deregistered.forEach(function (state) {\n            _this.urlRouterProvider.removeRule(state._urlRule);\n            delete _this.states[state.name];\n        });\n        return deregistered;\n    };\n    /**\n     * Removes a state from the registry\n     *\n     * This removes a state from the registry.\n     * If the state has children, they are are also removed from the registry.\n     *\n     * @param stateOrName the state's name or object representation\n     * @returns {State[]} a list of removed states\n     */\n    StateRegistry.prototype.deregister = function (stateOrName) {\n        var _state = this.get(stateOrName);\n        if (!_state)\n            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n        var deregisteredStates = this._deregisterTree(_state.$$state());\n        this.listeners.forEach(function (listener) { return listener(\"deregistered\", deregisteredStates.map(function (s) { return s.self; })); });\n        return deregisteredStates;\n    };\n    StateRegistry.prototype.get = function (stateOrName, base) {\n        var _this = this;\n        if (arguments.length === 0)\n            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n        var found = this.matcher.find(stateOrName, base);\n        return found && found.self || null;\n    };\n    StateRegistry.prototype.decorator = function (name, func) {\n        return this.builder.builder(name, func);\n    };\n    return StateRegistry;\n}());\nexports.StateRegistry = StateRegistry;\n//# sourceMappingURL=stateRegistry.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateRegistry.js\n ** module id = 40\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module state */ /** for typedoc */\nvar predicates_1 = require(\"../common/predicates\");\nvar glob_1 = require(\"../common/glob\");\nvar common_1 = require(\"../common/common\");\nvar StateMatcher = (function () {\n    function StateMatcher(_states) {\n        this._states = _states;\n    }\n    StateMatcher.prototype.isRelative = function (stateName) {\n        stateName = stateName || \"\";\n        return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n    };\n    StateMatcher.prototype.find = function (stateOrName, base) {\n        if (!stateOrName && stateOrName !== \"\")\n            return undefined;\n        var isStr = predicates_1.isString(stateOrName);\n        var name = isStr ? stateOrName : stateOrName.name;\n        if (this.isRelative(name))\n            name = this.resolvePath(name, base);\n        var state = this._states[name];\n        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n            return state;\n        }\n        else if (isStr) {\n            var matches = common_1.values(this._states)\n                .map(function (state) { return ({ state: state, glob: new glob_1.Glob(state.name) }); })\n                .filter(function (_a) {\n                var state = _a.state, glob = _a.glob;\n                return glob.matches(name);\n            })\n                .map(function (_a) {\n                var state = _a.state, glob = _a.glob;\n                return state;\n            });\n            if (matches.length > 1) {\n                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\n            }\n            return matches[0];\n        }\n        return undefined;\n    };\n    StateMatcher.prototype.resolvePath = function (name, base) {\n        if (!base)\n            throw new Error(\"No reference point given for path '\" + name + \"'\");\n        var baseState = this.find(base);\n        var splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n        for (; i < pathLength; i++) {\n            if (splitName[i] === \"\" && i === 0) {\n                current = baseState;\n                continue;\n            }\n            if (splitName[i] === \"^\") {\n                if (!current.parent)\n                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n                current = current.parent;\n                continue;\n            }\n            break;\n        }\n        var relName = splitName.slice(i).join(\".\");\n        return current.name + (current.name && relName ? \".\" : \"\") + relName;\n    };\n    return StateMatcher;\n}());\nexports.StateMatcher = StateMatcher;\n//# sourceMappingURL=stateMatcher.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateMatcher.js\n ** module id = 41\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module state */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar strings_1 = require(\"../common/strings\");\nvar hof_1 = require(\"../common/hof\");\nvar param_1 = require(\"../params/param\");\nvar resolvable_1 = require(\"../resolve/resolvable\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar parseUrl = function (url) {\n    if (!predicates_1.isString(url))\n        return false;\n    var root = url.charAt(0) === '^';\n    return { val: root ? url.substring(1) : url, root: root };\n};\nfunction nameBuilder(state) {\n    if (state.lazyLoad)\n        state.name = state.self.name + \".**\";\n    return state.name;\n}\nfunction selfBuilder(state) {\n    state.self.$$state = function () { return state; };\n    return state.self;\n}\nfunction dataBuilder(state) {\n    if (state.parent && state.parent.data) {\n        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);\n    }\n    return state.data;\n}\nvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n    return function urlBuilder(state) {\n        var stateDec = state;\n        if (stateDec && stateDec.url && stateDec.lazyLoad) {\n            stateDec.url += \"{remainder:any}\"; // match any path (.*)\n        }\n        var parsed = parseUrl(stateDec.url), parent = state.parent;\n        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n            params: state.params || {},\n            paramMap: function (paramConfig, isSearch) {\n                if (stateDec.reloadOnSearch === false && isSearch)\n                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });\n                return paramConfig;\n            }\n        });\n        if (!url)\n            return null;\n        if (!$urlMatcherFactoryProvider.isMatcher(url))\n            throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);\n    };\n};\nvar getNavigableBuilder = function (isRoot) {\n    return function navigableBuilder(state) {\n        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n    };\n};\nvar getParamsBuilder = function (paramTypes) {\n    return function paramsBuilder(state) {\n        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };\n        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));\n        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});\n    };\n};\nfunction pathBuilder(state) {\n    return state.parent ? state.parent.path.concat(state) : [state];\n}\nfunction includesBuilder(state) {\n    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};\n    includes[state.name] = true;\n    return includes;\n}\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nfunction resolvablesBuilder(state) {\n    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n    var objects2Tuples = function (resolveObj, resolvePolicies) {\n        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });\n    };\n    /** fetch DI annotations from a function or ng1-style array */\n    var annotate = function (fn) {\n        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);\n    };\n    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n    /** true if the object looks like a provide literal, or a ng2 Provider */\n    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };\n    /** true if the object looks like a tuple from obj2Tuples */\n    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };\n    /** extracts the token from a Provider or provide literal */\n    var token = function (p) { return p.provide || p.token; };\n    /** Given a literal resolve or provider object, returns a Resolvable */\n    var literal2Resolvable = hof_1.pattern([\n        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],\n        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],\n        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],\n        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],\n    ]);\n    var tuple2Resolvable = hof_1.pattern([\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n        [hof_1.pipe(hof_1.prop(\"val\"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n    ]);\n    var item2Resolvable = hof_1.pattern([\n        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],\n        [isResolveLiteral, literal2Resolvable],\n        [isLikeNg2Provider, literal2Resolvable],\n        [isTupleFromObj, tuple2Resolvable],\n        [hof_1.val(true), function (obj) { throw new Error(\"Invalid resolve value: \" + strings_1.stringify(obj)); }]\n    ]);\n    // If resolveBlock is already an array, use it as-is.\n    // Otherwise, assume it's an object and convert to an Array of tuples\n    var decl = state.resolve;\n    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n    return items.map(item2Resolvable);\n}\nexports.resolvablesBuilder = resolvablesBuilder;\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[State]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[State]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[State]] object by registering a decorator function\n * using the [[builder]] method.\n */\nvar StateBuilder = (function () {\n    function StateBuilder(matcher, $urlMatcherFactoryProvider) {\n        this.matcher = matcher;\n        var self = this;\n        var root = function () { return matcher.find(\"\"); };\n        var isRoot = function (state) { return state.name === \"\"; };\n        function parentBuilder(state) {\n            if (isRoot(state))\n                return null;\n            return matcher.find(self.parentName(state)) || root();\n        }\n        this.builders = {\n            name: [nameBuilder],\n            self: [selfBuilder],\n            parent: [parentBuilder],\n            data: [dataBuilder],\n            // Build a URLMatcher if necessary, either via a relative or absolute URL\n            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],\n            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n            navigable: [getNavigableBuilder(isRoot)],\n            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],\n            // Each framework-specific ui-router implementation should define its own `views` builder\n            // e.g., src/ng1/statebuilders/views.ts\n            views: [],\n            // Keep a full path from the root down to this state as this is needed for state activation.\n            path: [pathBuilder],\n            // Speed up $state.includes() as it's used a lot\n            includes: [includesBuilder],\n            resolvables: [resolvablesBuilder]\n        };\n    }\n    /**\n     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).\n     * More than one BuilderFunction can be registered for a given property.\n     *\n     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.\n     *\n     * @param name The name of the State property being registered for.\n     * @param fn The BuilderFunction which will be used to build the State property\n     * @returns a function which deregisters the BuilderFunction\n     */\n    StateBuilder.prototype.builder = function (name, fn) {\n        var builders = this.builders;\n        var array = builders[name] || [];\n        // Backwards compat: if only one builder exists, return it, else return whole arary.\n        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))\n            return array.length > 1 ? array : array[0];\n        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))\n            return;\n        builders[name] = array;\n        builders[name].push(fn);\n        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n    };\n    /**\n     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n     * properties and API built.\n     *\n     * @param state an uninitialized State object\n     * @returns the built State object\n     */\n    StateBuilder.prototype.build = function (state) {\n        var _a = this, matcher = _a.matcher, builders = _a.builders;\n        var parent = this.parentName(state);\n        if (parent && !matcher.find(parent))\n            return null;\n        for (var key in builders) {\n            if (!builders.hasOwnProperty(key))\n                continue;\n            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);\n            state[key] = chain(state);\n        }\n        return state;\n    };\n    StateBuilder.prototype.parentName = function (state) {\n        var name = state.name || \"\";\n        if (name.indexOf('.') !== -1)\n            return name.substring(0, name.lastIndexOf('.'));\n        if (!state.parent)\n            return \"\";\n        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n    };\n    StateBuilder.prototype.name = function (state) {\n        var name = state.name;\n        if (name.indexOf('.') !== -1 || !state.parent)\n            return name;\n        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;\n        return parentName ? parentName + \".\" + name : name;\n    };\n    return StateBuilder;\n}());\nexports.StateBuilder = StateBuilder;\n//# sourceMappingURL=stateBuilder.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateBuilder.js\n ** module id = 42\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module state */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar stateObject_1 = require(\"./stateObject\");\nvar StateQueueManager = (function () {\n    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {\n        this.states = states;\n        this.builder = builder;\n        this.$urlRouterProvider = $urlRouterProvider;\n        this.listeners = listeners;\n        this.queue = [];\n    }\n    StateQueueManager.prototype.register = function (config) {\n        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;\n        // Wrap a new object around the state so we can store our private details easily.\n        // @TODO: state = new State(extend({}, config, { ... }))\n        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {\n            self: config,\n            resolve: config.resolve || [],\n            toString: function () { return config.name; }\n        }));\n        if (!predicates_1.isString(state.name))\n            throw new Error(\"State must have a valid name\");\n        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)\n            throw new Error(\"State '\" + state.name + \"' is already defined\");\n        queue.push(state);\n        if (this.$state) {\n            this.flush($state);\n        }\n        return state;\n    };\n    StateQueueManager.prototype.flush = function ($state) {\n        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n        var registered = [], // states that got registered\n        orphans = [], // states that dodn't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n        while (queue.length > 0) {\n            var state = queue.shift();\n            var result = builder.build(state);\n            var orphanIdx = orphans.indexOf(state);\n            if (result) {\n                if (states.hasOwnProperty(state.name))\n                    throw new Error(\"State '\" + name + \"' is already defined\");\n                states[state.name] = state;\n                this.attachRoute($state, state);\n                if (orphanIdx >= 0)\n                    orphans.splice(orphanIdx, 1);\n                registered.push(state);\n                continue;\n            }\n            var prev = previousQueueLength[state.name];\n            previousQueueLength[state.name] = queue.length;\n            if (orphanIdx >= 0 && prev === queue.length) {\n                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n                // throw new Error(`Cannot register orphaned state '${state.name}'`);\n                queue.push(state);\n                return states;\n            }\n            else if (orphanIdx < 0) {\n                orphans.push(state);\n            }\n            queue.push(state);\n        }\n        if (registered.length) {\n            this.listeners.forEach(function (listener) { return listener(\"registered\", registered.map(function (s) { return s.self; })); });\n        }\n        return states;\n    };\n    StateQueueManager.prototype.autoFlush = function ($state) {\n        this.$state = $state;\n        this.flush($state);\n    };\n    StateQueueManager.prototype.attachRoute = function ($state, state) {\n        var $urlRouterProvider = this.$urlRouterProvider;\n        if (state.abstract || !state.url)\n            return;\n        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {\n                    $state.transitionTo(state, $match, { inherit: true, source: \"url\" });\n                }\n            }], function (rule) { return state._urlRule = rule; });\n    };\n    return StateQueueManager;\n}());\nexports.StateQueueManager = StateQueueManager;\n//# sourceMappingURL=stateQueueManager.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateQueueManager.js\n ** module id = 43\n ** module chunks = 0 1\n **/","/** @module state */ /** for typedoc */\n\"use strict\";\nvar common_1 = require(\"../common/common\");\nvar hof_1 = require(\"../common/hof\");\n/**\n * @ngdoc object\n * @name ui.router.state.type:State\n *\n * @description\n * Definition object for states. Includes methods for manipulating the state heirarchy.\n *\n * @param {Object} config  A configuration object hash that includes the results of user-supplied\n *        values, as well as values from `StateBuilder`.\n *\n * @returns {Object}  Returns a new `State` object.\n */\nvar State = (function () {\n    function State(config) {\n        common_1.extend(this, config);\n        // Object.freeze(this);\n    }\n    /**\n     * @ngdoc function\n     * @name ui.router.state.type:State#is\n     * @methodOf ui.router.state.type:State\n     *\n     * @description\n     * Compares the identity of the state against the passed value, which is either an object\n     * reference to the actual `State` instance, the original definition object passed to\n     * `$stateProvider.state()`, or the fully-qualified name.\n     *\n     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed\n     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.\n     */\n    State.prototype.is = function (ref) {\n        return this === ref || this.self === ref || this.fqn() === ref;\n    };\n    /**\n     * @ngdoc function\n     * @name ui.router.state.type:State#fqn\n     * @methodOf ui.router.state.type:State\n     *\n     * @description\n     * Returns the fully-qualified name of the state, based on its current position in the tree.\n     *\n     * @returns {string} Returns a dot-separated name of the state.\n     */\n    State.prototype.fqn = function () {\n        if (!this.parent || !(this.parent instanceof this.constructor))\n            return this.name;\n        var name = this.parent.fqn();\n        return name ? name + \".\" + this.name : this.name;\n    };\n    /**\n     * @ngdoc function\n     * @name ui.router.state.type:State#root\n     * @methodOf ui.router.state.type:State\n     *\n     * @description\n     * Returns the root node of this state's tree.\n     *\n     * @returns {State} The root of this state's tree.\n     */\n    State.prototype.root = function () {\n        return this.parent && this.parent.root() || this;\n    };\n    State.prototype.parameters = function (opts) {\n        opts = common_1.defaults(opts, { inherit: true });\n        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n        return inherited.concat(common_1.values(this.params));\n    };\n    State.prototype.parameter = function (id, opts) {\n        if (opts === void 0) { opts = {}; }\n        return (this.url && this.url.parameter(id, opts) ||\n            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||\n            opts.inherit && this.parent && this.parent.parameter(id));\n    };\n    State.prototype.toString = function () {\n        return this.fqn();\n    };\n    return State;\n}());\nexports.State = State;\n//# sourceMappingURL=stateObject.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateObject.js\n ** module id = 44\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module state */ /** */\nvar common_1 = require(\"../common/common\");\nvar predicates_1 = require(\"../common/predicates\");\nvar queue_1 = require(\"../common/queue\");\nvar coreservices_1 = require(\"../common/coreservices\");\nvar pathFactory_1 = require(\"../path/pathFactory\");\nvar node_1 = require(\"../path/node\");\nvar transitionService_1 = require(\"../transition/transitionService\");\nvar rejectFactory_1 = require(\"../transition/rejectFactory\");\nvar targetState_1 = require(\"./targetState\");\nvar param_1 = require(\"../params/param\");\nvar glob_1 = require(\"../common/glob\");\nvar common_2 = require(\"../common/common\");\nvar common_3 = require(\"../common/common\");\nvar StateService = (function () {\n    /** @hidden */\n    function StateService(router) {\n        this.router = router;\n        /** @hidden */\n        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n            if ($error$ instanceof Error && $error$.stack) {\n                console.error($error$);\n                console.error($error$.stack);\n            }\n            else if ($error$ instanceof rejectFactory_1.Rejection) {\n                console.error($error$.toString());\n                if ($error$.detail && $error$.detail.stack)\n                    console.error($error$.detail.stack);\n            }\n            else {\n                console.error($error$);\n            }\n        };\n        var getters = ['current', '$current', 'params', 'transition'];\n        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });\n        common_3.bindFunctions(StateService.prototype, this, this, boundFns);\n    }\n    Object.defineProperty(StateService.prototype, \"transition\", {\n        get: function () { return this.router.globals.transition; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"params\", {\n        get: function () { return this.router.globals.params; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"current\", {\n        get: function () { return this.router.globals.current; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"$current\", {\n        get: function () { return this.router.globals.$current; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Handler for when [[transitionTo]] is called with an invalid state.\n     *\n     * Invokes the [[onInvalid]] callbacks, in natural order.\n     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n     *\n     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n     */\n    StateService.prototype._handleInvalidTargetState = function (fromPath, $to$) {\n        var _this = this;\n        var globals = this.router.globals;\n        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n        var latest = latestThing();\n        var $from$ = pathFactory_1.PathFactory.makeTargetState(fromPath);\n        var callbackQueue = new queue_1.Queue(this.router.stateProvider.invalidCallbacks.slice());\n        var $q = coreservices_1.services.$q, $injector = coreservices_1.services.$injector;\n        var invokeCallback = function (callback) {\n            return $q.when($injector.invoke(callback, null, { $to$: $to$, $from$: $from$ }));\n        };\n        var checkForRedirect = function (result) {\n            if (!(result instanceof targetState_1.TargetState)) {\n                return;\n            }\n            var target = result;\n            // Recreate the TargetState, in case the state is now defined.\n            target = _this.target(target.identifier(), target.params(), target.options());\n            if (!target.valid())\n                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();\n            if (latestThing() !== latest)\n                return rejectFactory_1.Rejection.superseded().toPromise();\n            return _this.transitionTo(target.identifier(), target.params(), target.options());\n        };\n        function invokeNextCallback() {\n            var nextCallback = callbackQueue.dequeue();\n            if (nextCallback === undefined)\n                return rejectFactory_1.Rejection.invalid($to$.error()).toPromise();\n            return invokeCallback(nextCallback).then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n        }\n        return invokeNextCallback();\n    };\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#reload\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,\n     * controllers reinstantiated, and events re-fired.\n     *\n     * @example\n     * <pre>\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, {\n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n     *\n     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example\n     * <pre>\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n     * //and current state is 'contacts.detail.item'\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * </pre>\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    StateService.prototype.reload = function (reloadState) {\n        return this.transitionTo(this.current, this.params, {\n            reload: predicates_1.isDefined(reloadState) ? reloadState : true,\n            inherit: false,\n            notify: false\n        });\n    };\n    ;\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#go\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Convenience method for transitioning to a new state. `$state.go` calls\n     * `$state.transitionTo` internally but automatically sets options to\n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.\n     * This allows you to easily use an absolute or relative to path and specify\n     * only the parameters you'd like to update (while letting unspecified parameters\n     * inherit from the currently active ancestor states).\n     *\n     * @example\n     * <pre>\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * </pre>\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n     *\n     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to a parent state\n     * - `$state.go('^.sibling')` - will go to a sibling state\n     * - `$state.go('.child.grandchild')` - will go to grandchild state\n     *\n     * @param {object=} params A map of the parameters that will be sent to the state,\n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently\n     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n     * will get you all current parameters, etc.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     *\n     * Possible success values:\n     *\n     * - $state.current\n     *\n     * <br/>Possible rejection values:\n     *\n     * - 'transition superseded' - when a newer transition has been started after this one\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n     *   when a `$stateNotFound` `event.retry` promise errors.\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n     * - *resolve error* - when an error has occurred with a `resolve`\n     *\n     */\n    StateService.prototype.go = function (to, params, options) {\n        var defautGoOpts = { relative: this.$current, inherit: true };\n        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);\n        return this.transitionTo(to, params, transOpts);\n    };\n    ;\n    /** Factory method for creating a TargetState */\n    StateService.prototype.target = function (identifier, params, options) {\n        if (options === void 0) { options = {}; }\n        // If we're reloading, find the state object to reload from\n        if (predicates_1.isObject(options.reload) && !options.reload.name)\n            throw new Error('Invalid reload state object');\n        var reg = this.router.stateRegistry;\n        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n        if (options.reload && !options.reloadState)\n            throw new Error(\"No such reload state '\" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        var stateDefinition = reg.matcher.find(identifier, options.relative);\n        return new targetState_1.TargetState(identifier, stateDefinition, params, options);\n    };\n    ;\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#transitionTo\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n     *\n     * @example\n     * <pre>\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * </pre>\n     *\n     * @param {string|object} to State name or state object.\n     * @param {object=} toParams A map of the parameters that will be sent to the state,\n     * will populate $stateParams.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),\n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params\n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    StateService.prototype.transitionTo = function (to, toParams, options) {\n        var _this = this;\n        if (toParams === void 0) { toParams = {}; }\n        if (options === void 0) { options = {}; }\n        var router = this.router;\n        var globals = router.globals;\n        var transHistory = globals.transitionHistory;\n        options = common_1.defaults(options, transitionService_1.defaultTransOpts);\n        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });\n        var ref = this.target(to, toParams, options);\n        var latestSuccess = globals.successfulTransitions.peekTail();\n        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };\n        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n        if (!ref.exists())\n            return this._handleInvalidTargetState(currentPath, ref);\n        if (!ref.valid())\n            return common_1.silentRejection(ref.error());\n        /**\n         * Special handling for Ignored, Aborted, and Redirected transitions\n         *\n         * The semantics for the transition.run() promise and the StateService.transitionTo()\n         * promise differ. For instance, the run() promise may be rejected because it was\n         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n         */\n        var rejectedTransitionHandler = function (transition) { return function (error) {\n            if (error instanceof rejectFactory_1.Rejection) {\n                if (error.type === rejectFactory_1.RejectType.IGNORED) {\n                    // Consider ignored `Transition.run()` as a successful `transitionTo`\n                    router.urlRouter.update();\n                    return coreservices_1.services.$q.when(globals.current);\n                }\n                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && error.detail instanceof targetState_1.TargetState) {\n                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n                    // by returning the promise for the new (redirect) `Transition.run()`.\n                    var redirect = transition.redirect(error.detail);\n                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n                }\n                if (error.type === rejectFactory_1.RejectType.ABORTED) {\n                    router.urlRouter.update();\n                }\n            }\n            var errorHandler = _this.defaultErrorHandler();\n            errorHandler(error);\n            return coreservices_1.services.$q.reject(error);\n        }; };\n        var transition = this.router.transitionService.create(currentPath, ref);\n        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676\n        // Return a promise for the transition, which also has the transition object on it.\n        return common_1.extend(transitionToPromise, { transition: transition });\n    };\n    ;\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#is\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n     * but only checks for the full state name. If params is supplied then it will be\n     * tested for strict equality against the current active params object, so all params\n     * must match with none missing and no extras.\n     *\n     * @example\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it is the state.\n     */\n    StateService.prototype.is = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state))\n            return undefined;\n        if (this.$current !== state)\n            return false;\n        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;\n    };\n    ;\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#includes\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * @example\n     * Partial and relative names\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     *\n     * // Using relative names (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n     * </pre>\n     *\n     * Basic globbing patterns\n     * <pre>\n     * $state.$current.name = 'contacts.details.item.url';\n     *\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * </pre>\n     *\n     * @param {string|object} stateOrName A partial name, relative name, glob pattern,\n     * or state object to be searched for within the current state name.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n     * that you'd like to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    StateService.prototype.includes = function (stateOrName, params, options) {\n        options = common_1.defaults(options, { relative: this.$current });\n        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);\n        if (glob) {\n            if (!glob.matches(this.$current.name))\n                return false;\n            stateOrName = this.$current.name;\n        }\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n        if (!predicates_1.isDefined(state))\n            return undefined;\n        if (!predicates_1.isDefined(include[state.name]))\n            return false;\n        // @TODO Replace with Param.equals() ?\n        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;\n    };\n    ;\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#href\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A url generation method that returns the compiled url for the given state populated with the given params.\n     *\n     * @example\n     * <pre>\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n     * @param {object=} params An object of parameter values to fill the state's required parameters.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n     *    ancestor with a valid url).\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),\n     *    defines which state to be relative from.\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *\n     * @returns {string} compiled state url\n     */\n    StateService.prototype.href = function (stateOrName, params, options) {\n        var defaultHrefOpts = {\n            lossy: true,\n            inherit: true,\n            absolute: false,\n            relative: this.$current\n        };\n        options = common_1.defaults(options, defaultHrefOpts);\n        params = params || {};\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!predicates_1.isDefined(state))\n            return null;\n        if (options.inherit)\n            params = this.params.$inherit(params, this.$current, state);\n        var nav = (state && options.lossy) ? state.navigable : state;\n        if (!nav || nav.url === undefined || nav.url === null) {\n            return null;\n        }\n        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {\n            absolute: options.absolute\n        });\n    };\n    ;\n    /**\n     * Sets or gets the default [[transitionTo]] error handler.\n     *\n     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n     * This includes errors caused by resolves and transition hooks.\n     *\n     * Note:\n     * This handler does not receive certain Transition rejections.\n     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n     *\n     * The built-in default error handler logs the error to the console.\n     *\n     * You can provide your own custom handler.\n     *\n     * @example\n     * ```js\n     *\n     * stateService.defaultErrorHandler(function() {\n     *   // Do not log transitionTo errors\n     * });\n     * ```\n     *\n     * @param handler a global error handler function\n     * @returns the current global error handler\n     */\n    StateService.prototype.defaultErrorHandler = function (handler) {\n        return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n    };\n    StateService.prototype.get = function (stateOrName, base) {\n        var reg = this.router.stateRegistry;\n        if (arguments.length === 0)\n            return reg.get();\n        return reg.get(stateOrName, base || this.$current);\n    };\n    return StateService;\n}());\nexports.StateService = StateService;\n//# sourceMappingURL=stateService.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/stateService.js\n ** module id = 45\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module core */ /** */\nvar stateParams_1 = require(\"./params/stateParams\");\nvar queue_1 = require(\"./common/queue\");\nvar common_1 = require(\"./common/common\");\n/**\n * Global mutable state\n */\nvar Globals = (function () {\n    function Globals(transitionService) {\n        var _this = this;\n        this.params = new stateParams_1.StateParams();\n        this.transitionHistory = new queue_1.Queue([], 1);\n        this.successfulTransitions = new queue_1.Queue([], 1);\n        var beforeNewTransition = function ($transition$) {\n            _this.transition = $transition$;\n            _this.transitionHistory.enqueue($transition$);\n            var updateGlobalState = function () {\n                _this.successfulTransitions.enqueue($transition$);\n                _this.$current = $transition$.$to();\n                _this.current = _this.$current.self;\n                common_1.copy($transition$.params(), _this.params);\n            };\n            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });\n            var clearCurrentTransition = function () { if (_this.transition === $transition$)\n                _this.transition = null; };\n            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);\n        };\n        transitionService.onBefore({}, beforeNewTransition);\n    }\n    return Globals;\n}());\nexports.Globals = Globals;\n//# sourceMappingURL=globals.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/globals.js\n ** module id = 46\n ** module chunks = 0 1\n **/","\"use strict\";\n/** @module params */ /** for typedoc */\nvar common_1 = require(\"../common/common\");\nvar StateParams = (function () {\n    function StateParams(params) {\n        if (params === void 0) { params = {}; }\n        common_1.extend(this, params);\n    }\n    /**\n     * Merges a set of parameters with all parameters inherited between the common parents of the\n     * current state and a given destination state.\n     *\n     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n     * @param {Object} $current Internal definition of object representing the current state.\n     * @param {Object} $to Internal definition of object representing state to transition to.\n     */\n    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n        for (var i in parents) {\n            if (!parents[i] || !parents[i].params)\n                continue;\n            parentParams = Object.keys(parents[i].params);\n            if (!parentParams.length)\n                continue;\n            for (var j in parentParams) {\n                if (inheritList.indexOf(parentParams[j]) >= 0)\n                    continue;\n                inheritList.push(parentParams[j]);\n                inherited[parentParams[j]] = this[parentParams[j]];\n            }\n        }\n        return common_1.extend({}, inherited, newParams);\n    };\n    ;\n    return StateParams;\n}());\nexports.StateParams = StateParams;\n//# sourceMappingURL=stateParams.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/params/stateParams.js\n ** module id = 47\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/**\n * This module contains code for State Parameters.\n *\n * See [[ParamDeclaration]]\n * @module params\n * @preferred doc\n */\n/** for typedoc */\n__export(require(\"./param\"));\n__export(require(\"./paramTypes\"));\n__export(require(\"./stateParams\"));\n__export(require(\"./type\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/params/module.js\n ** module id = 48\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module path */ /** for typedoc */\n__export(require(\"./node\"));\n__export(require(\"./pathFactory\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/path/module.js\n ** module id = 49\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module resolve */ /** for typedoc */\n__export(require(\"./interface\"));\n__export(require(\"./resolvable\"));\n__export(require(\"./resolveContext\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/resolve/module.js\n ** module id = 50\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module state */ /** for typedoc */\n__export(require(\"./state\"));\n__export(require(\"./stateBuilder\"));\n__export(require(\"./stateObject\"));\n__export(require(\"./stateMatcher\"));\n__export(require(\"./stateQueueManager\"));\n__export(require(\"./stateRegistry\"));\n__export(require(\"./stateService\"));\n__export(require(\"./targetState\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/state/module.js\n ** module id = 51\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/**\n * This module contains APIs related to a Transition.\n *\n * See [[Transition]], [[$transitions]]\n *\n * @module transition\n * @preferred\n */\n/** for typedoc */\n__export(require(\"./hookBuilder\"));\n__export(require(\"./hookRegistry\"));\n__export(require(\"./rejectFactory\"));\n__export(require(\"./transition\"));\n__export(require(\"./transitionHook\"));\n__export(require(\"./transitionService\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/transition/module.js\n ** module id = 52\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module url */ /** for typedoc */\n__export(require(\"./urlMatcher\"));\n__export(require(\"./urlMatcherConfig\"));\n__export(require(\"./urlMatcherFactory\"));\n__export(require(\"./urlRouter\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/url/module.js\n ** module id = 53\n ** module chunks = 0 1\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n/** @module view */ /** for typedoc */\n__export(require(\"./view\"));\n//# sourceMappingURL=module.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/ui-router-core/view/module.js\n ** module id = 54\n ** module chunks = 0 1\n **/","/**\n * Naive, pure JS implementation of core ui-router services\n *\n * @module justjs\n */ /** */\nimport {services} from \"ui-router-core\";\nimport {isDefined, isFunction, isArray, isObject, isInjectable} from \"ui-router-core\";\nimport {extend, assertPredicate, forEach, applyPairs} from \"ui-router-core\";\nimport {$QLike, $InjectorLike, IInjectable} from \"ui-router-core\";\n\n/** $q-like promise api */\nservices.$q = {\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n  reject: (val) => new Promise((resolve, reject) => { reject(val); }),\n  defer: () => {\n    let deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return new Promise((resolve, reject) => {\n        let results = [];\n        promises.reduce((wait4, promise) => wait4.then(() => promise.then(val => results.push(val))), services.$q.when())\n          .then(() => { resolve(results); }, reject);\n      });\n    }\n\n    if (isObject(promises)) {\n      // console.log(\"$q.all({}) Input:\", promises);\n\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      let chain = Object.keys(promises)\n          .map(key => promises[key].then(val => ({key, val})));\n      // Then wait for all promises to resolve, and convert them back to an object\n      return services.$q.all(chain).then(values => {\n        let value = values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {});\n\n        // console.log(\"$q.all({}) Output:\", value);\n        return value;\n      });\n    }\n  }\n} as $QLike;\n\n\n/** angular1-like injector api */\n// globally available injectables\nlet globals = { };\nlet STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nlet ARGUMENT_NAMES = /([^\\s,]+)/g;\nservices.$injector = {\n  get: name => globals[name],\n  has: (name) => services.$injector.get(name) != null,\n  invoke: (fn:IInjectable, context?, locals?) => {\n    let all = extend({}, globals, locals || {});\n    let params = services.$injector.annotate(fn);\n    let ensureExist = assertPredicate(key => all.hasOwnProperty(key), key => `DI can't find injectable: '${key}'`);\n    let args = params.filter(ensureExist).map(x => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n  annotate: (fn:IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    let fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  }\n} as $InjectorLike;\n\n\n/** angular1-like location provider */\nlet loc = <any> services.location;\nlet hashPrefix: string = '';\nlet baseHref: string = \"\";\n\nlet locCfg = <any> services.locationConfig;\n\nlocCfg.port = () => location.port;\nlocCfg.protocol = () => location.protocol;\nlocCfg.host = () => location.host;\nlocCfg.baseHref = (newBaseHref: string): string => {\n  if(isDefined(newBaseHref)) {\n    baseHref = newBaseHref;\n  }\n  return baseHref;\n};\nlocCfg.html5Mode = () => false;\nlocCfg.hashPrefix = (newprefix: string): string => {\n  if(isDefined(newprefix)) {\n    hashPrefix = newprefix;\n  }\n  return hashPrefix;\n};\n\nconst beforeAfterSubstr = char => str => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nconst splitHash = beforeAfterSubstr(\"#\");\nconst splitQuery = beforeAfterSubstr(\"?\");\nconst splitEqual = beforeAfterSubstr(\"=\");\nconst trimHashVal = (str) => str ? str.replace(/^#/, \"\") : \"\";\n\nconst keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val]\n  }\n\n  return accum;\n};\n\nconst getParams = (queryString) => queryString.split(\"&\").map(splitEqual).reduce(keyValsToObjectR, {});\n\n// Location: hash mode or pushstate mode\nexport let hashLocation = {\n  hash: () =>\n      splitHash(trimHashVal(location.hash))[1],\n  path: () =>\n      splitHash(splitQuery(trimHashVal(location.hash))[0])[0],\n  search: () =>\n    getParams(splitQuery(splitHash(trimHashVal(location.hash))[1])[1]),\n  setUrl: (url: string, replace: boolean = true) => {\n    if (url) location.hash = url;\n  },\n  url: (url) => {\n    return loc.path();\n  },\n  onChange: (cb) => window.addEventListener(\"hashchange\", cb, false)\n};\n\n\nexport let pushStateLocation = {\n  hash: () =>\n      trimHashVal(location.hash),\n  path: () => {\n    let base = locCfg.baseHref()\n    let path = location.pathname;\n    let idx = path.indexOf(base);\n    if (idx !== 0) throw new Error(`current url: ${path} does not start with <base> tag ${base}`);\n    return path.substr(base.length);\n  },\n  search: () =>\n    getParams(splitQuery(location.search)[1]),\n  setUrl: (url: string, replace: boolean = false) => {\n    if (isDefined(url)) {\n      if (replace) history.replaceState(null, null, locCfg.baseHref() + url);\n      else history.pushState(null, null, locCfg.baseHref() + url);\n    }\n  },\n  url: (url) => {\n    let hash = loc.hash();\n    return loc.path() + (hash ? \"#\" + hash : \"\");\n  },\n  onChange: (cb) => window.addEventListener(\"popstate\", cb, false)\n};\n\nObject.assign(loc, hashLocation);\n\n\n\n/** WEBPACK FOOTER **\n ** ./_src/justjs.ts\n **/","import { services, forEach, map, pick, PathNode, ViewConfig, ViewService, State} from \"ui-router-core\";\nimport {ReactViewDeclaration} from \"./interface\";\n\n/**\n * This is a [[StateBuilder.builder]] function for react `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-react.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function reactViewsBuilder(state: State) {\n  let views = {}, viewsDefinitionObject;\n  if (!state.views) {\n    viewsDefinitionObject = { \"$default\": pick(state, \"component\") };\n  } else {\n    viewsDefinitionObject = map(state.views, (val: any, key) => {\n      if (val.component) return val;\n      return { component: val };\n    })\n  }\n\n  forEach(viewsDefinitionObject, function (config, name) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"react\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class ReactViewConfig implements ViewConfig {\n  loaded: boolean = true;\n  $id: number = id++;\n\n  constructor(public path: [PathNode], public viewDecl: ReactViewDeclaration) { }\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./_src/ui-router-react.tsx\n **/","import * as React from 'react';\nimport {Component, PropTypes, ValidationMap, createElement, cloneElement, isValidElement} from 'react';\nimport {ActiveUIView, ViewContext, ViewConfig, Transition, ResolveContext, applyPairs, extend} from \"ui-router-core\";\nimport UIRouterReact from \"../index\";\nimport {ReactViewConfig} from \"../ui-router-react\";\n\nlet id = 0;\n\nexport interface UIViewAddress {\n  context: ViewContext;\n  fqn: string;\n}\n\nexport interface IProps {\n  name?: string;\n  className?: string;\n  style?: Object;\n}\n\nexport interface IState {\n  id?: number;\n  loaded?: boolean;\n  component?: string;\n  props?: any;\n}\n\nexport class UIView extends Component<IProps, IState> {\n  // This object contains all the metadata for this UIView\n  uiViewData: ActiveUIView;\n\n  // This object contains only the state context which created this <UIView/> component\n  // and the UIView's fully qualified name. This object is made available to children via `context`\n  uiViewAddress: UIViewAddress;\n\n  // Deregisters the UIView when it is unmounted\n  deregister: Function;\n\n  // Bind the rendered component instance in order to call its uiCanExit hook\n  componentInstance: any;\n  // Removes th Hook when the UIView is unmounted\n  removeHook: Function;\n\n  state: IState = {\n    loaded: false,\n    component: 'div',\n    props: {}\n  }\n\n  static propTypes: ValidationMap<IProps> = {\n    name: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object\n  }\n\n  static childContextTypes: ValidationMap<any> = {\n    parentUIViewAddress: PropTypes.object\n  }\n\n  static contextTypes: ValidationMap<any> = {\n    parentUIViewAddress: PropTypes.object\n  }\n\n  render() {\n    let { children } = this.props;\n    let { component, props, loaded } = this.state;\n    // register reference of child component\n    // register new hook right after component has been rendered\n    let stateName: string = this.uiViewAddress && this.uiViewAddress.context && this.uiViewAddress.context.name;\n    props.ref = c => {\n      this.componentInstance = c;\n      this.registerUiCanExitHook(stateName);\n    };\n    \n    let child = !loaded && isValidElement(children)\n      ? cloneElement(children, props)\n      : createElement(component, props);\n    return child;\n  }\n\n  getChildContext() {\n    return {\n      parentUIViewAddress: this.uiViewAddress\n    }\n  }\n\n  componentWillMount() {\n    let router = UIRouterReact.instance;\n\n    // Check the context for the parent UIView's fqn and State\n    let parent: UIViewAddress = this.context['parentUIViewAddress'];\n    // Not found in context, this is a root UIView\n    parent = parent || { fqn: \"\", context: router.stateRegistry.root() };\n\n    let name = this.props.name || \"$default\";\n\n    this.uiViewData = {\n      $type: 'react',\n      id: ++id,\n      name: name,\n      fqn: parent.fqn ? parent.fqn + \".\" + name : name,\n      creationContext: parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined\n    } as ActiveUIView;\n\n    this.uiViewAddress = { fqn: this.uiViewData.fqn, context: undefined };\n\n    this.deregister = router.viewService.registerUIView(this.uiViewData);\n\n    this.setState({ id: this.uiViewData.id });\n  }\n\n  componentWillUnmount() {\n    this.deregister();\n  }\n\n  viewConfigUpdated(newConfig: ReactViewConfig) {\n    let newComponent = newConfig && newConfig.viewDecl && newConfig.viewDecl.component;\n    let trans: Transition = undefined, resolves = {};\n\n    if (newConfig) {\n      let context: ViewContext = newConfig.viewDecl && newConfig.viewDecl.$context;\n      this.uiViewAddress = { fqn: this.uiViewAddress.fqn, context };\n\n      let ctx = new ResolveContext(newConfig.path);\n      trans = ctx.getResolvable(Transition).data;\n      let stringTokens = trans.getResolveTokens().filter(x => typeof x === 'string');\n      resolves = stringTokens.map(token => [token, trans.getResolveValue(token)]).reduce(applyPairs, {});\n    }\n\n    this.uiViewData.config = newConfig;\n    let props = {resolves, transition: trans};\n\n    // attach any style or className to the rendered component\n    // specified on the UIView itself\n    let styleProps: {\n      className?:string,\n      style?: Object\n    } = {}\n    if (this.props.className) styleProps.className = this.props.className;\n    if (this.props.className) styleProps.style = this.props.style;\n\n    this.setState({\n      component: newComponent || 'div',\n      props: newComponent ? extend(props, styleProps) : styleProps,\n      loaded: newComponent ? true : false \n    });\n  }\n\n  registerUiCanExitHook (stateName: string) {\n    typeof this.removeHook === 'function' && this.removeHook();\n    let criteria = { exiting: stateName };\n    let callback = this.componentInstance && typeof this.componentInstance.uiCanExit === 'function' && this.componentInstance.uiCanExit;\n    if (stateName && callback) {\n      let transitions = UIRouterReact.instance.transitionService;\n      this.removeHook = transitions.onBefore(criteria, callback, {});\n    }\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./_src/components/UIView.tsx\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_58__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\",\"amd\":\"react\",\"commonjs2\":\"react\",\"commonjs\":\"react\"}\n ** module id = 58\n ** module chunks = 0 1\n **/","import * as React from 'react';\nimport {Component, PropTypes, createElement, cloneElement, isValidElement, ValidationMap} from 'react';\nimport * as classNames from 'classnames';\nimport UIRouterReact from '../index';\nimport {extend, TransitionOptions} from 'ui-router-core';\nimport {UIViewAddress} from \"./UIView\";\n\nexport interface IProps {\n  children?: any;\n  to: string;\n  params?: { [key: string]: any };\n  options?: TransitionOptions;\n  className?: string;\n}\nexport class UISref extends Component<IProps,any> {\n  // deregister function for parent UISrefActive\n  deregister: Function;\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    to: PropTypes.string.isRequired,\n    params: PropTypes.object,\n    options: PropTypes.object,\n    className: PropTypes.string\n  }\n\n  static contextTypes: ValidationMap<any> = {\n    parentUIViewAddress: PropTypes.object,\n    parentUiSrefActiveAddStateInfo: PropTypes.func\n  }\n\n  componentWillMount () {\n    const addStateInfo = this.context['parentUiSrefActiveAddStateInfo'];\n    this.deregister = typeof addStateInfo === 'function'\n      ? addStateInfo(this.props.to, this.props.params)\n      : () => {};\n  }\n\n  componentWillUnmount () {\n    this.deregister();\n  }\n\n  getOptions = () => {\n    let parent: UIViewAddress = this.context['parentUIViewAddress'];\n    let parentContext = parent && parent.context || UIRouterReact.instance.stateRegistry.root();\n    let defOpts = { relative: parentContext, inherit: true };\n    return extend(defOpts, this.props.options || {});\n  }\n\n  handleClick = (e) => {\n    if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      let params = this.props.params || {};\n      let to = this.props.to;\n      let options = this.getOptions();\n      UIRouterReact.instance.stateService.go(to, params, options);\n    }\n  }\n\n  render () {\n    let params = this.props.params || {}, to = this.props.to, options = this.getOptions();\n    let childrenProps = this.props.children.props;\n    let props = Object.assign({}, childrenProps, {\n        onClick: this.handleClick,\n        href: UIRouterReact.instance.stateService.href(to, params, options),\n        className: classNames(this.props.className, childrenProps.className)\n    });\n    return cloneElement(this.props.children, props);\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./_src/components/UISref.tsx\n **/","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/classnames/index.js\n ** module id = 60\n ** module chunks = 0 1\n **/","import * as React from 'react';\nimport {Component, PropTypes, cloneElement, ValidationMap} from 'react';\nimport * as classNames from 'classnames';\nimport UIRouterReact, { UISref } from '../index';\nimport {UIViewAddress} from \"./UIView\";\n\nexport interface IProps {\n  class?: string;\n  exact?: Boolean;\n  children?: any;\n}\n\nexport interface IStates {\n  state: { name: string; [key: string]: any };\n  params: Object;\n  hash: string;\n}\n\nexport class UISrefActive extends Component<IProps,any> {\n  // keep track of states to watch and their activeClasses\n  states: Array<IStates> = [];\n  activeClasses: { [key: string]: string } = {};\n\n  // deregister the callback for state changed when unmounted\n  deregister: Function;\n\n  static propTypes = {\n    class: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired\n  }\n\n  static contextTypes: ValidationMap<any> = {\n    parentUIViewAddress: PropTypes.object\n  }\n\n  static childContextTypes: ValidationMap<any> = {\n    parentUiSrefActiveAddStateInfo: PropTypes.func\n  }\n\n  getChildContext() {\n    return {\n      parentUiSrefActiveAddStateInfo: this.addStateInfo\n    }\n  }\n\n  componentWillMount () {\n    // register callback for state change\n    this.deregister = UIRouterReact.instance.transitionService.onSuccess({}, () => this.forceUpdate());\n  }\n\n  componentWillUnmount () {\n    this.deregister();\n  }\n\n  addStateInfo = (stateName, stateParams) => {\n    const activeClass = this.props.class;\n    let deregister = this.addState(stateName, stateParams, activeClass);\n    this.forceUpdate();\n    return deregister;\n  }\n\n  addState = (stateName, stateParams, activeClass) => {\n    const {stateService} = UIRouterReact.instance;\n    let parent = this.context['parentUIViewAddress'];\n    let stateContext = parent && parent.context || UIRouterReact.instance.stateRegistry.root();\n    let state = stateService.get(stateName, stateContext);\n    let stateHash = this.createStateHash(stateName, stateParams);\n    let stateInfo = {\n      state: state || { name: stateName },\n      params: stateParams,\n      hash: stateHash\n    }\n    this.states.push(stateInfo);\n    this.activeClasses[stateHash] = activeClass;\n    return () => {\n      let idx = this.states.indexOf(stateInfo);\n      if (idx !== -1) this.states.splice(idx, 1);\n    }\n  }\n\n  createStateHash = (state: string, params: Object) => {\n    if (typeof state !== 'string') {\n      throw new Error('state should be a string');\n    }\n    return params && typeof params === 'object'\n      ? state + JSON.stringify(params)\n      : state;\n  }\n\n  getActiveClasses = () => {\n    let activeClasses = [];\n    let {stateService} = UIRouterReact.instance;\n    let {exact} = this.props;\n    this.states.forEach(s => {\n      let { state, params, hash } = s;\n      if (!exact && stateService.includes(state.name, params)) activeClasses.push(this.activeClasses[hash]);\n      if (exact && stateService.is(state.name, params)) activeClasses.push(this.activeClasses[hash]);\n    });\n    return activeClasses;\n  }\n\n  render () {\n    let activeClasses = this.getActiveClasses();\n    return activeClasses.length > 0\n      ? cloneElement(this.props.children, Object.assign({}, this.props.children.props, {\n        className: classNames(this.props.children.props.className, activeClasses)\n      }))\n      : this.props.children;\n  }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./_src/components/UISrefActive.tsx\n **/"],"sourceRoot":""}