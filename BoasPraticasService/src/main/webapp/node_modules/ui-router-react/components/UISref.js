"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var react_1 = require('react');
var classNames = require('classnames');
var index_1 = require('../index');
var ui_router_core_1 = require('ui-router-core');
var UISref = (function (_super) {
    __extends(UISref, _super);
    function UISref() {
        var _this = this;
        _super.apply(this, arguments);
        this.getOptions = function () {
            var parent = _this.context['parentUIViewAddress'];
            var parentContext = parent && parent.context || index_1.default.instance.stateRegistry.root();
            var defOpts = { relative: parentContext, inherit: true };
            return ui_router_core_1.extend(defOpts, _this.props.options || {});
        };
        this.handleClick = function (e) {
            if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                var params = _this.props.params || {};
                var to = _this.props.to;
                var options = _this.getOptions();
                index_1.default.instance.stateService.go(to, params, options);
            }
        };
    }
    UISref.prototype.componentWillMount = function () {
        var addStateInfo = this.context['parentUiSrefActiveAddStateInfo'];
        this.deregister = typeof addStateInfo === 'function'
            ? addStateInfo(this.props.to, this.props.params)
            : function () { };
    };
    UISref.prototype.componentWillUnmount = function () {
        this.deregister();
    };
    UISref.prototype.render = function () {
        var params = this.props.params || {}, to = this.props.to, options = this.getOptions();
        var childrenProps = this.props.children.props;
        var props = Object.assign({}, childrenProps, {
            onClick: this.handleClick,
            href: index_1.default.instance.stateService.href(to, params, options),
            className: classNames(this.props.className, childrenProps.className)
        });
        return react_1.cloneElement(this.props.children, props);
    };
    UISref.propTypes = {
        children: react_1.PropTypes.element.isRequired,
        to: react_1.PropTypes.string.isRequired,
        params: react_1.PropTypes.object,
        options: react_1.PropTypes.object,
        className: react_1.PropTypes.string
    };
    UISref.contextTypes = {
        parentUIViewAddress: react_1.PropTypes.object,
        parentUiSrefActiveAddStateInfo: react_1.PropTypes.func
    };
    return UISref;
}(react_1.Component));
exports.UISref = UISref;
//# sourceMappingURL=UISref.js.map